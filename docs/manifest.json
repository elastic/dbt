{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v4.json", "dbt_version": "1.0.7", "generated_at": "2022-06-09T03:01:48.314346Z", "invocation_id": "19487c6a-cacf-4e93-a612-0c6185eb77f3", "env": {}, "project_id": "9437d0b1e29a00d0529da7c3b99b96ac", "user_id": "ddd918e4-6224-4220-a876-f16eb0187c40", "send_anonymous_usage_stats": true, "adapter_type": "bigquery"}, "nodes": {"operation.elastic_dbt.elastic_dbt-on-run-end-0": {"raw_sql": "{{ elementary.upload_dbt_artifacts(results) }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": ["macro.elementary.upload_dbt_artifacts"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "hours_to_expiration": null, "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elastic_dbt", "hooks", "elastic_dbt-on-run-end-0"], "unique_id": "operation.elastic_dbt.elastic_dbt-on-run-end-0", "package_name": "elastic_dbt", "root_path": "/Users/skinner/Github/dbt", "path": "hooks/elastic_dbt-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "elastic_dbt-on-run-end-0", "alias": "elastic_dbt-on-run-end-0", "checksum": {"name": "sha256", "checksum": "127585f4d3a8505cd1ee54cf50393d14c9fcfa556ff8cafb0ff7d82ce1cc1809"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"hours_to_expiration": "{{ 1 if target.name == 'ci' else None }}"}, "created_at": 1654743709.501995, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "model.elementary.test_run_results": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith dbt_run_results as (\n    {% set dbt_run_results = source('elementary_dbt_artifacts', 'dbt_run_results') %}\n    {% if elementary.relation_exists(dbt_run_results) %}\n        select * from {{ dbt_run_results }}\n    {% else %}\n        {{ elementary.get_dbt_run_results_empty_table_query() }}\n    {% endif %}\n),\n\ntests_metadata as (\n    {% set dbt_tests = source('elementary_dbt_artifacts', 'dbt_tests') %}\n    {% if elementary.relation_exists(dbt_tests) %}\n        select * from {{ dbt_tests }}\n    {% else %}\n        {{ elementary.get_dbt_tests_empty_table_query() }}\n    {% endif %}\n),\n\nmodels_metadata as (\n    {% set dbt_models = source('elementary_dbt_artifacts', 'dbt_models') %}\n    {% if elementary.relation_exists(dbt_models) %}\n        select * from {{ dbt_models }}\n    {% else %}\n        {{ elementary.get_dbt_models_empty_table_query() }}\n    {% endif %}\n),\n\nsources_metadata as (\n    {% set dbt_sources = source('elementary_dbt_artifacts', 'dbt_sources') %}\n    {% if elementary.relation_exists(dbt_sources) %}\n        select * from {{ dbt_sources }}\n    {% else %}\n        {{ elementary.get_dbt_sources_empty_table_query() }}\n    {% endif %}\n),\n\ntests_metadata_with_model_name as (\n    select tm.*,\n           case when mm.name is not null then mm.name\n                when sm.name is not null then sm.name\n                else null\n                end as model_name\n        from tests_metadata tm left join models_metadata mm on tm.parent_model_unique_id = mm.unique_id\n            left join sources_metadata sm on tm.parent_model_unique_id = sm.unique_id\n),\n\ntest_run_results as (\n    select *\n    from dbt_run_results where resource_type = 'test'\n),\n\ntest_run_results_with_metadata as (\n    select tr.*,\n           database_name,\n           schema_name,\n           short_name,\n           test_column_name,\n           severity,\n           warn_if,\n           error_if,\n           test_params,\n           test_namespace,\n           tags as test_tags,\n           model_tags,\n           model_owners,\n           meta as test_meta,\n           depends_on_macros,\n           depends_on_nodes,\n           parent_model_unique_id,\n           model_name as parent_model_name,\n           description,\n           package_name\n    from test_run_results tr left join tests_metadata_with_model_name tm on tr.unique_id = tm.unique_id\n)\n\nselect * from test_run_results_with_metadata", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.relation_exists", "macro.elementary.get_dbt_run_results_empty_table_query", "macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.get_dbt_sources_empty_table_query"], "nodes": ["source.elementary.elementary_dbt_artifacts.dbt_run_results", "source.elementary.elementary_dbt_artifacts.dbt_tests", "source.elementary.elementary_dbt_artifacts.dbt_models", "source.elementary.elementary_dbt_artifacts.dbt_sources"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "operational_monitoring", "test_run_results"], "unique_id": "model.elementary.test_run_results", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/operational_monitoring/test_run_results.sql", "original_file_path": "models/edr/operational_monitoring/test_run_results.sql", "name": "test_run_results", "alias": "test_run_results", "checksum": {"name": "sha256", "checksum": "e1a8768601aa9a342e732189e28e4125ba504713da936099d12d7aa577a9ef52"}, "tags": [], "refs": [], "sources": [["elementary_dbt_artifacts", "dbt_run_results"], ["elementary_dbt_artifacts", "dbt_tests"], ["elementary_dbt_artifacts", "dbt_models"], ["elementary_dbt_artifacts", "dbt_sources"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/operational_monitoring/test_run_results.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.535579, "compiled_sql": "\n\nwith dbt_run_results as (\n    \n    \n        with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as unique_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as invocation_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as generated_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as status\n\n,\n                \n        cast('dummy_string' as \n    string\n) as resource_type\n\n,\n                \n        cast(123456789.99 as \n    float64\n) as execution_time\n\n,\n                \n        cast('dummy_string' as \n    string\n) as execute_started_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as compile_started_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as compile_completed_at\n\n,\n                \n        cast(31474836478 as \n    int64\n) as rows_affected\n\n,\n                \n        cast (True as \n    BOOL\n) as full_refresh\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n    \n),\n\ntests_metadata as (\n    \n    \n        select * from `esbi-test`.`edm_dbt_admin`.`dbt_tests`\n    \n),\n\nmodels_metadata as (\n    \n    \n        select * from `esbi-test`.`edm_dbt_admin`.`dbt_models`\n    \n),\n\nsources_metadata as (\n    \n    \n        select * from `esbi-test`.`edm_dbt_admin`.`dbt_sources`\n    \n),\n\ntests_metadata_with_model_name as (\n    select tm.*,\n           case when mm.name is not null then mm.name\n                when sm.name is not null then sm.name\n                else null\n                end as model_name\n        from tests_metadata tm left join models_metadata mm on tm.parent_model_unique_id = mm.unique_id\n            left join sources_metadata sm on tm.parent_model_unique_id = sm.unique_id\n),\n\ntest_run_results as (\n    select *\n    from dbt_run_results where resource_type = 'test'\n),\n\ntest_run_results_with_metadata as (\n    select tr.*,\n           database_name,\n           schema_name,\n           short_name,\n           test_column_name,\n           severity,\n           warn_if,\n           error_if,\n           test_params,\n           test_namespace,\n           tags as test_tags,\n           model_tags,\n           model_owners,\n           meta as test_meta,\n           depends_on_macros,\n           depends_on_nodes,\n           parent_model_unique_id,\n           model_name as parent_model_name,\n           description,\n           package_name\n    from test_run_results tr left join tests_metadata_with_model_name tm on tr.unique_id = tm.unique_id\n)\n\nselect * from test_run_results_with_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`test_run_results`"}, "model.elementary.model_run_results": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith dbt_run_results as (\n    {% set dbt_run_results = source('elementary_dbt_artifacts', 'dbt_run_results') %}\n    {% if elementary.relation_exists(dbt_run_results) %}\n        select * from {{ dbt_run_results }}\n    {% else %}\n        {{ elementary.get_dbt_run_results_empty_table_query() }}\n    {% endif %}\n),\n\nmodels_metadata as (\n    {% set dbt_models = source('elementary_dbt_artifacts', 'dbt_models') %}\n    {% if elementary.relation_exists(dbt_models) %}\n        select * from {{ dbt_models }}\n    {% else %}\n        {{ elementary.get_dbt_models_empty_table_query() }}\n    {% endif %}\n),\n\nmodel_run_results as (\n    select *\n    from dbt_run_results where resource_type = 'model'\n),\n\nmodel_run_results_with_metadata as (\n    select mr.*,\n           alias,\n           checksum,\n           materialization,\n           tags,\n           meta,\n           owner,\n           database_name,\n           schema_name,\n           depends_on_macros,\n           depends_on_nodes,\n           description,\n           package_name\n    from model_run_results mr left join models_metadata mm on mr.unique_id = mm.unique_id\n)\n\nselect * from model_run_results_with_metadata", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.relation_exists", "macro.elementary.get_dbt_run_results_empty_table_query", "macro.elementary.get_dbt_models_empty_table_query"], "nodes": ["source.elementary.elementary_dbt_artifacts.dbt_run_results", "source.elementary.elementary_dbt_artifacts.dbt_models"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "operational_monitoring", "model_run_results"], "unique_id": "model.elementary.model_run_results", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/operational_monitoring/model_run_results.sql", "original_file_path": "models/edr/operational_monitoring/model_run_results.sql", "name": "model_run_results", "alias": "model_run_results", "checksum": {"name": "sha256", "checksum": "645652f9078af8889d07a1534c9b15a07a5f5632ff4763326e7667a9e4866d7b"}, "tags": [], "refs": [], "sources": [["elementary_dbt_artifacts", "dbt_run_results"], ["elementary_dbt_artifacts", "dbt_models"]], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/operational_monitoring/model_run_results.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.575181, "compiled_sql": "\n\nwith dbt_run_results as (\n    \n    \n        with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as model_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as unique_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as invocation_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as generated_at\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as status\n\n,\n                \n        cast('dummy_string' as \n    string\n) as resource_type\n\n,\n                \n        cast(123456789.99 as \n    float64\n) as execution_time\n\n,\n                \n        cast('dummy_string' as \n    string\n) as execute_started_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as execute_completed_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as compile_started_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as compile_completed_at\n\n,\n                \n        cast(31474836478 as \n    int64\n) as rows_affected\n\n,\n                \n        cast (True as \n    BOOL\n) as full_refresh\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n    \n),\n\nmodels_metadata as (\n    \n    \n        select * from `esbi-test`.`edm_dbt_admin`.`dbt_models`\n    \n),\n\nmodel_run_results as (\n    select *\n    from dbt_run_results where resource_type = 'model'\n),\n\nmodel_run_results_with_metadata as (\n    select mr.*,\n           alias,\n           checksum,\n           materialization,\n           tags,\n           meta,\n           owner,\n           database_name,\n           schema_name,\n           depends_on_macros,\n           depends_on_nodes,\n           description,\n           package_name\n    from model_run_results mr left join models_metadata mm on mr.unique_id = mm.unique_id\n)\n\nselect * from model_run_results_with_metadata", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`model_run_results`"}, "model.elementary.alerts_dbt_tests": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'alert_id',\n    on_schema_change = 'append_new_columns'\n  )\n}}\n\n{{ elementary.empty_alerts() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_alerts"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "append_new_columns", "unique_key": "alert_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "alerts", "alerts_dbt_tests"], "unique_id": "model.elementary.alerts_dbt_tests", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/alerts/alerts_dbt_tests.sql", "original_file_path": "models/edr/alerts/alerts_dbt_tests.sql", "name": "alerts_dbt_tests", "alias": "alerts_dbt_tests", "checksum": {"name": "sha256", "checksum": "50f482dfe08cd0557191cd8ebc63fa03572814925cd6a1d2e64526879aadd55b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_dbt_tests.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "alert_id", "on_schema_change": "append_new_columns"}, "created_at": 1654743709.5841842, "compiled_sql": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_unique_id\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as detected_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as database_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as column_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as alert_type\n\n,\n                \n        cast('dummy_string' as \n    string\n) as sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_description\n\n,\n                \n        cast('dummy_string' as \n    string\n) as owners\n\n,\n                \n        cast('dummy_string' as \n    string\n) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_results_query\n\n,\n                \n        cast('dummy_string' as \n    string\n) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_params\n\n,\n                \n        cast('dummy_string' as \n    string\n) as severity\n\n,\n                \n        cast('dummy_string' as \n    string\n) as status\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`alerts_dbt_tests`"}, "model.elementary.alerts_schema_changes": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'alert_id',\n    on_schema_change = 'append_new_columns'\n  )\n}}\n\n{{ elementary.empty_alerts() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_alerts"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "append_new_columns", "unique_key": "alert_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "alerts", "alerts_schema_changes"], "unique_id": "model.elementary.alerts_schema_changes", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/alerts/alerts_schema_changes.sql", "original_file_path": "models/edr/alerts/alerts_schema_changes.sql", "name": "alerts_schema_changes", "alias": "alerts_schema_changes", "checksum": {"name": "sha256", "checksum": "50f482dfe08cd0557191cd8ebc63fa03572814925cd6a1d2e64526879aadd55b"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_schema_changes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "alert_id", "on_schema_change": "append_new_columns"}, "created_at": 1654743709.5934389, "compiled_sql": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_unique_id\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as detected_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as database_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as column_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as alert_type\n\n,\n                \n        cast('dummy_string' as \n    string\n) as sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_description\n\n,\n                \n        cast('dummy_string' as \n    string\n) as owners\n\n,\n                \n        cast('dummy_string' as \n    string\n) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_results_query\n\n,\n                \n        cast('dummy_string' as \n    string\n) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_params\n\n,\n                \n        cast('dummy_string' as \n    string\n) as severity\n\n,\n                \n        cast('dummy_string' as \n    string\n) as status\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`alerts_schema_changes`"}, "model.elementary.alerts_data_monitoring": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'alert_id',\n    on_schema_change = 'append_new_columns'\n  )\n}}\n\n-- depends_on: {{ ref('metrics_anomaly_score') }}\n\n{{ elementary.empty_alerts() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_alerts"], "nodes": ["model.elementary.metrics_anomaly_score"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "append_new_columns", "unique_key": "alert_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "alerts", "alerts_data_monitoring"], "unique_id": "model.elementary.alerts_data_monitoring", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/alerts/alerts_data_monitoring.sql", "original_file_path": "models/edr/alerts/alerts_data_monitoring.sql", "name": "alerts_data_monitoring", "alias": "alerts_data_monitoring", "checksum": {"name": "sha256", "checksum": "8dcaa8a3209358d7104fb6e03168ae6498247c58f1365a31bc647ef60ab0bf29"}, "tags": [], "refs": [["metrics_anomaly_score"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/alerts/alerts_data_monitoring.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "alert_id", "on_schema_change": "append_new_columns"}, "created_at": 1654743709.5991738, "compiled_sql": "\n\n-- depends_on: `esbi-test`.`edm_dbt_admin`.`metrics_anomaly_score`\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as data_issue_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_execution_id\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_unique_id\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as detected_at\n\n,\n                \n        cast('dummy_string' as \n    string\n) as database_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as column_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as alert_type\n\n,\n                \n        cast('dummy_string' as \n    string\n) as sub_type\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_description\n\n,\n                \n        cast('dummy_string' as \n    string\n) as owners\n\n,\n                \n        cast('dummy_string' as \n    string\n) as tags\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as alert_results_query\n\n,\n                \n        cast('dummy_string' as \n    string\n) as other\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_name\n\n,\n                \n        cast('this_is_just_a_long_dummy_string' as \n    string\n) as test_params\n\n,\n                \n        cast('dummy_string' as \n    string\n) as severity\n\n,\n                \n        cast('dummy_string' as \n    string\n) as status\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`alerts_data_monitoring`"}, "model.elementary.monitors_runs": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           max(bucket_end) as last_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3\n\n)\n\nselect * from max_bucket_end", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.data_monitoring_metrics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "system", "monitors_runs"], "unique_id": "model.elementary.monitors_runs", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/system/monitors_runs.sql", "original_file_path": "models/edr/system/monitors_runs.sql", "name": "monitors_runs", "alias": "monitors_runs", "checksum": {"name": "sha256", "checksum": "c7715de725391d036ad3d3b9e1807f590b7086e8fe397461ccc81d5d4fa4bc71"}, "tags": [], "refs": [["data_monitoring_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/system/monitors_runs.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.605591, "compiled_sql": "\n\nwith data_monitoring_metrics as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`data_monitoring_metrics`\n\n),\n\nmax_bucket_end as (\n\n    select full_table_name,\n           column_name,\n           metric_name,\n           max(bucket_end) as last_bucket_end\n    from data_monitoring_metrics\n    group by 1,2,3\n\n)\n\nselect * from max_bucket_end", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`monitors_runs`"}, "model.elementary.metrics_anomaly_score": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n{%- set timeframe_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n\nwith data_monitoring_metrics as (\n\n    select * from {{ ref('data_monitoring_metrics') }}\n\n),\n\ndaily_buckets as (\n\n   {{ elementary.daily_buckets_cte() }}\n\n),\n\ntime_window_aggregation as (\n\n    select\n        *,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_start\n    from daily_buckets left join\n        data_monitoring_metrics on (edr_daily_bucket = bucket_end)\n    {{ dbt_utils.group_by(11) }}\n\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        metric_name,\n        case\n           when training_stddev = 0 then 0\n           else (metric_value - training_avg) / (training_stddev)\n        end as z_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_stddev is not null\n            and training_set_size >= {{ elementary.get_config_var('days_back') - 1 }}\n            and bucket_end >= {{ elementary.timeadd('day', '-7', timeframe_end) }}\n    {{ dbt_utils.group_by(13) }}\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select *,\n        case\n            when abs(z_score) > {{ elementary.get_config_var('anomaly_sensitivity') }} then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n    {{ dbt_utils.group_by(14) }}\n\n)\n\nselect * from final", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.daily_buckets_cte", "macro.elementary.get_config_var", "macro.dbt_utils.group_by", "macro.elementary.timeadd"], "nodes": ["model.elementary.data_monitoring_metrics"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "metrics_anomaly_score"], "unique_id": "model.elementary.metrics_anomaly_score", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "name": "metrics_anomaly_score", "alias": "metrics_anomaly_score", "checksum": {"name": "sha256", "checksum": "e9268ad453768ba07945cf67fd490510df7cda9181b2acf37408c85efbfd5296"}, "tags": [], "refs": [["data_monitoring_metrics"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/metrics_anomaly_score.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.606751, "compiled_sql": "\n\nwith data_monitoring_metrics as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`data_monitoring_metrics`\n\n),\n\ndaily_buckets as (\n\n   \n    \n        select edr_daily_bucket\n        from unnest(generate_timestamp_array(cast('2022-05-26 00:00:00' as\n    timestamp\n), cast('2022-06-09 00:00:00' as\n    timestamp\n), interval 1 day)) as edr_daily_bucket\n\n\n),\n\ntime_window_aggregation as (\n\n    select\n        *,\n        avg(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between 14 preceding and current row) as training_avg,\n        stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between 14 preceding and current row) as training_stddev,\n        count(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between 14 preceding and current row) as training_set_size,\n        last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between 14 preceding and current row) training_end,\n        first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between 14 preceding and current row) as training_start\n    from daily_buckets left join\n        data_monitoring_metrics on (edr_daily_bucket = bucket_end)\n    group by 1,2,3,4,5,6,7,8,9,10,11\n\n),\n\nmetrics_anomaly_score as (\n\n    select\n        id,\n        full_table_name,\n        column_name,\n        metric_name,\n        case\n           when training_stddev = 0 then 0\n           else (metric_value - training_avg) / (training_stddev)\n        end as z_score,\n        metric_value as latest_metric_value,\n        bucket_start,\n        bucket_end,\n        training_avg,\n        training_stddev,\n        training_start,\n        training_end,\n        training_set_size,\n        max(updated_at) as updated_at\n    from time_window_aggregation\n        where\n            metric_value is not null\n            and training_avg is not null\n            and training_stddev is not null\n            and training_set_size >= 13\n            and bucket_end >= \n    timestamp_add(cast('2022-06-09 00:00:00' as\n    timestamp\n), INTERVAL -7 day)\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13\n    order by bucket_end desc\n\n\n),\n\nfinal as (\n\n    select *,\n        case\n            when abs(z_score) > 3 then true\n            else false end\n        as is_anomaly\n    from metrics_anomaly_score\n    group by 1,2,3,4,5,6,7,8,9,10,11,12,13,14\n\n)\n\nselect * from final", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`metrics_anomaly_score`"}, "model.elementary.anomaly_threshold_sensitivity": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\nwith metrics_anomaly_score as (\n\n    select * from {{ ref('metrics_anomaly_score') }}\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        z_score,\n        case when abs(z_score) >= 1.5 then true else false end as {{ elementary.quote_column('is_anomaly_1_5') }},\n        case when abs(z_score) >= 2 then true else false end as {{ elementary.quote_column('is_anomaly_2') }},\n        case when abs(z_score) >= 2.5 then true else false end as {{ elementary.quote_column('is_anomaly_2_5') }},\n        case when abs(z_score) >= 3 then true else false end as {{ elementary.quote_column('is_anomaly_3') }},\n        case when abs(z_score) >= 3.5 then true else false end as {{ elementary.quote_column('is_anomaly_3_5') }},\n        case when abs(z_score) >= 4 then true else false end as {{ elementary.quote_column('is_anomaly_4') }},\n        case when abs(z_score) >= 4.5 then true else false end as {{ elementary.quote_column('is_anomaly_4_5') }}\n    from metrics_anomaly_score\n    where abs(z_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.quote_column"], "nodes": ["model.elementary.metrics_anomaly_score"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "anomaly_detection", "anomaly_threshold_sensitivity"], "unique_id": "model.elementary.anomaly_threshold_sensitivity", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "original_file_path": "models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "name": "anomaly_threshold_sensitivity", "alias": "anomaly_threshold_sensitivity", "checksum": {"name": "sha256", "checksum": "a154abe11747b91b0eaeff14dfb3401da0bf0bcf864cb7dbc4d3edd8078b3620"}, "tags": [], "refs": [["metrics_anomaly_score"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/anomaly_detection/anomaly_threshold_sensitivity.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.6181571, "compiled_sql": "\n\nwith metrics_anomaly_score as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`metrics_anomaly_score`\n\n),\n\nscore_sensitivity as (\n\n    select\n        full_table_name,\n        column_name,\n        metric_name,\n        latest_metric_value,\n        training_avg as metric_avg,\n        z_score,\n        case when abs(z_score) >= 1.5 then true else false end as \n    `is_anomaly_1_5`\n,\n        case when abs(z_score) >= 2 then true else false end as \n    `is_anomaly_2`\n,\n        case when abs(z_score) >= 2.5 then true else false end as \n    `is_anomaly_2_5`\n,\n        case when abs(z_score) >= 3 then true else false end as \n    `is_anomaly_3`\n,\n        case when abs(z_score) >= 3.5 then true else false end as \n    `is_anomaly_3_5`\n,\n        case when abs(z_score) >= 4 then true else false end as \n    `is_anomaly_4`\n,\n        case when abs(z_score) >= 4.5 then true else false end as \n    `is_anomaly_4_5`\n\n    from metrics_anomaly_score\n    where abs(z_score) >= 1.5\n\n)\n\nselect * from score_sensitivity", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`anomaly_threshold_sensitivity`"}, "model.elementary.schema_columns_snapshot": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'column_state_id'\n  )\n}}\n\n\nwith information_schema_columns as (\n\n    select * from {{ ref('filtered_information_schema_columns') }}\n\n),\n\ncolumns as (\n\n    select\n        full_table_name,\n        database_name,\n        schema_name,\n        table_name,\n        column_name,\n        cast(data_type as {{ dbt_utils.type_string() }}) as data_type,\n        {{ elementary.run_start_column() }} as detected_at,\n\n        {% if is_incremental() %}\n            {%- set known_columns_query %}\n                select full_column_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_columns = elementary.result_column_to_list(known_columns_query) %}\n\n            {%- set known_tables_query %}\n                select distinct full_table_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_tables = elementary.result_column_to_list(known_tables_query) %}\n\n            case when\n                {{ elementary.full_column_name() }} not in {{ elementary.strings_list_to_tuple(known_columns) }}\n                and full_table_name in {{ elementary.strings_list_to_tuple(known_tables) }}\n            then true\n            else false end\n            as is_new\n        {% else %}\n            false as is_new\n        {% endif %}\n    from information_schema_columns\n\n)\n\nselect\n    {{ dbt_utils.surrogate_key([\n      'full_table_name',\n      'column_name',\n      'data_type'\n    ]) }} as column_state_id,\n    {{ elementary.full_column_name() }} as full_column_name,\n    full_table_name,\n    column_name,\n    data_type,\n    is_new,\n    max(detected_at) as detected_at\nfrom columns\ngroup by 1,2,3,4,5,6", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.elementary.run_start_column", "macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key", "macro.elementary.full_column_name"], "nodes": ["model.elementary.filtered_information_schema_columns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "column_state_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_columns_snapshot"], "unique_id": "model.elementary.schema_columns_snapshot", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "name": "schema_columns_snapshot", "alias": "schema_columns_snapshot", "checksum": {"name": "sha256", "checksum": "3c70489bc1f57fdae838cbfba541e0a47b93e7fa3d75661fd653d697477841d0"}, "tags": [], "refs": [["filtered_information_schema_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/schema_columns_snapshot.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "column_state_id"}, "created_at": 1654743709.623868, "compiled_sql": "\n\n\nwith information_schema_columns as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`filtered_information_schema_columns`\n\n),\n\ncolumns as (\n\n    select\n        full_table_name,\n        database_name,\n        schema_name,\n        table_name,\n        column_name,\n        cast(data_type as \n    string\n) as data_type,\n        \n    cast ('2022-06-09 03:01:48' as \n    timestamp\n)\n as detected_at,\n\n        \n            false as is_new\n        \n    from information_schema_columns\n\n)\n\nselect\n    to_hex(md5(cast(coalesce(cast(full_table_name as \n    string\n), '') || '-' || coalesce(cast(column_name as \n    string\n), '') || '-' || coalesce(cast(data_type as \n    string\n), '') as \n    string\n))) as column_state_id,\n    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name) as full_column_name,\n    full_table_name,\n    column_name,\n    data_type,\n    is_new,\n    max(detected_at) as detected_at\nfrom columns\ngroup by 1,2,3,4,5,6", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`"}, "model.elementary.table_changes": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'change_id'\n  )\n}}\n\nwith cur as (\n\n    select * from {{ ref('current_schema_tables')}}\n\n),\n\npre as (\n\n    select * from {{ ref('previous_schema_tables')}}\n\n),\n\ntable_added as (\n\n    select\n        full_table_name,\n        'table_added' as change,\n        detected_at\n    from cur\n    where is_new = true\n\n),\n\ntable_removed as (\n\n    select\n        pre.full_table_name,\n        'table_removed' as change,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.full_schema_name = pre.full_schema_name)\n    where cur.full_table_name is null\n    and pre.full_schema_name in {{ elementary.configured_schemas_from_graph_as_tuple() }}\n\n),\n\nall_table_changes as (\n\n    select * from table_removed\n    union all\n    select * from table_added\n\n),\n\ntable_changes_desc as (\n\n    select\n        {{ dbt_utils.surrogate_key(['full_table_name', 'change', 'detected_at']) }} as change_id,\n        {{ elementary.full_name_split('database_name') }},\n        {{ elementary.full_name_split('schema_name') }},\n        {{ elementary.full_name_split('table_name') }},\n        {{ elementary.run_start_column() }} as detected_at,\n        change,\n        case\n            when change='table_added'\n                then 'The table \"' || full_table_name || '\" was added'\n            when change='table_removed'\n                then 'The table \"' || full_table_name || '\" was removed'\n            else NULL\n        end as change_description\n    from all_table_changes\n\n)\n\nselect * from table_changes_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.configured_schemas_from_graph_as_tuple", "macro.dbt_utils.surrogate_key", "macro.elementary.full_name_split", "macro.elementary.run_start_column"], "nodes": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "change_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "table_changes"], "unique_id": "model.elementary.table_changes", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/table_changes.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/table_changes.sql", "name": "table_changes", "alias": "table_changes", "checksum": {"name": "sha256", "checksum": "cdc4acefc42dffa05bf288d8b587b7a8c07c6ce00302a930137d1e6baedc2bcb"}, "tags": [], "refs": [["current_schema_tables"], ["previous_schema_tables"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/table_changes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "change_id"}, "created_at": 1654743709.6387131, "compiled_sql": "\n\nwith  __dbt__cte__current_schema_tables as (\n\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema\n),  __dbt__cte__previous_schema_tables as (\n\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema\n),cur as (\n\n    select * from __dbt__cte__current_schema_tables\n\n),\n\npre as (\n\n    select * from __dbt__cte__previous_schema_tables\n\n),\n\ntable_added as (\n\n    select\n        full_table_name,\n        'table_added' as change,\n        detected_at\n    from cur\n    where is_new = true\n\n),\n\ntable_removed as (\n\n    select\n        pre.full_table_name,\n        'table_removed' as change,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.full_schema_name = pre.full_schema_name)\n    where cur.full_table_name is null\n    and pre.full_schema_name in \n        ('')\n\n\n),\n\nall_table_changes as (\n\n    select * from table_removed\n    union all\n    select * from table_added\n\n),\n\ntable_changes_desc as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(full_table_name as \n    string\n), '') || '-' || coalesce(cast(change as \n    string\n), '') || '-' || coalesce(cast(detected_at as \n    string\n), '') as \n    string\n))) as change_id,\n        \n    trim(split(full_table_name,'.')[OFFSET(0)],'\"') as database_name\n\n,\n        \n    trim(split(full_table_name,'.')[OFFSET(1)],'\"') as schema_name\n\n,\n        \n    trim(split(full_table_name,'.')[OFFSET(2)],'\"') as table_name\n\n,\n        \n    cast ('2022-06-09 03:01:48' as \n    timestamp\n)\n as detected_at,\n        change,\n        case\n            when change='table_added'\n                then 'The table \"' || full_table_name || '\" was added'\n            when change='table_removed'\n                then 'The table \"' || full_table_name || '\" was removed'\n            else NULL\n        end as change_description\n    from all_table_changes\n\n)\n\nselect * from table_changes_desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.elementary.current_schema_tables", "sql": " __dbt__cte__current_schema_tables as (\n\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema\n)"}, {"id": "model.elementary.previous_schema_tables", "sql": " __dbt__cte__previous_schema_tables as (\n\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema\n)"}], "relation_name": "`esbi-test`.`edm_dbt_admin`.`table_changes`"}, "model.elementary.column_changes": {"raw_sql": "{{\n  config(\n    materialized = 'incremental',\n    unique_key = 'change_id'\n  )\n}}\n\nwith cur as (\n\n    select * from {{ ref('current_schema_columns')}}\n\n),\n\npre as (\n\n    select * from {{ ref('previous_schema_columns')}}\n\n),\n\ntype_changes as (\n\n    select\n        cur.full_table_name,\n        'type_changed' as change,\n        cur.column_name,\n        cur.data_type as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at\n    from cur inner join pre\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.data_type != pre.data_type\n\n),\n\ncolumns_added as (\n\n    select\n        full_table_name,\n        'column_added' as change,\n        column_name,\n        data_type,\n        {{ elementary.null_string() }} as pre_data_type,\n        detected_at as detected_at\n    from cur\n    where is_new = true\n\n),\n\ncolumns_removed as (\n\n    select\n        pre.full_table_name,\n        'column_removed' as change,\n        pre.column_name as column_name,\n        {{ elementary.null_string() }} as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.full_table_name is null and cur.column_name is null\n\n),\n\ncolumns_removed_filter_deleted_tables as (\n\n    select\n        removed.full_table_name,\n        removed.change,\n        removed.column_name,\n        removed.data_type,\n        removed.pre_data_type,\n        removed.detected_at\n    from columns_removed as removed join cur\n        on (removed.full_table_name = cur.full_table_name)\n\n),\n\nall_column_changes as (\n\n    select * from type_changes\n    union all\n    select * from columns_removed_filter_deleted_tables\n    union all\n    select * from columns_added\n\n),\n\ncolumn_changes_desc as (\n\n    select\n        {{ dbt_utils.surrogate_key(['full_table_name', 'column_name', 'change', 'detected_at']) }} as change_id,\n        {{ elementary.full_name_split('database_name') }},\n        {{ elementary.full_name_split('schema_name') }},\n        {{ elementary.full_name_split('table_name') }},\n        column_name,\n        {{ elementary.run_start_column() }} as detected_at,\n        change,\n        case\n            when change= 'column_added'\n                then 'The column \"' || column_name || '\" was added'\n            when change= 'column_removed'\n                then 'The column \"' || column_name || '\" was removed'\n            when change= 'type_changed'\n                then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n            else NULL\n        end as change_description\n    from all_column_changes\n\n)\n\nselect * from column_changes_desc", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.null_string", "macro.dbt_utils.surrogate_key", "macro.elementary.full_name_split", "macro.elementary.run_start_column"], "nodes": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "change_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "column_changes"], "unique_id": "model.elementary.column_changes", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/column_changes.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/column_changes.sql", "name": "column_changes", "alias": "column_changes", "checksum": {"name": "sha256", "checksum": "6ac95bee3bf42061ea93a8e11fe55849c703c342bd226994c277fbdd00c2c7cd"}, "tags": [], "refs": [["current_schema_columns"], ["previous_schema_columns"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/column_changes.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "change_id"}, "created_at": 1654743709.652513, "compiled_sql": "\n\nwith  __dbt__cte__current_schema_columns as (\n\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema\n),  __dbt__cte__previous_schema_columns as (\n\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema\n),cur as (\n\n    select * from __dbt__cte__current_schema_columns\n\n),\n\npre as (\n\n    select * from __dbt__cte__previous_schema_columns\n\n),\n\ntype_changes as (\n\n    select\n        cur.full_table_name,\n        'type_changed' as change,\n        cur.column_name,\n        cur.data_type as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at\n    from cur inner join pre\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.data_type != pre.data_type\n\n),\n\ncolumns_added as (\n\n    select\n        full_table_name,\n        'column_added' as change,\n        column_name,\n        data_type,\n        \n    cast(null as \n    string\n)\n as pre_data_type,\n        detected_at as detected_at\n    from cur\n    where is_new = true\n\n),\n\ncolumns_removed as (\n\n    select\n        pre.full_table_name,\n        'column_removed' as change,\n        pre.column_name as column_name,\n        \n    cast(null as \n    string\n)\n as data_type,\n        pre.data_type as pre_data_type,\n        pre.detected_at as detected_at\n    from pre left join cur\n        on (cur.full_table_name = pre.full_table_name and cur.column_name = pre.column_name)\n    where cur.full_table_name is null and cur.column_name is null\n\n),\n\ncolumns_removed_filter_deleted_tables as (\n\n    select\n        removed.full_table_name,\n        removed.change,\n        removed.column_name,\n        removed.data_type,\n        removed.pre_data_type,\n        removed.detected_at\n    from columns_removed as removed join cur\n        on (removed.full_table_name = cur.full_table_name)\n\n),\n\nall_column_changes as (\n\n    select * from type_changes\n    union all\n    select * from columns_removed_filter_deleted_tables\n    union all\n    select * from columns_added\n\n),\n\ncolumn_changes_desc as (\n\n    select\n        to_hex(md5(cast(coalesce(cast(full_table_name as \n    string\n), '') || '-' || coalesce(cast(column_name as \n    string\n), '') || '-' || coalesce(cast(change as \n    string\n), '') || '-' || coalesce(cast(detected_at as \n    string\n), '') as \n    string\n))) as change_id,\n        \n    trim(split(full_table_name,'.')[OFFSET(0)],'\"') as database_name\n\n,\n        \n    trim(split(full_table_name,'.')[OFFSET(1)],'\"') as schema_name\n\n,\n        \n    trim(split(full_table_name,'.')[OFFSET(2)],'\"') as table_name\n\n,\n        column_name,\n        \n    cast ('2022-06-09 03:01:48' as \n    timestamp\n)\n as detected_at,\n        change,\n        case\n            when change= 'column_added'\n                then 'The column \"' || column_name || '\" was added'\n            when change= 'column_removed'\n                then 'The column \"' || column_name || '\" was removed'\n            when change= 'type_changed'\n                then 'The type of \"' || column_name || '\" was changed from ' || pre_data_type || ' to ' || data_type\n            else NULL\n        end as change_description\n    from all_column_changes\n\n)\n\nselect * from column_changes_desc", "extra_ctes_injected": true, "extra_ctes": [{"id": "model.elementary.current_schema_columns", "sql": " __dbt__cte__current_schema_columns as (\n\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema\n)"}, {"id": "model.elementary.previous_schema_columns", "sql": " __dbt__cte__previous_schema_columns as (\n\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema\n)"}], "relation_name": "`esbi-test`.`edm_dbt_admin`.`column_changes`"}, "model.elementary.schema_tables_snapshot": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'table_state_id'\n  )\n}}\n\nwith information_schema_tables as (\n\n    select * from {{ ref('filtered_information_schema_tables') }}\n\n),\n\nschema_tables as (\n\n    select\n        full_schema_name,\n        table_name,\n        full_table_name,\n        {{ elementary.run_start_column() }} as detected_at,\n\n        {% if is_incremental() %}\n            {%- set known_tables_query %}\n                select full_table_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_tables = elementary.result_column_to_list(known_tables_query) %}\n\n            {%- set known_schemas_query %}\n                select distinct full_schema_name from {{ this }}\n                where detected_at = (select max(detected_at) from {{ this }})\n            {% endset %}\n            {%- set known_schemas = elementary.result_column_to_list(known_schemas_query) %}\n\n            case when\n                full_table_name not in {{ elementary.strings_list_to_tuple(known_tables) }}\n                and full_schema_name in {{ elementary.strings_list_to_tuple(known_schemas) }}\n            then true\n            else false end\n            as is_new\n        {% else %}\n            false as is_new\n        {% endif %}\n\n    from information_schema_tables\n\n)\n\nselect\n    {{ dbt_utils.surrogate_key([\n      'full_table_name'\n    ]) }} as table_state_id,\n    full_schema_name,\n    full_table_name,\n    is_new,\n    max(detected_at) as detected_at\nfrom schema_tables\ngroup by 1,2,3,4", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.run_start_column", "macro.dbt.is_incremental", "macro.dbt_utils.surrogate_key"], "nodes": ["model.elementary.filtered_information_schema_tables"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "table_state_id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "schema_tables_snapshot"], "unique_id": "model.elementary.schema_tables_snapshot", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/schema_tables_snapshot.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/schema_tables_snapshot.sql", "name": "schema_tables_snapshot", "alias": "schema_tables_snapshot", "checksum": {"name": "sha256", "checksum": "2fc58045c3e7ccd32daa829dce964e1ed376028dfba63eff44b534ea9305f244"}, "tags": [], "refs": [["filtered_information_schema_tables"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/schema_tables_snapshot.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "table_state_id"}, "created_at": 1654743709.65815, "compiled_sql": "\n\nwith information_schema_tables as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`filtered_information_schema_tables`\n\n),\n\nschema_tables as (\n\n    select\n        full_schema_name,\n        table_name,\n        full_table_name,\n        \n    cast ('2022-06-09 03:01:48' as \n    timestamp\n)\n as detected_at,\n\n        \n            false as is_new\n        \n\n    from information_schema_tables\n\n)\n\nselect\n    to_hex(md5(cast(coalesce(cast(full_table_name as \n    string\n), '') as \n    string\n))) as table_state_id,\n    full_schema_name,\n    full_table_name,\n    is_new,\n    max(detected_at) as detected_at\nfrom schema_tables\ngroup by 1,2,3,4", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`"}, "model.elementary.previous_schema_tables": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith tables_snapshot as (\n\n    select * from {{ ref('schema_tables_snapshot') }}\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_tables_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "previous_schema_tables"], "unique_id": "model.elementary.previous_schema_tables", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_tables.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_tables.sql", "name": "previous_schema_tables", "alias": "previous_schema_tables", "checksum": {"name": "sha256", "checksum": "a90b264aa851e9ab9e159ee259617256960f9598dcf5ce5d5d35806eacd21b08"}, "tags": [], "refs": [["schema_tables_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1654743709.662691, "compiled_sql": "\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.elementary.current_schema_columns": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith columns_snapshot as (\n\n    select * from {{ ref('schema_columns_snapshot') }}\n),\n\nthis_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_columns_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "current_schema_columns"], "unique_id": "model.elementary.current_schema_columns", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_columns.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_columns.sql", "name": "current_schema_columns", "alias": "current_schema_columns", "checksum": {"name": "sha256", "checksum": "fa72f2bb56d2ab2e11d06e4e0902c54d504b99ab80b99c79b2b0aa806366f95b"}, "tags": [], "refs": [["schema_columns_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1654743709.664086, "compiled_sql": "\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.elementary.current_schema_tables": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith tables_snapshot as (\n\n    select * from {{ ref('schema_tables_snapshot') }}\n),\n\nthis_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_tables_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "current_schema_tables"], "unique_id": "model.elementary.current_schema_tables", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_tables.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_tables.sql", "name": "current_schema_tables", "alias": "current_schema_tables", "checksum": {"name": "sha256", "checksum": "132b641349472f7b14938198d953e372e4f6eef46022cbd61bdbacfc0c315706"}, "tags": [], "refs": [["schema_tables_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/previous_and_current_schemas/current_schema_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1654743709.664939, "compiled_sql": "\n\nwith tables_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_tables_snapshot`\n),\n\nthis_run_time as (\n\n    select detected_at\n    from tables_snapshot\n    order by detected_at desc\n    limit 1\n\n),\n\ncurrent_schema as (\n\n    select\n        full_schema_name,\n        full_table_name,\n        is_new,\n        detected_at\n    from tables_snapshot\n    where detected_at = (select detected_at from this_run_time)\n\n)\n\nselect * from current_schema", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.elementary.previous_schema_columns": {"raw_sql": "{{\n  config(\n    materialized='ephemeral'\n  )\n}}\n\nwith columns_snapshot as (\n\n    select * from {{ ref('schema_columns_snapshot') }}\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.elementary.schema_columns_snapshot"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "ephemeral", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "schema_changes", "previous_and_current_schemas", "previous_schema_columns"], "unique_id": "model.elementary.previous_schema_columns", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_columns.sql", "original_file_path": "models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_columns.sql", "name": "previous_schema_columns", "alias": "previous_schema_columns", "checksum": {"name": "sha256", "checksum": "2e3985af06b8766a4a23eaea59b868ea679d8c16cc6894039ea456def8edbab7"}, "tags": [], "refs": [["schema_columns_snapshot"]], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/schema_changes/previous_and_current_schemas/previous_schema_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "ephemeral"}, "created_at": 1654743709.667847, "compiled_sql": "\n\nwith columns_snapshot as (\n\n    select * from `esbi-test`.`edm_dbt_admin`.`schema_columns_snapshot`\n),\n\nprevious_run_time as (\n\n    select detected_at\n    from columns_snapshot\n    group by detected_at\n    order by detected_at desc\n    limit 1 offset 1\n\n),\n\nprevious_schema as (\n\n    select\n        full_table_name,\n        column_name,\n        data_type,\n        is_new,\n        detected_at\n    from columns_snapshot\n    where detected_at = (select detected_at from previous_run_time)\n\n)\n\nselect * from previous_schema", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null}, "model.elementary.data_monitoring_metrics": {"raw_sql": "{{\n  config(\n    materialized='incremental',\n    unique_key = 'id'\n  )\n}}\n\n{{ elementary.empty_data_monitoring_metrics() }}", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.empty_data_monitoring_metrics"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "incremental", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "unique_key": "id", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "data_monitoring", "data_monitoring", "data_monitoring_metrics"], "unique_id": "model.elementary.data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "original_file_path": "models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "name": "data_monitoring_metrics", "alias": "data_monitoring_metrics", "checksum": {"name": "sha256", "checksum": "c7e50c3563c75941f84fdbb5e5513f3fe3fe1d479eb87e04173323a21a251bc7"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/data_monitoring/data_monitoring/data_monitoring_metrics.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "incremental", "unique_key": "id"}, "created_at": 1654743709.668749, "compiled_sql": "\n\n\n    with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as \n    string\n) as id\n\n,\n                \n        cast('dummy_string' as \n    string\n) as full_table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as column_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as metric_name\n\n,\n                \n        cast(123456789.99 as \n    float64\n) as metric_value\n\n,\n                \n        cast('dummy_string' as \n    string\n) as source_value\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as bucket_start\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as bucket_end\n\n,\n                \n        cast(123456789 as \n    int64\n) as bucket_duration_hours\n\n,\n                cast('2091-02-17' as \n    timestamp\n) as updated_at\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`data_monitoring_metrics`"}, "model.elementary.filtered_information_schema_columns": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_columns as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {%- set columns_from_info_schema_macro = context['elementary']['get_columns_from_information_schema'] %}\n        {{ elementary.run_query_macro_on_list(configured_schemas, columns_from_info_schema_macro) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string'), ('column_name', 'string'), ('data_type', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_columns"], "unique_id": "model.elementary.filtered_information_schema_columns", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/metadata_store/filtered_information_schema_columns.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_columns.sql", "name": "filtered_information_schema_columns", "alias": "filtered_information_schema_columns", "checksum": {"name": "sha256", "checksum": "91ba3a1e02fe6fea913435246e8bcd1ecf134305af74fd879b845d4612d39f56"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_columns.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.6746051, "compiled_sql": "\n\n\n\nwith filtered_information_schema_columns as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as \n    string\n) as full_table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as database_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as column_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as data_type\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_columns\nwhere full_table_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`filtered_information_schema_columns`"}, "model.elementary.filtered_information_schema_tables": {"raw_sql": "{{\n  config(\n    materialized = 'view'\n  )\n}}\n\n{% set configured_schemas = elementary.get_configured_schemas_from_graph() %}\n\nwith filtered_information_schema_tables as (\n\n    {%- if configured_schemas | length > 0 -%}\n        {%- set tables_from_info_schema_macro = context['elementary']['get_tables_from_information_schema'] -%}\n        {{ elementary.run_query_macro_on_list(configured_schemas, tables_from_info_schema_macro) }}\n    {%- else %}\n        {{ elementary.empty_table([('full_table_name', 'string'), ('full_schema_name', 'string'), ('database_name', 'string'), ('schema_name', 'string'), ('table_name', 'string')]) }}\n    {%- endif %}\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.empty_table"], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "edr", "metadata_store", "filtered_information_schema_tables"], "unique_id": "model.elementary.filtered_information_schema_tables", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "edr/metadata_store/filtered_information_schema_tables.sql", "original_file_path": "models/edr/metadata_store/filtered_information_schema_tables.sql", "name": "filtered_information_schema_tables", "alias": "filtered_information_schema_tables", "checksum": {"name": "sha256", "checksum": "9ba8031705c87d884bc23ee474262cfc127975d5977107534a5e74305fdc6803"}, "tags": [], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": "target/compiled/elementary/models/edr/metadata_store/filtered_information_schema_tables.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view"}, "created_at": 1654743709.6796958, "compiled_sql": "\n\n\n\nwith filtered_information_schema_tables as (\n        with empty_table as (\n            select\n            \n                \n        cast('dummy_string' as \n    string\n) as full_table_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as full_schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as database_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as schema_name\n\n,\n                \n        cast('dummy_string' as \n    string\n) as table_name\n\n\n            )\n        select * from empty_table\n        where 1 = 0\n\n)\n\nselect *\nfrom filtered_information_schema_tables\nwhere schema_name is not null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "`esbi-test`.`edm_dbt_admin`.`filtered_information_schema_tables`"}, "operation.elementary.elementary-on-run-start-0": {"raw_sql": "{{ elementary.create_elementary_tests_schema() if flags.WHICH in ['test', 'build'] }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "hooks", "elementary-on-run-start-0"], "unique_id": "operation.elementary.elementary-on-run-start-0", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "hooks/elementary-on-run-start-0.sql", "original_file_path": "./dbt_project.yml", "name": "elementary-on-run-start-0", "alias": "elementary-on-run-start-0", "checksum": {"name": "sha256", "checksum": "59eb9eb1ecca150f005d2c711f887096262e7b5e5ac58bea5a92df540336a19c"}, "tags": ["on-run-start"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654743709.686782, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}, "operation.elementary.elementary-on-run-end-0": {"raw_sql": "{{ handle_test_results(results) if flags.WHICH in ['test', 'build'] }}", "compiled": true, "resource_type": "operation", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": [], "meta": {}, "materialized": "view", "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "on_schema_change": "ignore", "post-hook": [], "pre-hook": []}, "database": "esbi-test", "schema": "edm_dbt_admin", "fqn": ["elementary", "hooks", "elementary-on-run-end-0"], "unique_id": "operation.elementary.elementary-on-run-end-0", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "hooks/elementary-on-run-end-0.sql", "original_file_path": "./dbt_project.yml", "name": "elementary-on-run-end-0", "alias": "elementary-on-run-end-0", "checksum": {"name": "sha256", "checksum": "59eb9eb1ecca150f005d2c711f887096262e7b5e5ac58bea5a92df540336a19c"}, "tags": ["on-run-end"], "refs": [], "sources": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1654743709.688983, "compiled_sql": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "index": 0}}, "sources": {"source.elementary.elementary_dbt_artifacts.dbt_run_results": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_run_results"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_run_results", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_run_results", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_run_results", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"model_execution_id": {"name": "model_execution_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invocation_id": {"name": "invocation_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "status": {"name": "status", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "resource_type": {"name": "resource_type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execution_time": {"name": "execution_time", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execute_started_at": {"name": "execute_started_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "execute_completed_at": {"name": "execute_completed_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_started_at": {"name": "compile_started_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "compile_completed_at": {"name": "compile_completed_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rows_affected": {"name": "rows_affected", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "full_refresh": {"name": "full_refresh", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_run_results`", "created_at": 1654743709.7456572}, "source.elementary.elementary_dbt_artifacts.dbt_models": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_models"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_models", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_models", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_models", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "checksum": {"name": "checksum", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "materialization": {"name": "materialization", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_models`", "created_at": 1654743709.7457652}, "source.elementary.elementary_dbt_artifacts.dbt_tests": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_tests"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_tests", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_tests", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_tests", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "short_name": {"name": "short_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alias": {"name": "alias", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_column_name": {"name": "test_column_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "severity": {"name": "severity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "warn_if": {"name": "warn_if", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "error_if": {"name": "error_if", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_tests`", "created_at": 1654743709.7458508}, "source.elementary.elementary_dbt_artifacts.dbt_sources": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_sources"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_sources", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_sources", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_sources", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "database_name": {"name": "database_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schema_name": {"name": "schema_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_name": {"name": "source_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "identifier": {"name": "identifier", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "loaded_at_field": {"name": "loaded_at_field", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness_warn_after": {"name": "freshness_warn_after", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness_error_after": {"name": "freshness_error_after", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "freshness_filter": {"name": "freshness_filter", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "relation_name": {"name": "relation_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_description": {"name": "source_description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_sources`", "created_at": 1654743709.745933}, "source.elementary.elementary_dbt_artifacts.dbt_exposures": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_exposures"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_exposures", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_exposures", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_exposures", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "maturity": {"name": "maturity", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_email": {"name": "owner_email", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "owner_name": {"name": "owner_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "url": {"name": "url", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_exposures`", "created_at": 1654743709.746013}, "source.elementary.elementary_dbt_artifacts.dbt_metrics": {"fqn": ["elementary", "edr_sources", "elementary_dbt_artifacts", "dbt_metrics"], "database": "esbi-test", "schema": "edm_dbt_admin", "unique_id": "source.elementary.elementary_dbt_artifacts.dbt_metrics", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "models/edr_sources/sources.yml", "original_file_path": "models/edr_sources/sources.yml", "name": "dbt_metrics", "source_name": "elementary_dbt_artifacts", "source_description": "", "loader": "", "identifier": "dbt_metrics", "resource_type": "source", "quoting": {"database": null, "schema": null, "identifier": null, "column": null}, "loaded_at_field": null, "freshness": {"warn_after": {"count": null, "period": null}, "error_after": {"count": null, "period": null}, "filter": null}, "external": null, "description": "", "columns": {"unique_id": {"name": "unique_id", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "name": {"name": "name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "label": {"name": "label", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "model": {"name": "model", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "type": {"name": "type", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sql": {"name": "sql", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "timestamp": {"name": "timestamp", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "filters": {"name": "filters", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "time_grains": {"name": "time_grains", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dimensions": {"name": "dimensions", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_macros": {"name": "depends_on_macros", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depends_on_nodes": {"name": "depends_on_nodes", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tags": {"name": "tags", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "meta": {"name": "meta", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "package_name": {"name": "package_name", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "original_path": {"name": "original_path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "path": {"name": "path", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "generated_at": {"name": "generated_at", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "source_meta": {}, "tags": [], "config": {"enabled": true}, "patch_path": null, "unrendered_config": {}, "relation_name": "`esbi-test`.`edm_dbt_admin`.`dbt_metrics`", "created_at": 1654743709.746094}}, "macros": {"macro.elastic_dbt.generate_database_name": {"unique_id": "macro.elastic_dbt.generate_database_name", "package_name": "elastic_dbt", "root_path": "/Users/skinner/Github/dbt", "path": "macros/generate_database_name.sql", "original_file_path": "macros/generate_database_name.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(\n        custom_database_name = none,\n        node = none\n    ) -%}\n\n    {%- set default_database = target.database -%}\n\n    {%- if custom_database_name is not none and target.name == 'prod' -%}\n\n        {{ custom_database_name | trim }}\n\n    {%- else -%}\n\n        {{ default_database }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "A macro that writes to the database defined in your target unless the target is equal to prod. When the target is prod, it writes the output of dbt into the destination database defined in dbt_project.yml", "meta": {}, "docs": {"show": true}, "patch_path": "elastic_dbt://models/schema.yml", "arguments": [{"name": "custom_database_name", "type": null, "description": "This is automatically populated with by the target context."}, {"name": "node", "type": null, "description": "This is automatically populated with by the target context."}], "created_at": 1654743709.719784}, "macro.elastic_dbt.generate_schema_name": {"unique_id": "macro.elastic_dbt.generate_schema_name", "package_name": "elastic_dbt", "root_path": "/Users/skinner/Github/dbt", "path": "macros/generate_schema_name.sql", "original_file_path": "macros/generate_schema_name.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name, node) -%}\n    {{ generate_schema_name_for_env(custom_schema_name, node) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.generate_schema_name_for_env"]}, "description": "A macro that writes to the schema defined in your target unless the target is equal to prod. When the target is prod, it writes the output of dbt into the destination schema defined in dbt_project.yml", "meta": {}, "docs": {"show": true}, "patch_path": "elastic_dbt://models/schema.yml", "arguments": [{"name": "custom_schema_name", "type": null, "description": "This is automatically populated with by the target context."}, {"name": "node", "type": null, "description": "This is automatically populated with by the target context."}], "created_at": 1654743709.7203379}, "macro.dbt_bigquery.date_sharded_table": {"unique_id": "macro.dbt_bigquery.date_sharded_table", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "date_sharded_table", "macro_sql": "{% macro date_sharded_table(base_name) %}\n    {{ return(base_name ~ \"[DBT__PARTITION_DATE]\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.378237}, "macro.dbt_bigquery.grant_access_to": {"unique_id": "macro.dbt_bigquery.grant_access_to", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "grant_access_to", "macro_sql": "{% macro grant_access_to(entity, entity_type, role, grant_target_dict) -%}\n  {% do adapter.grant_access_to(entity, entity_type, role, grant_target_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.378488}, "macro.dbt_bigquery.get_partitions_metadata": {"unique_id": "macro.dbt_bigquery.get_partitions_metadata", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/etc.sql", "original_file_path": "macros/etc.sql", "name": "get_partitions_metadata", "macro_sql": "\n\n{%- macro get_partitions_metadata(table) -%}\n  {%- if execute -%}\n    {%- set res = adapter.get_partitions_metadata(table) -%}\n    {{- return(res) -}}\n  {%- endif -%}\n  {{- return(None) -}}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.378773}, "macro.dbt_bigquery.bigquery__get_catalog": {"unique_id": "macro.dbt_bigquery.bigquery__get_catalog", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/catalog.sql", "original_file_path": "macros/catalog.sql", "name": "bigquery__get_catalog", "macro_sql": "{% macro bigquery__get_catalog(information_schema, schemas) -%}\n\n  {%- if (schemas | length) == 0 -%}\n    {# Hopefully nothing cares about the columns we return when there are no rows #}\n    {%- set query  = \"select 1 as id limit 0\" -%}\n  {%- else -%}\n\n  {%- set query -%}\n    with tables as (\n        select\n            project_id as table_database,\n            dataset_id as table_schema,\n            table_id as original_table_name,\n\n            concat(project_id, '.', dataset_id, '.', table_id) as relation_id,\n\n            row_count,\n            size_bytes as size_bytes,\n            case\n                when type = 1 then 'table'\n                when type = 2 then 'view'\n                else 'external'\n            end as table_type,\n\n            REGEXP_CONTAINS(table_id, '^.+[0-9]{8}$') and coalesce(type, 0) = 1 as is_date_shard,\n            REGEXP_EXTRACT(table_id, '^(.+)[0-9]{8}$') as shard_base_name,\n            REGEXP_EXTRACT(table_id, '^.+([0-9]{8})$') as shard_name\n\n        from {{ information_schema.replace(information_schema_view='__TABLES__') }}\n        where (\n          {%- for schema in schemas -%}\n            upper(dataset_id) = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n          {%- endfor -%}\n        )\n    ),\n\n    extracted as (\n\n        select *,\n            case\n                when is_date_shard then shard_base_name\n                else original_table_name\n            end as table_name\n\n        from tables\n\n    ),\n\n    unsharded_tables as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            coalesce(table_type, 'external') as table_type,\n            is_date_shard,\n\n            struct(\n                min(shard_name) as shard_min,\n                max(shard_name) as shard_max,\n                count(*) as shard_count\n            ) as table_shards,\n\n            sum(size_bytes) as size_bytes,\n            sum(row_count) as row_count,\n\n            max(relation_id) as relation_id\n\n        from extracted\n        group by 1,2,3,4,5\n\n    ),\n\n    info_schema_columns as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            table_catalog as table_database,\n            table_schema,\n            table_name,\n\n            -- use the \"real\" column name from the paths query below\n            column_name as base_column_name,\n            ordinal_position as column_index,\n\n            is_partitioning_column,\n            clustering_ordinal_position\n\n        from {{ information_schema.replace(information_schema_view='COLUMNS') }}\n        where ordinal_position is not null\n\n    ),\n\n    info_schema_column_paths as (\n\n        select\n            concat(table_catalog, '.', table_schema, '.', table_name) as relation_id,\n            field_path as column_name,\n            data_type as column_type,\n            column_name as base_column_name,\n            description as column_comment\n\n        from {{ information_schema.replace(information_schema_view='COLUMN_FIELD_PATHS') }}\n\n    ),\n\n    columns as (\n\n        select * except (base_column_name)\n        from info_schema_columns\n        join info_schema_column_paths using (relation_id, base_column_name)\n\n    ),\n\n    column_stats as (\n\n        select\n            table_database,\n            table_schema,\n            table_name,\n            max(relation_id) as relation_id,\n            max(case when is_partitioning_column = 'YES' then 1 else 0 end) = 1 as is_partitioned,\n            max(case when is_partitioning_column = 'YES' then column_name else null end) as partition_column,\n            max(case when clustering_ordinal_position is not null then 1 else 0 end) = 1 as is_clustered,\n            array_to_string(\n                array_agg(\n                    case\n                        when clustering_ordinal_position is not null then column_name\n                        else null\n                    end ignore nulls\n                    order by clustering_ordinal_position\n                ), ', '\n            ) as clustering_columns\n\n        from columns\n        group by 1,2,3\n\n    )\n\n    select\n        unsharded_tables.table_database,\n        unsharded_tables.table_schema,\n        case\n            when is_date_shard then concat(unsharded_tables.table_name, '*')\n            else unsharded_tables.table_name\n        end as table_name,\n        unsharded_tables.table_type,\n\n        -- coalesce name and type for External tables - these columns are not\n        -- present in the COLUMN_FIELD_PATHS resultset\n        coalesce(columns.column_name, '<unknown>') as column_name,\n        -- invent a row number to account for nested fields -- BQ does\n        -- not treat these nested properties as independent fields\n        row_number() over (\n            partition by relation_id\n            order by columns.column_index, columns.column_name\n        ) as column_index,\n        coalesce(columns.column_type, '<unknown>') as column_type,\n        columns.column_comment,\n\n        'Shard count' as `stats__date_shards__label`,\n        table_shards.shard_count as `stats__date_shards__value`,\n        'The number of date shards in this table' as `stats__date_shards__description`,\n        is_date_shard as `stats__date_shards__include`,\n\n        'Shard (min)' as `stats__date_shard_min__label`,\n        table_shards.shard_min as `stats__date_shard_min__value`,\n        'The first date shard in this table' as `stats__date_shard_min__description`,\n        is_date_shard as `stats__date_shard_min__include`,\n\n        'Shard (max)' as `stats__date_shard_max__label`,\n        table_shards.shard_max as `stats__date_shard_max__value`,\n        'The last date shard in this table' as `stats__date_shard_max__description`,\n        is_date_shard as `stats__date_shard_max__include`,\n\n        '# Rows' as `stats__num_rows__label`,\n        row_count as `stats__num_rows__value`,\n        'Approximate count of rows in this table' as `stats__num_rows__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_rows__include`,\n\n        'Approximate Size' as `stats__num_bytes__label`,\n        size_bytes as `stats__num_bytes__value`,\n        'Approximate size of table as reported by BigQuery' as `stats__num_bytes__description`,\n        (unsharded_tables.table_type = 'table') as `stats__num_bytes__include`,\n\n        'Partitioned By' as `stats__partitioning_type__label`,\n        partition_column as `stats__partitioning_type__value`,\n        'The partitioning column for this table' as `stats__partitioning_type__description`,\n        is_partitioned as `stats__partitioning_type__include`,\n\n        'Clustered By' as `stats__clustering_fields__label`,\n        clustering_columns as `stats__clustering_fields__value`,\n        'The clustering columns for this table' as `stats__clustering_fields__description`,\n        is_clustered as `stats__clustering_fields__include`\n\n    -- join using relation_id (an actual relation, not a shard prefix) to make\n    -- sure that column metadata is picked up through the join. This will only\n    -- return the column information for the \"max\" table in a date-sharded table set\n    from unsharded_tables\n    left join columns using (relation_id)\n    left join column_stats using (relation_id)\n  {%- endset -%}\n\n  {%- endif -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4000158}, "macro.dbt_bigquery.partition_by": {"unique_id": "macro.dbt_bigquery.partition_by", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "partition_by", "macro_sql": "{% macro partition_by(partition_config) -%}\n    {%- if partition_config is none -%}\n      {% do return('') %}\n    {%- elif partition_config.data_type | lower in ('date','timestamp','datetime') -%}\n        partition by {{ partition_config.render() }}\n    {%- elif partition_config.data_type | lower in ('int64') -%}\n        {%- set range = partition_config.range -%}\n        partition by range_bucket(\n            {{ partition_config.field }},\n            generate_array({{ range.start}}, {{ range.end }}, {{ range.interval }})\n        )\n    {%- endif -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.406402}, "macro.dbt_bigquery.cluster_by": {"unique_id": "macro.dbt_bigquery.cluster_by", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "cluster_by", "macro_sql": "{% macro cluster_by(raw_cluster_by) %}\n  {%- if raw_cluster_by is not none -%}\n  cluster by {% if raw_cluster_by is string -%}\n    {% set raw_cluster_by = [raw_cluster_by] %}\n  {%- endif -%}\n  {%- for cluster in raw_cluster_by -%}\n    {{ cluster }}\n    {%- if not loop.last -%}, {% endif -%}\n  {%- endfor -%}\n\n  {% endif %}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4068632}, "macro.dbt_bigquery.bigquery_options": {"unique_id": "macro.dbt_bigquery.bigquery_options", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_options", "macro_sql": "{% macro bigquery_options(opts) %}\n  {% set options -%}\n    OPTIONS({% for opt_key, opt_val in opts.items() %}\n      {{ opt_key }}={{ opt_val }}{{ \",\" if not loop.last }}\n    {% endfor %})\n  {%- endset %}\n  {%- do return(options) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.407289}, "macro.dbt_bigquery.bigquery_table_options": {"unique_id": "macro.dbt_bigquery.bigquery_table_options", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_table_options", "macro_sql": "{% macro bigquery_table_options(config, node, temporary) %}\n  {% set opts = adapter.get_table_options(config, node, temporary) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4075992}, "macro.dbt_bigquery.bigquery__create_table_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_table_as", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_table_as", "macro_sql": "{% macro bigquery__create_table_as(temporary, relation, sql) -%}\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set raw_cluster_by = config.get('cluster_by', none) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {%- set partition_config = adapter.parse_partition_by(raw_partition_by) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace table {{ relation }}\n  {{ partition_by(partition_config) }}\n  {{ cluster_by(raw_cluster_by) }}\n  {{ bigquery_table_options(config, model, temporary) }}\n  as (\n    {{ sql }}\n  );\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.partition_by", "macro.dbt_bigquery.cluster_by", "macro.dbt_bigquery.bigquery_table_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4083672}, "macro.dbt_bigquery.bigquery_view_options": {"unique_id": "macro.dbt_bigquery.bigquery_view_options", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery_view_options", "macro_sql": "{% macro bigquery_view_options(config, node) %}\n  {% set opts = adapter.get_view_options(config, node) %}\n  {%- do return(bigquery_options(opts)) -%}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.408639}, "macro.dbt_bigquery.bigquery__create_view_as": {"unique_id": "macro.dbt_bigquery.bigquery__create_view_as", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_view_as", "macro_sql": "{% macro bigquery__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create or replace view {{ relation }}\n  {{ bigquery_view_options(config, model) }}\n  as {{ sql }};\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery_view_options"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.409013}, "macro.dbt_bigquery.bigquery__create_schema": {"unique_id": "macro.dbt_bigquery.bigquery__create_schema", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__create_schema", "macro_sql": "{% macro bigquery__create_schema(relation) -%}\n  {{ adapter.create_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4091678}, "macro.dbt_bigquery.bigquery__drop_schema": {"unique_id": "macro.dbt_bigquery.bigquery__drop_schema", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_schema", "macro_sql": "{% macro bigquery__drop_schema(relation) -%}\n  {{ adapter.drop_schema(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.409303}, "macro.dbt_bigquery.bigquery__drop_relation": {"unique_id": "macro.dbt_bigquery.bigquery__drop_relation", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__drop_relation", "macro_sql": "{% macro bigquery__drop_relation(relation) -%}\n  {% call statement('drop_relation') -%}\n    drop {{ relation.type }} if exists {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.409546}, "macro.dbt_bigquery.bigquery__get_columns_in_relation": {"unique_id": "macro.dbt_bigquery.bigquery__get_columns_in_relation", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__get_columns_in_relation", "macro_sql": "{% macro bigquery__get_columns_in_relation(relation) -%}\n  {{ return(adapter.get_columns_in_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4097128}, "macro.dbt_bigquery.bigquery__list_relations_without_caching": {"unique_id": "macro.dbt_bigquery.bigquery__list_relations_without_caching", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_relations_without_caching", "macro_sql": "{% macro bigquery__list_relations_without_caching(schema_relation) -%}\n  {{ return(adapter.list_relations_without_caching(schema_relation)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.409893}, "macro.dbt_bigquery.bigquery__current_timestamp": {"unique_id": "macro.dbt_bigquery.bigquery__current_timestamp", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() -%}\n  CURRENT_TIMESTAMP()\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4099782}, "macro.dbt_bigquery.bigquery__snapshot_string_as_time": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_string_as_time", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__snapshot_string_as_time", "macro_sql": "{% macro bigquery__snapshot_string_as_time(timestamp) -%}\n    {%- set result = 'TIMESTAMP(\"' ~ timestamp ~ '\")' -%}\n    {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.410178}, "macro.dbt_bigquery.bigquery__list_schemas": {"unique_id": "macro.dbt_bigquery.bigquery__list_schemas", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__list_schemas", "macro_sql": "{% macro bigquery__list_schemas(database) -%}\n  {{ return(adapter.list_schemas(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4104478}, "macro.dbt_bigquery.bigquery__check_schema_exists": {"unique_id": "macro.dbt_bigquery.bigquery__check_schema_exists", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__check_schema_exists", "macro_sql": "{% macro bigquery__check_schema_exists(information_schema, schema) %}\n  {{ return(adapter.check_schema_exists(information_schema.database, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.410645}, "macro.dbt_bigquery.bigquery__persist_docs": {"unique_id": "macro.dbt_bigquery.bigquery__persist_docs", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__persist_docs", "macro_sql": "{% macro bigquery__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do alter_column_comment(relation, model.columns) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4109719}, "macro.dbt_bigquery.bigquery__alter_column_comment": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_comment", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_comment", "macro_sql": "{% macro bigquery__alter_column_comment(relation, column_dict) -%}\n  {% do adapter.update_columns(relation, column_dict) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4111528}, "macro.dbt_bigquery.bigquery__rename_relation": {"unique_id": "macro.dbt_bigquery.bigquery__rename_relation", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__rename_relation", "macro_sql": "{% macro bigquery__rename_relation(from_relation, to_relation) -%}\n  {% do adapter.rename_relation(from_relation, to_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.411329}, "macro.dbt_bigquery.bigquery__alter_relation_add_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_add_columns", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_add_columns", "macro_sql": "{% macro bigquery__alter_relation_add_columns(relation, add_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n        {% for column in add_columns %}\n          add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n\n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.411772}, "macro.dbt_bigquery.bigquery__alter_relation_drop_columns": {"unique_id": "macro.dbt_bigquery.bigquery__alter_relation_drop_columns", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_relation_drop_columns", "macro_sql": "{% macro bigquery__alter_relation_drop_columns(relation, drop_columns) %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n\n        {% for column in drop_columns %}\n          drop column {{ column.name }}{{ ',' if not loop.last }}\n        {% endfor %}\n  \n  {%- endset -%}\n  \n  {{ return(run_query(sql)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.412218}, "macro.dbt_bigquery.bigquery__alter_column_type": {"unique_id": "macro.dbt_bigquery.bigquery__alter_column_type", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__alter_column_type", "macro_sql": "{% macro bigquery__alter_column_type(relation, column_name, new_column_type) -%}\n  {#-- Changing a column's data type using a query requires you to scan the entire table.\n    The query charges can be significant if the table is very large.\n\n    https://cloud.google.com/bigquery/docs/manually-changing-schemas#changing_a_columns_data_type\n  #}\n  {% set relation_columns = get_columns_in_relation(relation) %}\n\n  {% set sql %}\n    select\n      {%- for col in relation_columns -%}\n        {% if col.column == column_name %}\n          CAST({{ col.quoted }} AS {{ new_column_type }}) AS {{ col.quoted }}\n        {%- else %}\n          {{ col.quoted }}\n        {%- endif %}\n        {%- if not loop.last %},{% endif -%}\n      {%- endfor %}\n    from {{ relation }}\n  {% endset %}\n\n  {% call statement('alter_column_type') %}\n    {{ create_table_as(False, relation, sql)}}\n  {%- endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_relation", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.412965}, "macro.dbt_bigquery.bigquery__test_unique": {"unique_id": "macro.dbt_bigquery.bigquery__test_unique", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/adapters.sql", "original_file_path": "macros/adapters.sql", "name": "bigquery__test_unique", "macro_sql": "{% macro bigquery__test_unique(model, column_name) %}\n\nwith dbt_test__target as (\n  \n  select {{ column_name }} as unique_field\n  from {{ model }}\n  where {{ column_name }} is not null\n  \n)\n\nselect\n    unique_field,\n    count(*) as n_records\n\nfrom dbt_test__target\ngroup by unique_field\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.413148}, "macro.dbt_bigquery.bigquery__create_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__create_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__create_csv_table", "macro_sql": "{% macro bigquery__create_csv_table(model, agate_table) %}\n    -- no-op\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.413593}, "macro.dbt_bigquery.bigquery__reset_csv_table": {"unique_id": "macro.dbt_bigquery.bigquery__reset_csv_table", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__reset_csv_table", "macro_sql": "{% macro bigquery__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.413766}, "macro.dbt_bigquery.bigquery__load_csv_rows": {"unique_id": "macro.dbt_bigquery.bigquery__load_csv_rows", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/seed.sql", "original_file_path": "macros/materializations/seed.sql", "name": "bigquery__load_csv_rows", "macro_sql": "{% macro bigquery__load_csv_rows(model, agate_table) %}\n\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {{ adapter.load_dataframe(model['database'], model['schema'], model['alias'],\n  \t\t\t\t\t\t\tagate_table, column_override) }}\n  {% if config.persist_relation_docs() and 'description' in model %}\n\n  \t{{ adapter.update_table_description(model['database'], model['schema'], model['alias'], model['description']) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4144819}, "macro.dbt_bigquery.bigquery__handle_existing_table": {"unique_id": "macro.dbt_bigquery.bigquery__handle_existing_table", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "bigquery__handle_existing_table", "macro_sql": "{% macro bigquery__handle_existing_table(full_refresh, old_relation) %}\n    {%- if full_refresh -%}\n      {{ adapter.drop_relation(old_relation) }}\n    {%- else -%}\n      {{ exceptions.relation_wrong_type(old_relation, 'view') }}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.415117}, "macro.dbt_bigquery.materialization_view_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_view_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/view.sql", "original_file_path": "macros/materializations/view.sql", "name": "materialization_view_bigquery", "macro_sql": "{% materialization view, adapter='bigquery' -%}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n    {% do persist_docs(target_relation, model) %}\n\n    {% if config.get('grant_access_to') %}\n      {% for grant_target_dict in config.get('grant_access_to') %}\n        {% do adapter.grant_access_to(this, 'view', None, grant_target_dict) %}\n      {% endfor %}\n    {% endif %}\n\n    {% do return(to_return) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_or_replace_view", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4157581}, "macro.dbt_bigquery.materialization_table_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_table_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/table.sql", "original_file_path": "macros/materializations/table.sql", "name": "materialization_table_bigquery", "macro_sql": "{% materialization table, adapter='bigquery' -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n  {%- set target_relation = api.Relation.create(database=database, schema=schema, identifier=identifier, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#\n      We only need to drop this thing if it is not a table.\n      If it _is_ already a table, then we can overwrite it without downtime\n      Unlike table -> view, no need for `--full-refresh`: dropping a view is no big deal\n  #}\n  {%- if exists_not_as_table -%}\n      {{ adapter.drop_relation(old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n  {% if not adapter.is_replaceable(old_relation, partition_by, cluster_by) %}\n    {% do log(\"Hard refreshing \" ~ old_relation ~ \" because it is not replaceable\") %}\n    {% do adapter.drop_relation(old_relation) %}\n  {% endif %}\n  {% call statement('main') -%}\n    {{ create_table_as(False, target_relation, sql) }}\n  {% endcall -%}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.41777}, "macro.dbt_bigquery.materialization_copy_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_copy_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/copy.sql", "original_file_path": "macros/materializations/copy.sql", "name": "materialization_copy_bigquery", "macro_sql": "{% materialization copy, adapter='bigquery' -%}\n\n  {# Setup #}\n  {{ run_hooks(pre_hooks) }}\n\n  {% set destination = this.incorporate(type='table') %}\n\n  {# there can be several ref() or source() according to BQ copy API docs #}\n  {# cycle over ref() and source() to create source tables array #}\n  {% set source_array = [] %}\n  {% for ref_table in model.refs %}\n    {{ source_array.append(ref(*ref_table)) }}\n  {% endfor %}\n\n  {% for src_table in model.sources %}\n    {{ source_array.append(source(*src_table)) }}\n  {% endfor %}\n\n  {# Call adapter's copy_table function #}\n  {%- set result_str = adapter.copy_table(\n      source_array,\n      destination,\n      config.get('copy_materialization', default = 'table')) -%}\n\n  {{ store_result('main', response=result_str) }}\n\n  {# Clean up #}\n  {{ run_hooks(post_hooks) }}\n  {{ adapter.commit() }}\n\n  {{ return({'relations': [destination]}) }}\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.419081}, "macro.dbt_bigquery.declare_dbt_max_partition": {"unique_id": "macro.dbt_bigquery.declare_dbt_max_partition", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "declare_dbt_max_partition", "macro_sql": "{% macro declare_dbt_max_partition(relation, partition_by, sql) %}\n\n  {% if '_dbt_max_partition' in sql %}\n\n    declare _dbt_max_partition {{ partition_by.data_type }} default (\n      select max({{ partition_by.field }}) from {{ this }}\n      where {{ partition_by.field }} is not null\n    );\n  \n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4212291}, "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy": {"unique_id": "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "dbt_bigquery_validate_get_incremental_strategy", "macro_sql": "{% macro dbt_bigquery_validate_get_incremental_strategy(config) %}\n  {#-- Find and validate the incremental strategy #}\n  {%- set strategy = config.get(\"incremental_strategy\", default=\"merge\") -%}\n\n  {% set invalid_strategy_msg -%}\n    Invalid incremental strategy provided: {{ strategy }}\n    Expected one of: 'merge', 'insert_overwrite'\n  {%- endset %}\n  {% if strategy not in ['merge', 'insert_overwrite'] %}\n    {% do exceptions.raise_compiler_error(invalid_strategy_msg) %}\n  {% endif %}\n\n  {% do return(strategy) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4217222}, "macro.dbt_bigquery.bq_insert_overwrite": {"unique_id": "macro.dbt_bigquery.bq_insert_overwrite", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_insert_overwrite", "macro_sql": "{% macro bq_insert_overwrite(\n    tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n\n  {% if partitions is not none and partitions != [] %} {# static #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in (\n              {{ partitions | join (', ') }}\n          )\n      {%- endset %}\n\n      {%- set source_sql -%}\n        (\n          {{sql}}\n        )\n      {%- endset -%}\n\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=true) }}\n\n  {% else %} {# dynamic #}\n\n      {% set predicate -%}\n          {{ partition_by.render(alias='DBT_INTERNAL_DEST') }} in unnest(dbt_partitions_for_replacement)\n      {%- endset %}\n\n      {%- set source_sql -%}\n      (\n        select * from {{ tmp_relation }}\n      )\n      {%- endset -%}\n\n      -- generated script to merge partitions into {{ target_relation }}\n      declare dbt_partitions_for_replacement array<{{ partition_by.data_type }}>;\n\n      {# have we already created the temp table to check for schema changes? #}\n      {% if not tmp_relation_exists %}\n        {{ declare_dbt_max_partition(this, partition_by, sql) }}\n        \n        -- 1. create a temp table\n        {{ create_table_as(True, tmp_relation, sql) }}\n      {% else %}\n        -- 1. temp table already exists, we used it to check for schema changes\n      {% endif %}\n\n      -- 2. define partitions to update\n      set (dbt_partitions_for_replacement) = (\n          select as struct\n              array_agg(distinct {{ partition_by.render() }})\n          from {{ tmp_relation }}\n      );\n\n      {#\n        TODO: include_sql_header is a hack; consider a better approach that includes\n              the sql_header at the materialization-level instead\n      #}\n      -- 3. run the merge statement\n      {{ get_insert_overwrite_merge_sql(target_relation, source_sql, dest_columns, [predicate], include_sql_header=false) }};\n\n      -- 4. clean up the temp table\n      drop table if exists {{ tmp_relation }}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.423307}, "macro.dbt_bigquery.bq_generate_incremental_build_sql": {"unique_id": "macro.dbt_bigquery.bq_generate_incremental_build_sql", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "bq_generate_incremental_build_sql", "macro_sql": "{% macro bq_generate_incremental_build_sql(\n    strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n) %}\n  {#-- if partitioned, use BQ scripting to get the range of partition values to be updated --#}\n  {% if strategy == 'insert_overwrite' %}\n\n    {% set missing_partition_msg -%}\n      The 'insert_overwrite' strategy requires the `partition_by` config.\n    {%- endset %}\n    {% if partition_by is none %}\n      {% do exceptions.raise_compiler_error(missing_partition_msg) %}\n    {% endif %}\n\n    {% set build_sql = bq_insert_overwrite(\n        tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, on_schema_change\n    ) %}\n\n  {% else %} {# strategy == 'merge' #}\n    {%- set source_sql -%}\n      {%- if tmp_relation_exists -%}\n        (\n          select * from {{ tmp_relation }}\n        )\n      {%- else -%} {#-- wrap sql in parens to make it a subquery --#}\n        (\n          {{sql}}\n        )\n      {%- endif -%}\n    {%- endset -%}\n\n    {% set build_sql = get_merge_sql(target_relation, source_sql, unique_key, dest_columns) %}\n\n  {% endif %}\n\n  {{ return(build_sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bq_insert_overwrite", "macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.424263}, "macro.dbt_bigquery.materialization_incremental_bigquery": {"unique_id": "macro.dbt_bigquery.materialization_incremental_bigquery", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/incremental.sql", "original_file_path": "macros/materializations/incremental.sql", "name": "materialization_incremental_bigquery", "macro_sql": "{% materialization incremental, adapter='bigquery' -%}\n\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set target_relation = this %}\n  {%- set existing_relation = load_relation(this) %}\n  {%- set tmp_relation = make_temp_relation(this) %}\n\n  {#-- Validate early so we don't run SQL if the strategy is invalid --#}\n  {% set strategy = dbt_bigquery_validate_get_incremental_strategy(config) -%}\n\n  {%- set raw_partition_by = config.get('partition_by', none) -%}\n  {%- set partition_by = adapter.parse_partition_by(raw_partition_by) -%}\n  {%- set partitions = config.get('partitions', none) -%}\n  {%- set cluster_by = config.get('cluster_by', none) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif existing_relation.is_view %}\n      {#-- There's no way to atomically replace a view with a table on BQ --#}\n      {{ adapter.drop_relation(existing_relation) }}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% elif full_refresh_mode %}\n      {#-- If the partition/cluster config has changed, then we must drop and recreate --#}\n      {% if not adapter.is_replaceable(existing_relation, partition_by, cluster_by) %}\n          {% do log(\"Hard refreshing \" ~ existing_relation ~ \" because it is not replaceable\") %}\n          {{ adapter.drop_relation(existing_relation) }}\n      {% endif %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n  \n  {% else %}\n    {% set tmp_relation_exists = false %}\n    {% if on_schema_change != 'ignore' %} {# Check first, since otherwise we may not build a temp table #}\n      {% do run_query(\n        declare_dbt_max_partition(this, partition_by, sql) + create_table_as(True, tmp_relation, sql)\n      ) %}\n      {% set tmp_relation_exists = true %}\n      {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n      {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% endif %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = bq_generate_incremental_build_sql(\n        strategy, tmp_relation, target_relation, sql, unique_key, partition_by, partitions, dest_columns, tmp_relation_exists\n    ) %}\n\n  {% endif %}\n\n  {%- call statement('main') -%}\n    {{ build_sql }}\n  {% endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt_bigquery.dbt_bigquery_validate_get_incremental_strategy", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt_bigquery.declare_dbt_max_partition", "macro.dbt.process_schema_changes", "macro.dbt_bigquery.bq_generate_incremental_build_sql", "macro.dbt.statement", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.427051}, "macro.dbt_bigquery.bigquery__snapshot_hash_arguments": {"unique_id": "macro.dbt_bigquery.bigquery__snapshot_hash_arguments", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__snapshot_hash_arguments", "macro_sql": "{% macro bigquery__snapshot_hash_arguments(args) -%}\n  to_hex(md5(concat({%- for arg in args -%}\n    coalesce(cast({{ arg }} as string), ''){% if not loop.last %}, '|',{% endif -%}\n  {%- endfor -%}\n  )))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.427538}, "macro.dbt_bigquery.bigquery__create_columns": {"unique_id": "macro.dbt_bigquery.bigquery__create_columns", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__create_columns", "macro_sql": "{% macro bigquery__create_columns(relation, columns) %}\n  {{ adapter.alter_table_add_columns(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.427704}, "macro.dbt_bigquery.bigquery__post_snapshot": {"unique_id": "macro.dbt_bigquery.bigquery__post_snapshot", "package_name": "dbt_bigquery", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/bigquery", "path": "macros/materializations/snapshot.sql", "original_file_path": "macros/materializations/snapshot.sql", "name": "bigquery__post_snapshot", "macro_sql": "{% macro bigquery__post_snapshot(staging_relation) %}\n  -- Clean up the snapshot temp table\n  {% do drop_relation(staging_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4278421}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.42906}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.429274}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.429426}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4295738}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/hooks.sql", "original_file_path": "macros/materializations/hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4297228}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.430166}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.430495}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/configs.sql", "original_file_path": "macros/materializations/configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.430827}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4313521}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot_merge.sql", "original_file_path": "macros/materializations/snapshots/snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.431647}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.435288}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.43548}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.435732}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_get_time", "macro_sql": "{% macro snapshot_get_time() -%}\n  {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.436012}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() -%}\n  {{ current_timestamp() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.436137}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.437082}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.437278}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4374652}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists) -%}\n    {%- set query_columns = get_columns_in_query(node['compiled_sql']) -%}\n    {%- if not target_exists -%}\n        {# no table yet -> return whatever the query does #}\n        {{ return([false, query_columns]) }}\n    {%- endif -%}\n    {# handle any schema changes #}\n    {%- set target_table = node.get('alias', node.get('name')) -%}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=target_table) -%}\n    {%- set existing_cols = get_columns_in_query('select * from ' ~ target_relation) -%}\n    {%- set ns = namespace() -%} {# handle for-loop scoping with a namespace #}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(col) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return([ns.column_added, intersection]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.438604}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/strategies.sql", "original_file_path": "macros/materializations/snapshots/strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    \n    {% set select_current_time -%}\n        select {{ snapshot_get_time() }} as snapshot_start\n    {%- endset %}\n\n    {#-- don't access the column by name, to avoid dealing with casing issues on snowflake #}\n    {%- set now = run_query(select_current_time)[0][0] -%}\n    {% if now is none or now is undefined -%}\n        {%- do exceptions.raise_compiler_error('Could not get a snapshot start time from the database') -%}\n    {%- endif %}\n    {% set updated_at = config.get('updated_at', snapshot_string_as_time(now)) %}\n\n    {% set column_added = false %}\n\n    {% if check_cols_config == 'all' %}\n        {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists) %}\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {% set check_cols = check_cols_config %}\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        TRUE\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.run_query", "macro.dbt.snapshot_string_as_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.440681}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.444383}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4446971}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.444899}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.444988}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.44523}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select \n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n    \n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n    \n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4464278}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.446701}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.44703}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/helpers.sql", "original_file_path": "macros/materializations/snapshots/helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set tmp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, tmp_relation, select) }}\n    {% endcall %}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4475389}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/snapshots/snapshot.sql", "original_file_path": "macros/materializations/snapshots/snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n\n  {% if not adapter.check_schema_exists(model.database, model.schema) %}\n    {% do create_schema(model.database, model.schema) %}\n  {% endif %}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_sql']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_schema", "macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.454644}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/test.sql", "original_file_path": "macros/materializations/tests/test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n    \n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n    \n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n    \n    {% do relations.append(target_relation) %}\n  \n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n    \n    {{ adapter.commit() }}\n  \n  {% else %}\n\n      {% set main_sql = sql %}\n  \n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n  \n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.457032}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4575932}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/helpers.sql", "original_file_path": "macros/materializations/tests/helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.457931}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.458391}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/tests/where_subquery.sql", "original_file_path": "macros/materializations/tests/where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.458805}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n    \n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.459737}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n   \n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n  \n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4603279}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/column_helpers.sql", "original_file_path": "macros/materializations/models/incremental/column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n  \n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }} \n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.461011}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.464183}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set update_columns = config.get('merge_update_columns', default = dest_columns | map(attribute=\"quoted\") | list) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% set unique_key_match %}\n            DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n        {% endset %}\n        {% do predicates.append(unique_key_match) %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.465446}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.465704}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key is not none %}\n    delete from {{ target }}\n    where ({{ unique_key }}) in (\n        select ({{ unique_key }})\n        from {{ source }}\n    );\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4661708}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4664562}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/merge.sql", "original_file_path": "macros/materializations/models/incremental/merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4671738}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/is_incremental.sql", "original_file_path": "macros/materializations/models/incremental/is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.467916}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/incremental.sql", "original_file_path": "macros/materializations/models/incremental/incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  {% set unique_key = config.get('unique_key') %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% set existing_relation = load_relation(this) %}\n  {% set tmp_relation = make_temp_relation(target_relation) %}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n  {% set backup_identifier = model['name'] + \"__dbt_backup\" %}\n\n  -- the intermediate_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {% set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                  schema=schema,\n                                                                  database=database) %}                                               \n  {% set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                            schema=schema,\n                                                            database=database) %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {# -- first check whether we want to full refresh for source view or config reasons #}\n  {% set trigger_full_refresh = (full_refresh_mode or existing_relation.is_view) %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = create_table_as(False, target_relation, sql) %}\n{% elif trigger_full_refresh %}\n      {#-- Make sure the backup doesn't exist so we don't encounter issues with the rename below #}\n      {% set tmp_identifier = model['name'] + '__dbt_tmp' %}\n      {% set backup_identifier = model['name'] + '__dbt_backup' %}\n      {% set intermediate_relation = existing_relation.incorporate(path={\"identifier\": tmp_identifier}) %}\n      {% set backup_relation = existing_relation.incorporate(path={\"identifier\": backup_identifier}) %}\n\n      {% set build_sql = create_table_as(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n      {% do to_drop.append(backup_relation) %}\n  {% else %}\n    {% do run_query(create_table_as(True, tmp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=tmp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n    {% set build_sql = get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n  \n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %} \n      {% do adapter.rename_relation(target_relation, backup_relation) %} \n      {% do adapter.rename_relation(intermediate_relation, target_relation) %} \n  {% endif %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation", "macro.dbt.make_temp_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.create_table_as", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.get_delete_insert_merge_sql", "macro.dbt.statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.473469}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n   \n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n     \n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n     \n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n   \n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4790232}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n  \n  {% set schema_changed = False %}\n  \n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n  \n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.480404}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n  \n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n  \n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n  \n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %} \n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n  \n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n  \n  {% do log(schema_change_message) %}\n  \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.481749}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/incremental/on_schema_change.sql", "original_file_path": "macros/materializations/models/incremental/on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n    \n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n    \n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n      \n      {% if schema_changes_dict['schema_changed'] %}\n    \n        {% if on_schema_change == 'fail' %}\n        \n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways: \n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n          {% endset %}\n          \n          {% do exceptions.raise_compiler_error(fail_msg) %}\n        \n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n          \n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n        \n        {% endif %}\n      \n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n    \n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.482542}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/table.sql", "original_file_path": "macros/materializations/models/table/table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type='table') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema,\n                                                      database=database,\n                                                      type='table') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema,\n                                                database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if old_relation is not none %}\n      {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.486805}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4873369}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.487534}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, sql) -%}\n  {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.487772}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/table/create_table_as.sql", "original_file_path": "macros/materializations/models/table/create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n  \n  {{ sql_header if sql_header is not none }}\n  \n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.48823}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/view.sql", "original_file_path": "macros/materializations/models/view/view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set tmp_identifier = model['name'] + '__dbt_tmp' -%}\n  {%- set backup_identifier = model['name'] + '__dbt_backup' -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, database=database,\n                                                type='view') -%}\n  {%- set intermediate_relation = api.Relation.create(identifier=tmp_identifier,\n                                                      schema=schema, database=database, type='view') -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = adapter.get_relation(identifier=tmp_identifier, \n                                                                   schema=schema,\n                                                                   database=database) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"old_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the old_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the old_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if old_relation is none else old_relation.type -%}\n  {%- set backup_relation = api.Relation.create(identifier=backup_identifier,\n                                                schema=schema, database=database,\n                                                type=backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = adapter.get_relation(identifier=backup_identifier,\n                                                             schema=schema,\n                                                             database=database) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ create_view_as(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if old_relation is not none %}\n    {{ adapter.rename_relation(old_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_view_as", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4921012}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.492486}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/helpers.sql", "original_file_path": "macros/materializations/models/view/helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.492726}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_or_replace_view.sql", "original_file_path": "macros/materializations/models/view/create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.49406}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.494507}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.494688}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4948952}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/models/view/create_view_as.sql", "original_file_path": "macros/materializations/models/view/create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.4951859}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/seed.sql", "original_file_path": "macros/materializations/seeds/seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set agate_table = load_agate_table() -%}\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ create_table_sql }};\n    -- dbt seed --\n    {{ sql }}\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.498396}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.503179}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5041878}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.504441}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.504954}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5051122}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.505236}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.505408}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.50553}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.506057}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.506261}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/materializations/seeds/helpers.sql", "original_file_path": "macros/materializations/seeds/helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.507607}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.508095}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_alias.sql", "original_file_path": "macros/get_custom_name/get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.508341}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5089421}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.509218}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_schema.sql", "original_file_path": "macros/get_custom_name/get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.509519}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.510004}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/get_custom_name/get_custom_database.sql", "original_file_path": "macros/get_custom_name/get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.510276}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/relationships.sql", "original_file_path": "macros/generic_test_sql/relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.510697}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/not_null.sql", "original_file_path": "macros/generic_test_sql/not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\nselect *\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.510944}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/unique.sql", "original_file_path": "macros/generic_test_sql/unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.511261}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/generic_test_sql/accepted_values.sql", "original_file_path": "macros/generic_test_sql/accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.511991}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "statement", "macro_sql": "{% macro statement(name=None, fetch_result=False, auto_begin=True) -%}\n  {%- if execute: -%}\n    {%- set sql = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n      {{ write(sql) }}\n    {%- endif -%}\n\n    {%- set res, table = adapter.execute(sql, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.513271}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5139148}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/statement.sql", "original_file_path": "macros/etc/statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.514247}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.516263}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5176299}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.518483}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/etc/datetime.sql", "original_file_path": "macros/etc/datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.518729}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5191948}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.519389}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5195599}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/schema.sql", "original_file_path": "macros/adapters/schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5197492}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.520323}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5204659}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.520633}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/indexes.sql", "original_file_path": "macros/adapters/indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.521058}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.522811}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {% set tmp_identifier = base_relation.identifier ~ suffix %}\n    {% set tmp_relation = base_relation.incorporate(\n                                path={\"identifier\": tmp_identifier}) -%}\n\n    {% do return(tmp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5231411}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.523339}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.523565}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.523757}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.523926}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.524207}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.524509}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5247738}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.525374}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.525619}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/relation.sql", "original_file_path": "macros/adapters/relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5258272}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.526371}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter '+adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.526531}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.526786}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/freshness.sql", "original_file_path": "macros/adapters/freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.527248}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.528012}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.528189}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.528403}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.528578}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.528873}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/persist_docs.sql", "original_file_path": "macros/adapters/persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.529394}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.53103}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5313122}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.531513}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5316842}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5318809}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5321448}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.532363}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5327628}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5329652}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/metadata.sql", "original_file_path": "macros/adapters/metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.533143}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.53515}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.535316}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.535646}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.535847}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5362098}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.536458}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.537136}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5374248}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "macros/adapters/columns.sql", "original_file_path": "macros/adapters/columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n  \n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n  \n  {% set sql -%}\n     \n     alter {{ relation.type }} {{ relation }}\n       \n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n            \n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n  \n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5383139}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_bigquery.bigquery__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.538929}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.539177}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.539486}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "tests/generic/builtin.sql", "original_file_path": "tests/generic/builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.539789}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.540127}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.54021}, "macro.dbt_utils.bigquery__except": {"unique_id": "macro.dbt_utils.bigquery__except", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/except.sql", "original_file_path": "macros/cross_db_utils/except.sql", "name": "bigquery__except", "macro_sql": "{% macro bigquery__except() %}\n\n    except distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.540286}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.540697}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/replace.sql", "original_file_path": "macros/cross_db_utils/replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n    \n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5408719}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.54119}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/concat.sql", "original_file_path": "macros/cross_db_utils/concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.541321}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542078}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542227}, "macro.dbt_utils.redshift__type_string": {"unique_id": "macro.dbt_utils.redshift__type_string", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "redshift__type_string", "macro_sql": "\n\n{%- macro redshift__type_string() -%}\n    varchar\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542303}, "macro.dbt_utils.postgres__type_string": {"unique_id": "macro.dbt_utils.postgres__type_string", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_string", "macro_sql": "{% macro postgres__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5423748}, "macro.dbt_utils.snowflake__type_string": {"unique_id": "macro.dbt_utils.snowflake__type_string", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_string", "macro_sql": "{% macro snowflake__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542447}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542614}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.54269}, "macro.dbt_utils.postgres__type_timestamp": {"unique_id": "macro.dbt_utils.postgres__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "postgres__type_timestamp", "macro_sql": "{% macro postgres__type_timestamp() %}\n    timestamp without time zone\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5427608}, "macro.dbt_utils.snowflake__type_timestamp": {"unique_id": "macro.dbt_utils.snowflake__type_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "snowflake__type_timestamp", "macro_sql": "{% macro snowflake__type_timestamp() %}\n    timestamp_ntz\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5428312}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.542997}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    float\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543069}, "macro.dbt_utils.bigquery__type_float": {"unique_id": "macro.dbt_utils.bigquery__type_float", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_float", "macro_sql": "{% macro bigquery__type_float() %}\n    float64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543139}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543304}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    numeric(28, 6)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543375}, "macro.dbt_utils.bigquery__type_numeric": {"unique_id": "macro.dbt_utils.bigquery__type_numeric", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_numeric", "macro_sql": "{% macro bigquery__type_numeric() %}\n    numeric\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543446}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5436149}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    bigint\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543689}, "macro.dbt_utils.bigquery__type_bigint": {"unique_id": "macro.dbt_utils.bigquery__type_bigint", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_bigint", "macro_sql": "{% macro bigquery__type_bigint() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5437582}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543923}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    int\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.543995}, "macro.dbt_utils.bigquery__type_int": {"unique_id": "macro.dbt_utils.bigquery__type_int", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datatypes.sql", "original_file_path": "macros/cross_db_utils/datatypes.sql", "name": "bigquery__type_int", "macro_sql": "{% macro bigquery__type_int() %}\n    int64\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.544068}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_relation.sql", "original_file_path": "macros/cross_db_utils/_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.544615}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.544996}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n    \n    length(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.545107}, "macro.dbt_utils.redshift__length": {"unique_id": "macro.dbt_utils.redshift__length", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/length.sql", "original_file_path": "macros/cross_db_utils/length.sql", "name": "redshift__length", "macro_sql": "{% macro redshift__length(expression) %}\n\n    len(\n        {{ expression }}\n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.545217}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5459461}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.546121}, "macro.dbt_utils.bigquery__dateadd": {"unique_id": "macro.dbt_utils.bigquery__dateadd", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "bigquery__dateadd", "macro_sql": "{% macro bigquery__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n        datetime_add(\n            cast( {{ from_date_or_timestamp }} as datetime),\n        interval {{ interval }} {{ datepart }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.546301}, "macro.dbt_utils.postgres__dateadd": {"unique_id": "macro.dbt_utils.postgres__dateadd", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "postgres__dateadd", "macro_sql": "{% macro postgres__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ from_date_or_timestamp }} + ((interval '1 {{ datepart }}') * ({{ interval }}))\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.546465}, "macro.dbt_utils.redshift__dateadd": {"unique_id": "macro.dbt_utils.redshift__dateadd", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/dateadd.sql", "original_file_path": "macros/cross_db_utils/dateadd.sql", "name": "redshift__dateadd", "macro_sql": "{% macro redshift__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    {{ return(dbt_utils.default__dateadd(datepart, interval, from_date_or_timestamp)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.546674}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__intersect"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.547014}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.547091}, "macro.dbt_utils.bigquery__intersect": {"unique_id": "macro.dbt_utils.bigquery__intersect", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/intersect.sql", "original_file_path": "macros/cross_db_utils/intersect.sql", "name": "bigquery__intersect", "macro_sql": "{% macro bigquery__intersect() %}\n\n    intersect distinct\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.547178}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5475872}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.54774}, "macro.dbt_utils.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_utils.snowflake__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.547904}, "macro.dbt_utils.bigquery__escape_single_quotes": {"unique_id": "macro.dbt_utils.bigquery__escape_single_quotes", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/escape_single_quotes.sql", "original_file_path": "macros/cross_db_utils/escape_single_quotes.sql", "name": "bigquery__escape_single_quotes", "macro_sql": "{% macro bigquery__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.54805}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__right"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.548697}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.548863}, "macro.dbt_utils.bigquery__right": {"unique_id": "macro.dbt_utils.bigquery__right", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "bigquery__right", "macro_sql": "{% macro bigquery__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        substr(\n            {{ string_text }},\n            -1 * ({{ length_expression }})\n        )\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.549031}, "macro.dbt_utils.snowflake__right": {"unique_id": "macro.dbt_utils.snowflake__right", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/right.sql", "original_file_path": "macros/cross_db_utils/right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0 \n        then ''\n    else \n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.549209}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__listagg"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.551893}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5523431}, "macro.dbt_utils.bigquery__listagg": {"unique_id": "macro.dbt_utils.bigquery__listagg", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "bigquery__listagg", "macro_sql": "{% macro bigquery__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        {% if limit_num -%}\n        limit {{ limit_num }}\n        {%- endif %}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.552642}, "macro.dbt_utils.postgres__listagg": {"unique_id": "macro.dbt_utils.postgres__listagg", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "postgres__listagg", "macro_sql": "{% macro postgres__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n    \n    {% if limit_num -%}\n    array_to_string(\n        (array_agg(\n            {{ measure }}\n            {% if order_by_clause -%}\n            {{ order_by_clause }}\n            {%- endif %}\n        ))[1:{{ limit_num }}],\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    string_agg(\n        {{ measure }},\n        {{ delimiter_text }}\n        {% if order_by_clause -%}\n        {{ order_by_clause }}\n        {%- endif %}\n        )\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.55308}, "macro.dbt_utils.redshift__listagg": {"unique_id": "macro.dbt_utils.redshift__listagg", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/listagg.sql", "original_file_path": "macros/cross_db_utils/listagg.sql", "name": "redshift__listagg", "macro_sql": "{% macro redshift__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    {% set ns = namespace() %}\n    {% set ns.delimiter_text_regex = delimiter_text|trim(\"'\") %}\n    {% set special_chars %}\\,^,$,.,|,?,*,+,(,),[,],{,}{% endset %}  \n    {%- for char in special_chars.split(',') -%}\n        {% set escape_char %}\\\\{{ char }}{% endset %}\n        {% set ns.delimiter_text_regex = ns.delimiter_text_regex|replace(char,escape_char) %}\n    {%- endfor -%}\n\n    {% set regex %}'([^{{ ns.delimiter_text_regex }}]+{{ ns.delimiter_text_regex }}){1,{{ limit_num - 1}}}[^{{ ns.delimiter_text_regex }}]+'{% endset %}\n    regexp_substr(\n        listagg(\n            {{ measure }},\n            {{ delimiter_text }}\n            )\n            {% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n        ,{{ regex }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.554209}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.557003}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.557179}, "macro.dbt_utils.bigquery__datediff": {"unique_id": "macro.dbt_utils.bigquery__datediff", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "bigquery__datediff", "macro_sql": "{% macro bigquery__datediff(first_date, second_date, datepart) -%}\n\n    datetime_diff(\n        cast({{second_date}} as datetime),\n        cast({{first_date}} as datetime),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5573492}, "macro.dbt_utils.postgres__datediff": {"unique_id": "macro.dbt_utils.postgres__datediff", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "postgres__datediff", "macro_sql": "{% macro postgres__datediff(first_date, second_date, datepart) -%}\n\n    {% if datepart == 'year' %}\n        (date_part('year', ({{second_date}})::date) - date_part('year', ({{first_date}})::date))\n    {% elif datepart == 'quarter' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 4 + date_part('quarter', ({{second_date}})::date) - date_part('quarter', ({{first_date}})::date))\n    {% elif datepart == 'month' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'year') }} * 12 + date_part('month', ({{second_date}})::date) - date_part('month', ({{first_date}})::date))\n    {% elif datepart == 'day' %}\n        (({{second_date}})::date - ({{first_date}})::date)\n    {% elif datepart == 'week' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} / 7 + case\n            when date_part('dow', ({{first_date}})::timestamp) <= date_part('dow', ({{second_date}})::timestamp) then\n                case when {{first_date}} <= {{second_date}} then 0 else -1 end\n            else\n                case when {{first_date}} <= {{second_date}} then 1 else 0 end\n        end)\n    {% elif datepart == 'hour' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'day') }} * 24 + date_part('hour', ({{second_date}})::timestamp) - date_part('hour', ({{first_date}})::timestamp))\n    {% elif datepart == 'minute' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'hour') }} * 60 + date_part('minute', ({{second_date}})::timestamp) - date_part('minute', ({{first_date}})::timestamp))\n    {% elif datepart == 'second' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60 + floor(date_part('second', ({{second_date}})::timestamp)) - floor(date_part('second', ({{first_date}})::timestamp)))\n    {% elif datepart == 'millisecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000 + floor(date_part('millisecond', ({{second_date}})::timestamp)) - floor(date_part('millisecond', ({{first_date}})::timestamp)))\n    {% elif datepart == 'microsecond' %}\n        ({{ dbt_utils.datediff(first_date, second_date, 'minute') }} * 60000000 + floor(date_part('microsecond', ({{second_date}})::timestamp)) - floor(date_part('microsecond', ({{first_date}})::timestamp)))\n    {% else %}\n        {{ exceptions.raise_compiler_error(\"Unsupported datepart for macro datediff in postgres: {!r}\".format(datepart)) }}\n    {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5592809}, "macro.dbt_utils.redshift__datediff": {"unique_id": "macro.dbt_utils.redshift__datediff", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/datediff.sql", "original_file_path": "macros/cross_db_utils/datediff.sql", "name": "redshift__datediff", "macro_sql": "{% macro redshift__datediff(first_date, second_date, datepart) -%}\n\n    {{ return(dbt_utils.default__datediff(first_date, second_date, datepart)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.559514}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.559963}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.560107}, "macro.dbt_utils.snowflake__safe_cast": {"unique_id": "macro.dbt_utils.snowflake__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.560242}, "macro.dbt_utils.bigquery__safe_cast": {"unique_id": "macro.dbt_utils.bigquery__safe_cast", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/safe_cast.sql", "original_file_path": "macros/cross_db_utils/safe_cast.sql", "name": "bigquery__safe_cast", "macro_sql": "{% macro bigquery__safe_cast(field, type) %}\n    safe_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.560371}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.56074}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{field}} as {{dbt_utils.type_string()}}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.560886}, "macro.dbt_utils.bigquery__hash": {"unique_id": "macro.dbt_utils.bigquery__hash", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/hash.sql", "original_file_path": "macros/cross_db_utils/hash.sql", "name": "bigquery__hash", "macro_sql": "{% macro bigquery__hash(field) -%}\n    to_hex({{dbt_utils.default__hash(field)}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5610209}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.561429}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ dbt_utils.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5615768}, "macro.dbt_utils.redshift__cast_bool_to_text": {"unique_id": "macro.dbt_utils.redshift__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/cast_bool_to_text.sql", "original_file_path": "macros/cross_db_utils/cast_bool_to_text.sql", "name": "redshift__cast_bool_to_text", "macro_sql": "{% macro redshift__cast_bool_to_text(field) %}\n    case\n        when {{ field }} is true then 'true'\n        when {{ field }} is false then 'false'\n    end::text\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.561711}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__identifier"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.562283}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.562392}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/identifier.sql", "original_file_path": "macros/cross_db_utils/identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.562494}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.562871}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    \n    any_value({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.562984}, "macro.dbt_utils.postgres__any_value": {"unique_id": "macro.dbt_utils.postgres__any_value", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/any_value.sql", "original_file_path": "macros/cross_db_utils/any_value.sql", "name": "postgres__any_value", "macro_sql": "{% macro postgres__any_value(expression) -%}\n    {#- /*Postgres doesn't support any_value, so we're using min() to get the same result*/ -#}\n    min({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.563092}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__position"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5635478}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n    \n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.563777}, "macro.dbt_utils.bigquery__position": {"unique_id": "macro.dbt_utils.bigquery__position", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/position.sql", "original_file_path": "macros/cross_db_utils/position.sql", "name": "bigquery__position", "macro_sql": "{% macro bigquery__position(substring_text, string_text) %}\n\n    strpos(\n        {{ string_text }},\n        {{ substring_text }}\n        \n    )\n    \n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.563919}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5642502}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/literal.sql", "original_file_path": "macros/cross_db_utils/literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5643551}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.56498}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5651}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565175}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565251}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565421}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{dbt_utils.current_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565535}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{dbt_utils.current_timestamp()}})::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565684}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{dbt_utils.type_timestamp()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565822}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/current_timestamp.sql", "original_file_path": "macros/cross_db_utils/current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.565957}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.567559}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }},\n                    {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.568065}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt_utils.safe_cast(expr, dbt_utils.type_numeric() ) }} %\n                {{ dbt_utils.safe_cast(bin_size, dbt_utils.type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.568615}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/width_bucket.sql", "original_file_path": "macros/cross_db_utils/width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5688288}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.569257}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    \n    bool_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.569373}, "macro.dbt_utils.snowflake__bool_or": {"unique_id": "macro.dbt_utils.snowflake__bool_or", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n    \n    boolor_agg({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.569482}, "macro.dbt_utils.bigquery__bool_or": {"unique_id": "macro.dbt_utils.bigquery__bool_or", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/bool_or.sql", "original_file_path": "macros/cross_db_utils/bool_or.sql", "name": "bigquery__bool_or", "macro_sql": "{% macro bigquery__bool_or(expression) -%}\n    \n    logical_or({{ expression }})\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.56959}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.570265}, "macro.dbt_utils.default_last_day": {"unique_id": "macro.dbt_utils.default_last_day", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default_last_day", "macro_sql": "\n\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd(datepart, '1', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.570796}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.570951}, "macro.dbt_utils.postgres__last_day": {"unique_id": "macro.dbt_utils.postgres__last_day", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "postgres__last_day", "macro_sql": "{% macro postgres__last_day(date, datepart) -%}\n\n    {%- if datepart == 'quarter' -%}\n    -- postgres dateadd does not support quarter interval.\n    cast(\n        {{dbt_utils.dateadd('day', '-1',\n        dbt_utils.dateadd('month', '3', dbt_utils.date_trunc(datepart, date))\n        )}}\n        as date)\n    {%- else -%}\n    {{dbt_utils.default_last_day(date, datepart)}}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.date_trunc", "macro.dbt_utils.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5713768}, "macro.dbt_utils.redshift__last_day": {"unique_id": "macro.dbt_utils.redshift__last_day", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/last_day.sql", "original_file_path": "macros/cross_db_utils/last_day.sql", "name": "redshift__last_day", "macro_sql": "{% macro redshift__last_day(date, datepart) %}\n\n    {{ return(dbt_utils.default__last_day(date, datepart)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.571564}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.573208}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5733829}, "macro.dbt_utils._split_part_negative": {"unique_id": "macro.dbt_utils._split_part_negative", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.57362}, "macro.dbt_utils.postgres__split_part": {"unique_id": "macro.dbt_utils.postgres__split_part", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "postgres__split_part", "macro_sql": "{% macro postgres__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5739782}, "macro.dbt_utils.redshift__split_part": {"unique_id": "macro.dbt_utils.redshift__split_part", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "redshift__split_part", "macro_sql": "{% macro redshift__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    {{ dbt_utils.default__split_part(string_text, delimiter_text, part_number) }}\n  {% else %}\n    {{ dbt_utils._split_part_negative(string_text, delimiter_text, part_number) }}\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part", "macro.dbt_utils._split_part_negative"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.574332}, "macro.dbt_utils.bigquery__split_part": {"unique_id": "macro.dbt_utils.bigquery__split_part", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/split_part.sql", "original_file_path": "macros/cross_db_utils/split_part.sql", "name": "bigquery__split_part", "macro_sql": "{% macro bigquery__split_part(string_text, delimiter_text, part_number) %}\n\n  {% if part_number >= 0 %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset({{ part_number - 1 }})]\n  {% else %}\n    split(\n        {{ string_text }},\n        {{ delimiter_text }}\n        )[safe_offset(\n          length({{ string_text }}) \n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 1\n        )]\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.5747159}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.575132}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.575265}, "macro.dbt_utils.bigquery__date_trunc": {"unique_id": "macro.dbt_utils.bigquery__date_trunc", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/date_trunc.sql", "original_file_path": "macros/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(datepart, date) -%}\n    timestamp_trunc(\n        cast({{date}} as timestamp),\n        {{datepart}}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.575402}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/cross_db_utils/_is_ephemeral.sql", "original_file_path": "macros/cross_db_utils/_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.576353}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.582779}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{dbt_utils.dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\")}},\n            {{dbt_utils.current_timestamp()}}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{dbt_utils.datediff('start_timestamp',\n                           'stop_timestamp',\n                           period)}}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.583343}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.58369}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.584223}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/materializations/insert_by_period_materialization.sql", "original_file_path": "macros/materializations/insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n    \n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}  \n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.611851}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6124642}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_host.sql", "original_file_path": "macros/web/get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    dbt_utils.split_part(\n        dbt_utils.split_part(\n            dbt_utils.replace(\n                dbt_utils.replace(\n                    dbt_utils.replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt_utils.safe_cast(\n        parsed,\n        dbt_utils.type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6130402}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6136389}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_path.sql", "original_file_path": "macros/web/get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url = \n        dbt_utils.replace(\n            dbt_utils.replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{dbt_utils.position(\"'/'\", stripped_url)}}, 0),\n            {{dbt_utils.position(\"'?'\", stripped_url)}} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        dbt_utils.split_part(\n            dbt_utils.right(\n                stripped_url, \n                dbt_utils.length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ), \n            \"'?'\", 1\n            )\n    -%}\n\n    {{ dbt_utils.safe_cast(\n        parsed_path,\n        dbt_utils.type_string()\n    )}}\n    \n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.614381}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.614798}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/web/get_url_parameter.sql", "original_file_path": "macros/web/get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = dbt_utils.split_part(dbt_utils.split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.615146}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.615755}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/fewer_rows_than.sql", "original_file_path": "macros/generic_tests/fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.616}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6164749}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equal_rowcount.sql", "original_file_path": "macros/generic_tests/equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.616798}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.617523}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/relationships_where.sql", "original_file_path": "macros/generic_tests/relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6178901}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.618367}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/recency.sql", "original_file_path": "macros/generic_tests/recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dbt_utils.dateadd(datepart, interval * -1, dbt_utils.current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6187332}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6191208}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_constant.sql", "original_file_path": "macros/generic_tests/not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.619301}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.619984}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/accepted_range.sql", "original_file_path": "macros/generic_tests/accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6205618}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6212008}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_accepted_values.sql", "original_file_path": "macros/generic_tests/not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.621613}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6221042}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_unique_where.sql", "original_file_path": "macros/generic_tests/test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.622284}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.622698}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/at_least_one.sql", "original_file_path": "macros/generic_tests/at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.62289}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.623609}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/unique_combination_of_columns.sql", "original_file_path": "macros/generic_tests/unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.624299}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6249259}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/cardinality_equality.sql", "original_file_path": "macros/generic_tests/cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ dbt_utils.except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ dbt_utils.except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.625293}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.625837}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/expression_is_true.sql", "original_file_path": "macros/generic_tests/expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6261508}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.626652}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/not_null_proportion.sql", "original_file_path": "macros/generic_tests/not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.627208}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6279612}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/sequential_values.sql", "original_file_path": "macros/generic_tests/sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ dbt_utils.type_timestamp() }})= cast({{ dbt_utils.dateadd(datepart, interval, previous_column_name) }} as {{ dbt_utils.type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6286469}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6291358}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/test_not_null_where.sql", "original_file_path": "macros/generic_tests/test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6293151}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.630147}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/equality.sql", "original_file_path": "macros/generic_tests/equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ dbt_utils.except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.631221}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6346219}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/generic_tests/mutually_exclusive_ranges.sql", "original_file_path": "macros/generic_tests/mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.636248}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.636601}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_log_format.sql", "original_file_path": "macros/jinja_helpers/pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.636791}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.637151}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/pretty_time.sql", "original_file_path": "macros/jinja_helpers/pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.637365}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.637694}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/log_info.sql", "original_file_path": "macros/jinja_helpers/log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.637899}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/jinja_helpers/slugify.sql", "original_file_path": "macros/jinja_helpers/slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.638464}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6392589}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{dbt_utils.datediff(start_date, end_date, datepart)}}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6399019}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6401658}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/date_spine.sql", "original_file_path": "macros/sql/date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dbt_utils.dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.640554}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.640956}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck_table.sql", "original_file_path": "macros/sql/nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.641338}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.64213}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_pattern.sql", "original_file_path": "macros/sql/get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.643115}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.644059}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.644532}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6447392}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/generate_series.sql", "original_file_path": "macros/sql/generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6452968}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6461}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_relations_by_prefix.sql", "original_file_path": "macros/sql/get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6470342}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.647524}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_prefix_sql.sql", "original_file_path": "macros/sql/get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.647851}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.648559}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/star.sql", "original_file_path": "macros/sql/star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {% endif %}\n\n    {%- for col in dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n        {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n        {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n\n    {%- endfor -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.649485}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.651465}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/unpivot.sql", "original_file_path": "macros/sql/unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ dbt_utils.type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ dbt_utils.cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.653731}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.656627}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/union.sql", "original_file_path": "macros/sql/union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                cast({{ dbt_utils.string_literal(relation) }} as {{ dbt_utils.type_string() }}) as {{ source_column_name }},\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.65983}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6602108}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/groupby.sql", "original_file_path": "macros/sql/groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.660477}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.663158}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.663393}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.663606}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.66382}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.663998}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/deduplicate.sql", "original_file_path": "macros/sql/deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6641889}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.664877}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/surrogate_key.sql", "original_file_path": "macros/sql/surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ dbt_utils.type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{dbt_utils.hash(dbt_utils.concat(fields))}}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.665942}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.666444}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/safe_add.sql", "original_file_path": "macros/sql/safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.666763}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.667413}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/nullcheck.sql", "original_file_path": "macros/sql/nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.66782}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6696289}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as \"table_schema\",\n            table_name as \"table_name\",\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.669951}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.670866}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_tables_by_pattern_sql.sql", "original_file_path": "macros/sql/get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.671434}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.672705}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_column_values.sql", "original_file_path": "macros/sql/get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.674392}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.675606}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/pivot.sql", "original_file_path": "macros/sql/pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt_utils.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.676527}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6772852}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_filtered_columns_in_relation.sql", "original_file_path": "macros/sql/get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.678163}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.678708}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_query_results_as_dict.sql", "original_file_path": "macros/sql/get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.679381}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.679948}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.680046}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as \"table_type\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.680136}, "macro.dbt_utils.bigquery__get_table_types_sql": {"unique_id": "macro.dbt_utils.bigquery__get_table_types_sql", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/get_table_types_sql.sql", "original_file_path": "macros/sql/get_table_types_sql.sql", "name": "bigquery__get_table_types_sql", "macro_sql": "{% macro bigquery__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as `table_type`\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6802292}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.681386}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.bigquery__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6817122}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.682354}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "/Users/skinner/Github/dbt/dbt_packages/dbt_utils", "path": "macros/sql/haversine_distance.sql", "original_file_path": "macros/sql/haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.683323}, "macro.codegen.generate_model_yaml": {"unique_id": "macro.codegen.generate_model_yaml", "package_name": "codegen", "root_path": "/Users/skinner/Github/dbt/dbt_packages/codegen", "path": "macros/generate_model_yaml.sql", "original_file_path": "macros/generate_model_yaml.sql", "name": "generate_model_yaml", "macro_sql": "{% macro generate_model_yaml(model_name) %}\n\n{% set model_yaml=[] %}\n\n{% do model_yaml.append('version: 2') %}\n{% do model_yaml.append('') %}\n{% do model_yaml.append('models:') %}\n{% do model_yaml.append('  - name: ' ~ model_name | lower) %}\n{% do model_yaml.append('    description: \"\"') %}\n{% do model_yaml.append('    columns:') %}\n\n{% set relation=ref(model_name) %}\n{%- set columns = adapter.get_columns_in_relation(relation) -%}\n\n{% for column in columns %}\n    {% do model_yaml.append('      - name: ' ~ column.name | lower ) %}\n    {% do model_yaml.append('        description: \"\"') %}\n    {% do model_yaml.append('') %}\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = model_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.684909}, "macro.codegen.generate_base_model": {"unique_id": "macro.codegen.generate_base_model", "package_name": "codegen", "root_path": "/Users/skinner/Github/dbt/dbt_packages/codegen", "path": "macros/generate_base_model.sql", "original_file_path": "macros/generate_base_model.sql", "name": "generate_base_model", "macro_sql": "{% macro generate_base_model(source_name, table_name, leading_commas=False) %}\n\n{%- set source_relation = source(source_name, table_name) -%}\n\n{%- set columns = adapter.get_columns_in_relation(source_relation) -%}\n{% set column_names=columns | map(attribute='name') %}\n{% set base_model_sql %}\nwith source as (\n\n    select * from {% raw %}{{ source({% endraw %}'{{ source_name }}', '{{ table_name }}'{% raw %}) }}{% endraw %}\n\n),\n\nrenamed as (\n\n    select\n        {%- if leading_commas -%}\n        {%- for column in column_names %}\n        {{\", \" if not loop.first}}{{ column | lower }}\n        {%- endfor %}\n        {%- else -%}\n        {%- for column in column_names %}\n        {{ column | lower }}{{\",\" if not loop.last}}\n        {%- endfor -%}\n        {%- endif %}\n\n    from source\n\n)\n\nselect * from renamed\n{% endset %}\n\n{% if execute %}\n\n{{ log(base_model_sql, info=True) }}\n{% do return(base_model_sql) %}\n\n{% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6864152}, "macro.codegen.get_tables_in_schema": {"unique_id": "macro.codegen.get_tables_in_schema", "package_name": "codegen", "root_path": "/Users/skinner/Github/dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "get_tables_in_schema", "macro_sql": "{% macro get_tables_in_schema(schema_name, database_name=target.database, table_pattern='%', exclude='') %}\n    \n    {% set tables=dbt_utils.get_relations_by_pattern(\n        schema_pattern=schema_name,\n        database=database_name,\n        table_pattern=table_pattern,\n        exclude=exclude\n    ) %}\n\n    {% set table_list= tables | map(attribute='identifier') %}\n\n    {{ return(table_list | sort) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.6881359}, "macro.codegen.generate_source": {"unique_id": "macro.codegen.generate_source", "package_name": "codegen", "root_path": "/Users/skinner/Github/dbt/dbt_packages/codegen", "path": "macros/generate_source.sql", "original_file_path": "macros/generate_source.sql", "name": "generate_source", "macro_sql": "{% macro generate_source(schema_name, database_name=target.database, generate_columns=False, include_descriptions=False, table_pattern='%', exclude='') %}\n\n{% set sources_yaml=[] %}\n\n{% do sources_yaml.append('version: 2') %}\n{% do sources_yaml.append('') %}\n{% do sources_yaml.append('sources:') %}\n{% do sources_yaml.append('  - name: ' ~ schema_name | lower) %}\n\n{% if database_name != target.database %}\n{% do sources_yaml.append('    database: ' ~ database_name | lower) %}\n{% endif %}\n\n{% do sources_yaml.append('    tables:') %}\n\n{% set tables=codegen.get_tables_in_schema(schema_name, database_name, table_pattern, exclude) %}\n\n{% for table in tables %}\n    {% do sources_yaml.append('      - name: ' ~ table | lower ) %}\n\n    {% if generate_columns %}\n    {% do sources_yaml.append('        columns:') %}\n\n        {% set table_relation=api.Relation.create(\n            database=database_name,\n            schema=schema_name,\n            identifier=table\n        ) %}\n\n        {% set columns=adapter.get_columns_in_relation(table_relation) %}\n\n        {% for column in columns %}\n            {% do sources_yaml.append('          - name: ' ~ column.name | lower ) %}\n            {% if include_descriptions %}\n                {% do sources_yaml.append('            description: \"\"' ) %}\n            {% endif %}\n        {% endfor %}\n            {% do sources_yaml.append('') %}\n\n    {% endif %}\n\n{% endfor %}\n\n{% if execute %}\n\n    {% set joined = sources_yaml | join ('\\n') %}\n    {{ log(joined, info=True) }}\n    {% do return(joined) %}\n\n{% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.codegen.get_tables_in_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.690094}, "macro.elementary.test_all_columns_anomalies": {"unique_id": "macro.elementary.test_all_columns_anomalies", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "name": "test_all_columns_anomalies", "macro_sql": "{% test all_columns_anomalies(model, column_anomalies = none, exclude_prefix = none, exclude_regexp = none, timestamp_column = none, sensitivity = none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {%- if execute %}\n        {%- set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{- elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {%- set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {%- set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{- elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {%- set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get all columns configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {%- if not model_relation %}\n            {{- elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{- return(elementary.no_results_query()) }}\n        {%- endif %}\n\n        {% if not timestamp_column %}\n            {%- set timestamp_column = elementary.get_timestamp_column_from_graph(model) %}\n        {% endif %}\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{- elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set column_objs_and_monitors = elementary.get_all_column_obj_and_monitors(model_relation, column_anomalies) -%}\n\n        {#- execute table monitors and write to temp test table -#}\n        {%- set monitors = [] %}\n        {%- if column_objs_and_monitors | length > 0 %}\n            {{- elementary.test_log('start', full_table_name, 'all columns') }}\n            {%- set empty_table_query = elementary.empty_data_monitoring_metrics() %}\n            {%- do elementary.create_or_replace(False, temp_table_relation, empty_table_query) %}\n            {%- for column_obj_and_monitors in column_objs_and_monitors %}\n                {%- set column_obj = column_obj_and_monitors['column'] %}\n                {%- set column_monitors = column_obj_and_monitors['monitors'] %}\n                {%- set column_name = column_obj.name -%}\n                {%- set ignore_column = elementary.should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n                {%- if not ignore_column -%}\n                    {%- do monitors.extend(column_monitors) -%}\n                    {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name, column_monitors, column_name) ~ \"'\" %}\n                    {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n                    {{ elementary.test_log('start', full_table_name, column_name) }}\n                    {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n                    {%- do run_query(elementary.insert_as_select(temp_table_relation, column_monitoring_query)) -%}\n                {%- else -%}\n                    {{ elementary.debug_log('column ' ~ column_name ~ ' is excluded') }}\n                {%- endif -%}\n            {%- endfor %}\n        {%- endif %}\n        {%- set all_columns_monitors = monitors | unique | list %}\n        {#- query if there is an anomaly in recent metrics -#}\n        {%- set anomaly_query = elementary.get_anomaly_query(temp_table_relation, full_table_name, all_columns_monitors, columns_only=true, sensitivity=sensitivity) %}\n        {%- set temp_alerts_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomalies') %}\n        {{- elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_alerts_table_name) }}\n        {%- set anomalies_temp_table_exists, anomalies_temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_alerts_table_name,\n                                                                                   type='table') -%}\n        {%- do elementary.create_or_replace(False, anomalies_temp_table_relation, anomaly_query) %}\n\n        {{- elementary.test_log('end', full_table_name, 'all columns') }}\n\n        {# return anomalies query as standard test query #}\n        select * from {{ anomalies_temp_table_relation }}\n\n    {%- else %}\n\n        {{- elementary.test_log('no_monitors', full_table_name, 'all columns') }}\n        {#- test must run an sql query -#}\n        {{- elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_timestamp_column_from_graph", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_all_column_obj_and_monitors", "macro.elementary.empty_data_monitoring_metrics", "macro.elementary.create_or_replace", "macro.elementary.should_ignore_column", "macro.elementary.get_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.dbt.run_query", "macro.elementary.insert_as_select", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.696886}, "macro.elementary.should_ignore_column": {"unique_id": "macro.elementary.should_ignore_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_all_columns_anomalies.sql", "original_file_path": "macros/edr/tests/test_all_columns_anomalies.sql", "name": "should_ignore_column", "macro_sql": "\n\n{%- macro should_ignore_column(column_name, exclude_regexp, exclude_prefix) -%}\n    {%- set regex_module = modules.re -%}\n    {%- if exclude_regexp -%}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {% if exclude_prefix %}\n        {%- set exclude_regexp = '^' ~ exclude_prefix ~ '.*' %}\n        {%- set is_match = regex_module.match(exclude_regexp, column_name, regex_module.IGNORECASE) %}\n        {%- if is_match -%}\n            {{ return(True) }}\n        {%- endif -%}\n    {%- endif -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.69765}, "macro.elementary.test_schema_changes": {"unique_id": "macro.elementary.test_schema_changes", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_schema_changes.sql", "original_file_path": "macros/edr/tests/test_schema_changes.sql", "name": "test_schema_changes", "macro_sql": "{% test schema_changes(model) %}\n    -- depends_on: {{ ref('alerts_schema_changes') }}\n    -- depends_on: {{ ref('table_changes') }}\n    -- depends_on: {{ ref('column_changes') }}\n    {% if execute %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {# creates temp relation for test metrics #}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {% set temp_schema_changes_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__schema_changes') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_schema_changes_table_name) }}\n        {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_schema_changes_table_name,\n                                                                                   type='table') -%}\n\n        {# get table configuration #}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n        {%- set last_schema_change_alert_time = elementary.get_last_schema_changes_alert_time() %}\n\n        {# query if there were schema changes since last execution #}\n        {% set schema_changes_alert_query = elementary.get_schema_changes_alert_query(full_table_name, last_schema_change_alert_time) %}\n        {% set temp_alerts_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__schema_changes_alerts') %}\n        {{ elementary.debug_log('schema alerts table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_alerts_table_name) }}\n        {% set alerts_temp_table_exists, alerts_temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_alerts_table_name,\n                                                                                   type='table') -%}\n        {% do elementary.create_or_replace(False, alerts_temp_table_relation, schema_changes_alert_query) %}\n        {# return schema changes query as standard test query #}\n        select * from {{ alerts_temp_table_relation }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_last_schema_changes_alert_time", "macro.elementary.get_schema_changes_alert_query", "macro.elementary.create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.700622}, "macro.elementary.test_column_anomalies": {"unique_id": "macro.elementary.test_column_anomalies", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_column_anomalies.sql", "original_file_path": "macros/edr/tests/test_column_anomalies.sql", "name": "test_column_anomalies", "macro_sql": "{% test column_anomalies(model, column_name, column_anomalies, timestamp_column=none, sensitivity=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {%- if execute %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {%- set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get column configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n\n        {% if not timestamp_column %}\n            {%- set timestamp_column = elementary.get_timestamp_column_from_graph(model) %}\n        {% endif %}\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set column_obj_and_monitors = elementary.get_column_obj_and_monitors(model, column_name, column_anomalies) -%}\n        {%- if not column_obj_and_monitors -%}\n            {{ elementary.edr_log('column ' ~ column_name ~ ' object was not found') }}\n            {{ return(elementary.no_results_query()) }}\n        {%- endif -%}\n        {%- set column_monitors = column_obj_and_monitors['monitors'] -%}\n        {%- set column_obj = column_obj_and_monitors['column'] -%}\n        {{ elementary.debug_log('column_monitors - ' ~ column_monitors) }}\n        {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name, column_monitors, column_name) ~ \"'\" %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name, column_name) }}\n        {%- set column_monitoring_query = elementary.column_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n        {{ elementary.debug_log('column_monitoring_query - \\n' ~ column_monitoring_query) }}\n        {%- do elementary.create_or_replace(False, temp_table_relation, column_monitoring_query) %}\n\n        {#- query if there is an anomaly in recent metrics -#}\n        {%- set temp_table_name = elementary.relation_to_full_name(temp_table_relation) %}\n        {% set anomaly_query = elementary.get_anomaly_query(temp_table_relation, full_table_name, column_monitors, column_name, sensitivity=sensitivity) %}\n        {{ elementary.debug_log('anomaly_query - \\n' ~ anomaly_query) }}\n        {%- set temp_alerts_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomalies') %}\n        {{ elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_alerts_table_name) }}\n        {% set anomalies_temp_table_exists, anomalies_temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_alerts_table_name,\n                                                                                   type='table') -%}\n        {%- do elementary.create_or_replace(False, anomalies_temp_table_relation, anomaly_query) %}\n        {{ elementary.test_log('end', full_table_name, column_name) }}\n\n        {# return anomalies query as standart test query #}\n        select * from {{ anomalies_temp_table_relation }}\n    \n    {%- else %}\n\n        {#- test must run an sql query -#}\n        {{ elementary.test_log('no_monitors', full_table_name, column_name) }}\n        {{ elementary.no_results_query() }}\n\n    {%- endif %}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_timestamp_column_from_graph", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_column_obj_and_monitors", "macro.elementary.edr_log", "macro.elementary.get_min_bucket_start", "macro.elementary.column_monitoring_query", "macro.elementary.create_or_replace", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7065542}, "macro.elementary.test_table_anomalies": {"unique_id": "macro.elementary.test_table_anomalies", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_table_anomalies.sql", "original_file_path": "macros/edr/tests/test_table_anomalies.sql", "name": "test_table_anomalies", "macro_sql": "{% test table_anomalies(model, table_anomalies, freshness_column=none, timestamp_column=none, sensitivity=none) %}\n    -- depends_on: {{ ref('monitors_runs') }}\n    -- depends_on: {{ ref('data_monitoring_metrics') }}\n    -- depends_on: {{ ref('alerts_data_monitoring') }}\n    -- depends_on: {{ ref('metrics_anomaly_score') }}\n    {% if execute %}\n        {% set test_name_in_graph = elementary.get_test_name_in_graph() %}\n        {{ elementary.debug_log('collecting metrics for test: ' ~ test_name_in_graph) }}\n        {#- creates temp relation for test metrics -#}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- set temp_metrics_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__metrics') %}\n        {{ elementary.debug_log('metrics table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_metrics_table_name) }}\n        {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_metrics_table_name,\n                                                                                   type='table') -%}\n\n        {#- get table configuration -#}\n        {%- set full_table_name = elementary.relation_to_full_name(model) %}\n        {%- set model_relation = dbt.load_relation(model) %}\n        {% if not model_relation %}\n            {{ elementary.test_log('monitored_table_not_found', full_table_name) }}\n            {{ return(elementary.no_results_query()) }}\n        {% endif %}\n\n        {% if not timestamp_column %}\n            {%- set timestamp_column = elementary.get_timestamp_column_from_graph(model) %}\n        {% endif %}\n        {%- set timestamp_column_data_type = elementary.find_normalized_data_type_for_column(model, timestamp_column) %}\n        {{ elementary.debug_log('timestamp_column - ' ~ timestamp_column) }}\n        {{ elementary.debug_log('timestamp_column_data_type - ' ~ timestamp_column_data_type) }}\n        {%- set is_timestamp = elementary.get_is_column_timestamp(model_relation, timestamp_column, timestamp_column_data_type) %}\n        {{ elementary.debug_log('is_timestamp - ' ~ is_timestamp) }}\n\n        {%- set table_monitors = elementary.get_final_table_monitors(table_anomalies) %}\n        {{ elementary.debug_log('table_monitors - ' ~ table_monitors) }}\n        {%- set min_bucket_start = \"'\" ~ elementary.get_min_bucket_start(full_table_name,table_monitors) ~ \"'\" %}\n        {{ elementary.debug_log('min_bucket_start - ' ~ min_bucket_start) }}\n        {#- execute table monitors and write to temp test table -#}\n        {{ elementary.test_log('start', full_table_name) }}\n        {%- set table_monitoring_query = elementary.table_monitoring_query(model_relation, timestamp_column, is_timestamp, min_bucket_start, table_monitors, freshness_column) %}\n        {{ elementary.debug_log('table_monitoring_query - \\n' ~ table_monitoring_query) }}\n        {%- do elementary.create_or_replace(False, temp_table_relation, table_monitoring_query) %}\n\n        {#- query if there is an anomaly in recent metrics -#}\n        {% set anomaly_query = elementary.get_anomaly_query(temp_table_relation, full_table_name, table_monitors, sensitivity=sensitivity) %}\n        {{ elementary.debug_log('table monitors anomaly query - \\n' ~ anomaly_query) }}\n        {%- set temp_alerts_table_name = elementary.table_name_with_suffix(test_name_in_graph, '__anomalies') %}\n        {{ elementary.debug_log('anomalies table: ' ~ database_name ~ '.' ~ schema_name ~ '.' ~ temp_alerts_table_name) }}\n        {% set anomalies_temp_table_exists, anomalies_temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                                   schema=schema_name,\n                                                                                   identifier=temp_alerts_table_name,\n                                                                                   type='table') -%}\n        {% do elementary.create_or_replace(False, anomalies_temp_table_relation, anomaly_query) %}\n        {{ elementary.test_log('end', full_table_name) }}\n\n        {# return anomalies query as standard test query #}\n        select * from {{ anomalies_temp_table_relation }}\n\n    {% else %}\n\n        {# test must run an sql query #}\n        {{ elementary.test_log('no_monitors', full_table_name) }}\n        {{ elementary.no_results_query() }}\n\n    {% endif %}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_name_in_graph", "macro.elementary.debug_log", "macro.elementary.get_package_database_and_schema", "macro.elementary.table_name_with_suffix", "macro.dbt.get_or_create_relation", "macro.elementary.relation_to_full_name", "macro.dbt.load_relation", "macro.elementary.test_log", "macro.elementary.no_results_query", "macro.elementary.get_timestamp_column_from_graph", "macro.elementary.find_normalized_data_type_for_column", "macro.elementary.get_is_column_timestamp", "macro.elementary.get_final_table_monitors", "macro.elementary.get_min_bucket_start", "macro.elementary.table_monitoring_query", "macro.elementary.create_or_replace", "macro.elementary.get_anomaly_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.711703}, "macro.elementary.get_test_unique_id": {"unique_id": "macro.elementary.get_test_unique_id", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_unique_id.sql", "name": "get_test_unique_id", "macro_sql": "{% macro get_test_unique_id() %}\n    {% set test_unique_id = model.get('unique_id') %}\n    {{ return(test_unique_id) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.712031}, "macro.elementary.get_timestamp_column_from_graph": {"unique_id": "macro.elementary.get_timestamp_column_from_graph", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_timestamp_column_from_graph.sql", "original_file_path": "macros/edr/tests/test_utils/get_timestamp_column_from_graph.sql", "name": "get_timestamp_column_from_graph", "macro_sql": "{% macro get_timestamp_column_from_graph(model_relation) %}\n    {% set table_config = {} %}\n    {% if execute %}\n        {# model here is actually the test node in the graph #}\n        {% set test_depends_on_unique_ids = model.depends_on.nodes %}\n        {# model relation is the relation object of the model where the test is defined #}\n        {% set model_name = model_relation.name | lower %}\n        {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n        {% if depends_on_nodes %}\n            {% for node in depends_on_nodes %}\n                {% if node.name | lower == model_name %}\n                    {% set elementary_config = elementary.get_elementary_config_from_node(node) %}\n                    {% if elementary_config and elementary_config is mapping %}\n                        {{ return(elementary_config.get('timestamp_column')) }}\n                    {% endif %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids", "macro.elementary.get_elementary_config_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7133272}, "macro.elementary.find_normalized_data_type_for_column": {"unique_id": "macro.elementary.find_normalized_data_type_for_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "original_file_path": "macros/edr/tests/test_utils/find_normalized_data_type_for_column.sql", "name": "find_normalized_data_type_for_column", "macro_sql": "{% macro find_normalized_data_type_for_column(model_relation, column_name) %}\n\n{% set columns_from_relation = adapter.get_columns_in_relation(model_relation) %}\n{% if columns_from_relation and columns_from_relation is iterable %}\n    {% for column_obj in columns_from_relation %}\n        {% if column_obj.column | lower == column_name | lower %}\n            {{ return(elementary.normalize_data_type(column_obj.dtype)) }}\n        {% endif %}\n    {% endfor %}\n{% endif %}\n{{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.714061}, "macro.elementary.get_test_execution_id": {"unique_id": "macro.elementary.get_test_execution_id", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_execution_id.sql", "name": "get_test_execution_id", "macro_sql": "{% macro get_test_execution_id() %}\n    {{ return(elementary.get_node_execution_id(model)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7143118}, "macro.elementary.get_anomaly_sensitivity": {"unique_id": "macro.elementary.get_anomaly_sensitivity", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_anomaly_sensitivity.sql", "original_file_path": "macros/edr/tests/test_utils/get_anomaly_sensitivity.sql", "name": "get_anomaly_sensitivity", "macro_sql": "{% macro get_anomaly_sensitivity(sensitivity) %}\n    {% if sensitivity %}\n        {{ return(sensitivity) }}\n    {% else %}\n        {{ return(elementary.get_config_var('anomaly_sensitivity')) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.714716}, "macro.elementary.get_test_name_in_graph": {"unique_id": "macro.elementary.get_test_name_in_graph", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/test_utils/get_test_name_in_graph.sql", "original_file_path": "macros/edr/tests/test_utils/get_test_name_in_graph.sql", "name": "get_test_name_in_graph", "macro_sql": "{% macro get_test_name_in_graph() %}\n    {% set test_name_in_graph = model.name %}\n    {{ return(test_name_in_graph) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.714989}, "macro.elementary.union_metrics_query": {"unique_id": "macro.elementary.union_metrics_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "original_file_path": "macros/edr/tests/on_run_end/union_metrics_query.sql", "name": "union_metrics_query", "macro_sql": "{% macro union_metrics_query(temp_metrics_tables) %}\n    {%- if temp_metrics_tables | length > 0 %}\n        {%- set union_temp_query -%}\n            with union_temps_metrics as (\n            {%- for temp_table in temp_metrics_tables -%}\n                select * from {{- temp_table -}}\n                {%- if not loop.last %} union all {% endif %}\n            {%- endfor %}\n            ),\n            metrics_with_duplicates as (\n                select *,\n                    row_number() over (partition by id order by updated_at desc) as row_number\n                from union_temps_metrics\n            )\n            select\n                id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at\n            from metrics_with_duplicates\n            where row_number = 1\n        {%- endset %}\n        {{ return(union_temp_query) }}\n    {%- endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7159529}, "macro.elementary.handle_test_results": {"unique_id": "macro.elementary.handle_test_results", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "handle_test_results", "macro_sql": "{% macro handle_test_results(results) %}\n    {% if execute and flags.WHICH in ['test', 'build'] %}\n        {% set test_metrics_tables = [] %}\n        {% set anomaly_alerts = [] %}\n        {% set schema_change_alerts = [] %}\n        {% set dbt_test_alerts = [] %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% for result in results | selectattr('node.resource_type', '==', 'test') %}\n            {% set status = result.status | lower %}\n            {% set run_result_dict = result.to_dict() %}\n            {% set test_node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n            {% set flatten_test_node = elementary.flatten_test(test_node) %}\n            {% if flatten_test_node.test_namespace == 'elementary' and status != 'error' %}\n                {% set test_row_dicts = [] %}\n                {% if status != 'pass' %}\n                    {% set test_row_dicts = elementary.get_test_result_rows_as_dicts(flatten_test_node) %}\n                {% endif %}\n                {% if flatten_test_node.short_name in ['table_anomalies', 'column_anomalies', 'all_columns_anomalies'] %}\n                    {% set test_metrics_table = elementary.get_test_metrics_table(database_name, schema_name, flatten_test_node) %}\n                    {% if test_metrics_table %}\n                        {% do test_metrics_tables.append(test_metrics_table) %}\n                    {% endif %}\n                    {% for test_row_dict in test_row_dicts %}\n                        {% do anomaly_alerts.append(elementary.convert_anomaly_dict_to_alert(run_result_dict,\n                                                                                             test_row_dict,\n                                                                                             flatten_test_node)) %}\n                    {% endfor %}\n                {% elif flatten_test_node.short_name == 'schema_changes' %}\n                    {% for test_row_dict in test_row_dicts %}\n                        {% do schema_change_alerts.append(elementary.convert_schema_change_dict_to_alert(run_result_dict,\n                                                                                                         test_row_dict,\n                                                                                                         flatten_test_node)) %}\n                    {% endfor %}\n                {% endif %}\n            {% elif status != 'pass' %}\n                {% do dbt_test_alerts.append(elementary.convert_dbt_test_to_alert(run_result_dict,\n                                                                                  flatten_test_node)) %}\n            {% endif %}\n        {% endfor %}\n        {{ elementary.merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) }}\n        {% do elementary.insert_test_alerts(database_name, schema_name, 'alerts_data_monitoring', anomaly_alerts) %}\n        {% do elementary.insert_test_alerts(database_name, schema_name, 'alerts_schema_changes', schema_change_alerts) %}\n        {% do elementary.insert_test_alerts(database_name, schema_name, 'alerts_dbt_tests', dbt_test_alerts) %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.safe_get_with_default", "macro.elementary.flatten_test", "macro.elementary.get_test_result_rows_as_dicts", "macro.elementary.get_test_metrics_table", "macro.elementary.convert_anomaly_dict_to_alert", "macro.elementary.convert_schema_change_dict_to_alert", "macro.elementary.convert_dbt_test_to_alert", "macro.elementary.merge_data_monitoring_metrics", "macro.elementary.insert_test_alerts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7411551}, "macro.elementary.insert_test_alerts": {"unique_id": "macro.elementary.insert_test_alerts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "insert_test_alerts", "macro_sql": "{% macro insert_test_alerts(database_name, schema_name, alerts_table_name, alert_list) %}\n    {% if alert_list %}\n        {%- set alerts_table_relation = adapter.get_relation(database=database_name,\n                                                             schema=schema_name,\n                                                             identifier=alerts_table_name) %}\n        {% do elementary.insert_dicts(alerts_table_relation, alert_list) %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insert_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.741596}, "macro.elementary.convert_anomaly_dict_to_alert": {"unique_id": "macro.elementary.convert_anomaly_dict_to_alert", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "convert_anomaly_dict_to_alert", "macro_sql": "{% macro convert_anomaly_dict_to_alert(run_result_dict, anomaly_dict, test_node) %}\n    {% set split_full_table_name = elementary.insensitive_get_dict_value(anomaly_dict, 'full_table_name', '').split('.') %}\n    {% set database_name = split_full_table_name[0] %}\n    {% set schema_name = split_full_table_name[1] %}\n    {% set table_name = split_full_table_name[2] %}\n    {% set alert_dict = {\n        'alert_id': elementary.insensitive_get_dict_value(anomaly_dict, 'id'),\n        'data_issue_id': elementary.insensitive_get_dict_value(anomaly_dict, 'metric_id'),\n        'test_execution_id': elementary.insensitive_get_dict_value(anomaly_dict, 'test_execution_id'),\n        'test_unique_id': elementary.insensitive_get_dict_value(anomaly_dict, 'test_unique_id'),\n        'detected_at': elementary.insensitive_get_dict_value(anomaly_dict, 'detected_at'),\n        'database_name': database_name,\n        'schema_name': schema_name,\n        'table_name': table_name,\n        'column_name': elementary.insensitive_get_dict_value(anomaly_dict, 'column_name'),\n        'alert_type': 'anomaly_detection',\n        'sub_type': elementary.insensitive_get_dict_value(anomaly_dict, 'metric_name'),\n        'alert_description': elementary.insensitive_get_dict_value(anomaly_dict, 'anomaly_description'),\n        'other': elementary.insensitive_get_dict_value(anomaly_dict, 'anomalous_value'),\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'alert_results_query': elementary.insensitive_get_dict_value(test_node, 'compiled_sql'),\n        'test_name': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    } %}\n    {{ return(alert_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.743509}, "macro.elementary.convert_schema_change_dict_to_alert": {"unique_id": "macro.elementary.convert_schema_change_dict_to_alert", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "convert_schema_change_dict_to_alert", "macro_sql": "{% macro convert_schema_change_dict_to_alert(run_result_dict, schema_change_dict, test_node) %}\n    {% set alert_dict = schema_change_dict %}\n    {% do alert_dict.update({\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'alert_results_query': elementary.insensitive_get_dict_value(test_node, 'compiled_sql'),\n        'test_name': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    }) %}\n    {{ return(alert_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.744309}, "macro.elementary.convert_dbt_test_to_alert": {"unique_id": "macro.elementary.convert_dbt_test_to_alert", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "convert_dbt_test_to_alert", "macro_sql": "{% macro convert_dbt_test_to_alert(run_result_dict, test_node) %}\n    {% set test_execution_id = elementary.get_node_execution_id(test_node) %}\n    {% set parent_model_unique_id = elementary.insensitive_get_dict_value(test_node, 'parent_model_unique_id') %}\n    {% set parent_model = elementary.get_node(parent_model_unique_id) %}\n    {% set parent_model_name = elementary.get_table_name_from_node(parent_model) %}\n    {% set alert_dict = {\n        'alert_id': test_execution_id,\n        'data_issue_id': none,\n        'test_execution_id': test_execution_id,\n        'test_unique_id': elementary.insensitive_get_dict_value(test_node, 'unique_id'),\n        'detected_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S'),\n        'database_name': elementary.insensitive_get_dict_value(test_node, 'database_name'),\n        'schema_name': elementary.insensitive_get_dict_value(test_node, 'schema_name'),\n        'table_name': parent_model_name,\n        'column_name': elementary.insensitive_get_dict_value(test_node, 'test_column_name'),\n        'alert_type': 'dbt_test',\n        'sub_type': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'alert_description': elementary.insensitive_get_dict_value(run_result_dict, 'message'),\n        'other': none,\n        'owners': elementary.insensitive_get_dict_value(test_node, 'model_owners'),\n        'tags': elementary.insensitive_get_dict_value(test_node, 'model_tags'),\n        'alert_results_query': elementary.insensitive_get_dict_value(test_node, 'compiled_sql'),\n        'test_name': elementary.insensitive_get_dict_value(test_node, 'short_name'),\n        'test_params': elementary.insensitive_get_dict_value(test_node, 'test_params'),\n        'severity': elementary.insensitive_get_dict_value(test_node, 'severity'),\n        'status': elementary.insensitive_get_dict_value(run_result_dict, 'status')\n    }%}\n    {{ return(alert_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node_execution_id", "macro.elementary.insensitive_get_dict_value", "macro.elementary.get_node", "macro.elementary.get_table_name_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7460842}, "macro.elementary.get_test_result_rows_as_dicts": {"unique_id": "macro.elementary.get_test_result_rows_as_dicts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_test_result_rows_as_dicts", "macro_sql": "{% macro get_test_result_rows_as_dicts(flatten_test_node, sample_limit = none) %}\n    {% set test_row_dicts = [] %}\n    {% set test_compiled_sql = flatten_test_node.compiled_sql %}\n    {% if test_compiled_sql %}\n        {% if sample_limit %}\n            {% set test_compiled_sql = test_compiled_sql ~ ' limit ' ~ sample_limit %}\n        {% endif %}\n        {% set test_table_agate = run_query(test_compiled_sql) %}\n        {% set test_row_dicts = elementary.agate_to_dicts(test_table_agate) %}\n    {% endif %}\n    {{ return(test_row_dicts) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.746662}, "macro.elementary.get_test_metrics_table": {"unique_id": "macro.elementary.get_test_metrics_table", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "get_test_metrics_table", "macro_sql": "{% macro get_test_metrics_table(database_name, schema_name, test_node) %}\n    {% set tests_schema_name = schema_name ~ '__tests' %}\n    {% set temp_metrics_table_name = elementary.table_name_with_suffix(test_node.name, '__metrics') %}\n    {% set temp_metrics_table_relation = adapter.get_relation(database=database_name,\n                                                              schema=tests_schema_name,\n                                                              identifier=temp_metrics_table_name) %}\n    {% if temp_metrics_table_relation %}\n        {% set full_metrics_table_name = temp_metrics_table_relation.render() %}\n        {{ return(full_metrics_table_name) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.table_name_with_suffix"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.747259}, "macro.elementary.merge_data_monitoring_metrics": {"unique_id": "macro.elementary.merge_data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "original_file_path": "macros/edr/tests/on_run_end/handle_tests_results.sql", "name": "merge_data_monitoring_metrics", "macro_sql": "{% macro merge_data_monitoring_metrics(database_name, schema_name, test_metrics_tables) %}\n    {%- if test_metrics_tables %}\n        {%- set test_tables_union_query = elementary.union_metrics_query(test_metrics_tables) -%}\n        {%- set target_relation = adapter.get_relation(database=database_name,\n                                                       schema=schema_name,\n                                                       identifier='data_monitoring_metrics') -%}\n        {%- set temp_relation = dbt.make_temp_relation(target_relation) -%}\n        {%- if test_tables_union_query %}\n            {{ elementary.debug_log('Running union query from test tables to ' ~ temp_relation.identifier) }}\n            {%- do run_query(dbt.create_table_as(True, temp_relation, test_tables_union_query)) %}\n            {% set dest_columns = adapter.get_columns_in_relation(target_relation) %}\n            {{ elementary.debug_log('Merging ' ~ temp_relation.identifier ~ ' to ' ~ target_relation.database ~ '.' ~ target_relation.schema ~ '.' ~ target_relation.identifier) }}\n            {%- if target_relation and temp_relation and dest_columns %}\n                {% set merge_sql = elementary.merge_sql(target_relation, temp_relation, 'id', dest_columns) %}\n                {%- do run_query(merge_sql) %}\n                {%- do adapter.commit() -%}\n                {{ elementary.debug_log('Finished merging') }}\n            {%- else %}\n                {{ elementary.debug_log('Error: could not merge to table: ' ~ target_name) }}\n            {%- endif %}\n        {%- endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.union_metrics_query", "macro.dbt.make_temp_relation", "macro.elementary.debug_log", "macro.dbt.run_query", "macro.dbt.create_table_as", "macro.elementary.merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.748557}, "macro.elementary.create_elementary_tests_schema": {"unique_id": "macro.elementary.create_elementary_tests_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "original_file_path": "macros/edr/tests/on_run_start/create_elementary_tests_schema.sql", "name": "create_elementary_tests_schema", "macro_sql": "{% macro create_elementary_tests_schema() %}\n    {% if execute and flags.WHICH == 'test' %}\n        {% set database_name, schema_name = elementary.get_package_database_and_schema('elementary') %}\n        {% set schema_name = schema_name ~ '__tests' %}\n        {%- if not adapter.check_schema_exists(database_name, schema_name) %}\n            {{ elementary.debug_log('schema ' ~ database_name ~ '.' ~ schema_name ~ ' doesnt exist, creating it') }}\n            {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n            {%- do dbt.create_schema(schema_relation) %}\n            {% do adapter.commit() %}\n        {%- endif %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_package_database_and_schema", "macro.elementary.debug_log", "macro.dbt.create_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7497542}, "macro.elementary.dbt_model_run_result_description": {"unique_id": "macro.elementary.dbt_model_run_result_description", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/alerts/dbt_run_results_description.sql", "original_file_path": "macros/edr/alerts/dbt_run_results_description.sql", "name": "dbt_model_run_result_description", "macro_sql": "{% macro dbt_model_run_result_description() %}\n    'The model ' || name || ' returned ' || status || ' at ' || generated_at || ' on run ' || invocation_id\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.749939}, "macro.elementary.anomaly_detection_description": {"unique_id": "macro.elementary.anomaly_detection_description", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "anomaly_detection_description", "macro_sql": "{% macro anomaly_detection_description() %}\n    case\n        when metric_name = 'freshness' then {{ elementary.freshness_description() }}\n        when column_name is null then {{ elementary.table_metric_description() }}\n        when column_name is not null then {{ elementary.column_metric_description() }}\n        else null\n    end as anomaly_description\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.freshness_description", "macro.elementary.table_metric_description", "macro.elementary.column_metric_description"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.75045}, "macro.elementary.freshness_description": {"unique_id": "macro.elementary.freshness_description", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "freshness_description", "macro_sql": "{% macro freshness_description() %}\n    'Last update was at ' || source_value || ', ' || abs(round(metric_value/3600,2)) || ' hours ago. Usually the table is updated within ' || abs(round(training_avg/3600,2)) || ' hours.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.750543}, "macro.elementary.table_metric_description": {"unique_id": "macro.elementary.table_metric_description", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "table_metric_description", "macro_sql": "{% macro table_metric_description() %}\n    'The last ' || metric_name || ' value is ' || round(metric_value,3) ||\n    '. The average for this metric is ' || round(training_avg,3) || '.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.750627}, "macro.elementary.column_metric_description": {"unique_id": "macro.elementary.column_metric_description", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/alerts/anomaly_detection_description.sql", "original_file_path": "macros/edr/alerts/anomaly_detection_description.sql", "name": "column_metric_description", "macro_sql": "{% macro column_metric_description() %}\n    'In column ' || column_name || ', the last ' || metric_name || ' value is ' || round(metric_value,3) ||\n    '. The average for this metric is ' || round(training_avg,3) || '.'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.750716}, "macro.elementary.get_configured_schemas_from_graph": {"unique_id": "macro.elementary.get_configured_schemas_from_graph", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "original_file_path": "macros/edr/system/configuration/get_configured_schemas_from_graph.sql", "name": "get_configured_schemas_from_graph", "macro_sql": "{% macro get_configured_schemas_from_graph() %}\n    {% set configured_schemas = [] %}\n    {% if execute %}\n        {% for test_node in graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n            {% set test_metadata = test_node.get('test_metadata') %}\n            {% if test_metadata %}\n                {% set test_name = test_metadata.get('name') %}\n                {% if test_name == 'schema_changes' %}\n                    {% set test_depends_on_unique_ids = test_node.depends_on.nodes %}\n                    {% set depends_on_nodes = elementary.get_nodes_by_unique_ids(test_depends_on_unique_ids) %}\n                    {% for node in depends_on_nodes %}\n                        {% set node_package_name = node.get('package_name') %}\n                        {% if node_package_name != 'elementary' %}\n                            {% if adapter.check_schema_exists(node['database'], node['schema']) %}\n                                {% do configured_schemas.append((node['database'], node['schema'])) %}\n                            {% endif %}\n                        {% endif %}\n                    {% endfor %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(configured_schemas | unique | list ) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_nodes_by_unique_ids"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.752943}, "macro.elementary.not_edr_run": {"unique_id": "macro.elementary.not_edr_run", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/not_edr_run.sql", "original_file_path": "macros/edr/system/system_utils/not_edr_run.sql", "name": "not_edr_run", "macro_sql": "{% macro not_edr_run() %}\n    {%- if elementary.get_config_var('edr_run') %}\n        {{ return(false) }}\n    {%- else %}\n        {{ return(true) }}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7533371}, "macro.elementary.monitors_run_end": {"unique_id": "macro.elementary.monitors_run_end", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/data_monitors_end.sql", "original_file_path": "macros/edr/system/system_utils/data_monitors_end.sql", "name": "monitors_run_end", "macro_sql": "{% macro monitors_run_end() %}\n\n    {%- set monitors_run_end_query %}\n        update {{ ref('elementary_runs') }}\n            set monitors_run_end = {{ dbt_utils.current_timestamp_in_utc() }}\n        where run_id = '{{ invocation_id }}'\n    {%- endset %}\n\n    {%- do run_query(monitors_run_end_query) -%}\n    {%- do edr_log('Finished running data monitors') -%}\n\n    {{ return('') }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.dbt.run_query", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7538931}, "macro.elementary.no_results_query": {"unique_id": "macro.elementary.no_results_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/no_results_query.sql", "original_file_path": "macros/edr/system/system_utils/no_results_query.sql", "name": "no_results_query", "macro_sql": "{% macro no_results_query() %}\n    with nothing as (select 1 as num)\n    select * from nothing where num = 2\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7540638}, "macro.elementary.get_config_var": {"unique_id": "macro.elementary.get_config_var", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/get_config_var.sql", "original_file_path": "macros/edr/system/system_utils/get_config_var.sql", "name": "get_config_var", "macro_sql": "{% macro get_config_var(var_name) %}\n{% set default_config = {\n         'days_back': 14,\n         'anomaly_sensitivity': 3,\n         'backfill_days_per_run': 2,\n         'alert_dbt_model_fail': true,\n         'alert_dbt_model_skip': true,\n         'elementary_debug_logs': false,\n         'refresh_dbt_artifacts': false,\n         'dbt_artifacts_chunk_size': 50,\n         'edr_cli_run': false,\n         'max_int': 2147483647,\n         'schemas_to_alert_on_new_tables': [],\n         'edr_monitors': {\n           'table': ['schema_changes', 'row_count', 'freshness'],\n           'column_any_type': ['null_count', 'null_percent'],\n           'column_string': ['min_length', 'max_length', 'average_length', 'missing_count', 'missing_percent'],\n           'column_numeric': ['min', 'max', 'zero_count', 'zero_percent', 'average', 'standard_deviation', 'variance']}\n}%}\n{{ return(var(var_name, default_config.get(var_name))) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.755317}, "macro.elementary.run_start_column": {"unique_id": "macro.elementary.run_start_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "name": "run_start_column", "macro_sql": "{% macro run_start_column() %}\n    cast ('{{ run_started_at.strftime(\"%Y-%m-%d %H:%M:%S\") }}' as {{ dbt_utils.type_timestamp() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7556531}, "macro.elementary.current_timestamp_column": {"unique_id": "macro.elementary.current_timestamp_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/timestamp_column.sql", "original_file_path": "macros/edr/system/system_utils/timestamp_column.sql", "name": "current_timestamp_column", "macro_sql": "{% macro current_timestamp_column() %}\n    cast ({{dbt_utils.current_timestamp_in_utc()}} as {{ dbt_utils.type_timestamp() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp_in_utc", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.755806}, "macro.elementary.empty_alerts": {"unique_id": "macro.elementary.empty_alerts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_alerts", "macro_sql": "{% macro empty_alerts() %}\n    {{ elementary.empty_table([('alert_id','long_string'),('data_issue_id','string'),('test_execution_id','long_string'),('test_unique_id','long_string'),('detected_at','timestamp'),('database_name','string'),('schema_name','string'),('table_name','string'),('column_name','string'),('alert_type','string'),('sub_type','string'),('alert_description','long_string'),('owners','string'),('tags','string'),('alert_results_query','long_string'),('other','string'),('test_name','long_string'),('test_params','long_string'),('severity','string'),('status','string')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.759557}, "macro.elementary.empty_column_unpivot_cte": {"unique_id": "macro.elementary.empty_column_unpivot_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column_unpivot_cte", "macro_sql": "{% macro empty_column_unpivot_cte() %}\n    {{ elementary.empty_table([('edr_column_name','string'),('edr_bucket','timestamp'),('metric_name','string'),('metric_value','float')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.759945}, "macro.elementary.empty_data_monitoring_metrics": {"unique_id": "macro.elementary.empty_data_monitoring_metrics", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_data_monitoring_metrics", "macro_sql": "{% macro empty_data_monitoring_metrics() %}\n    {{ elementary.empty_table([('id','string'),('full_table_name','string'),('column_name','string'),('metric_name','string'),('metric_value','float'),('source_value','string'),('bucket_start','timestamp'),('bucket_end','timestamp'),('bucket_duration_hours','int'),('updated_at','timestamp')]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.760514}, "macro.elementary.empty_column_monitors_cte": {"unique_id": "macro.elementary.empty_column_monitors_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column_monitors_cte", "macro_sql": "{% macro empty_column_monitors_cte() %}\n    {%- set column_monitors_list = elementary.all_column_monitors() %}\n    {%- set columns_definition = [('column_name', 'string'), ('bucket', 'timestamp')] %}\n    {%- for monitor in column_monitors_list %}\n        {%- do columns_definition.append((monitor,'int'))-%}\n    {%- endfor %}\n    {{ elementary.empty_table(columns_definition) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.all_column_monitors", "macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.761051}, "macro.elementary.empty_table": {"unique_id": "macro.elementary.empty_table", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_table", "macro_sql": "{% macro empty_table(column_name_and_type_list) %}\n\n    {%- set empty_table_query -%}\n        with empty_table as (\n            select\n            {% for column in column_name_and_type_list %}\n                {{ elementary.empty_column(column[0], column[1]) }} {%- if not loop.last -%},{%- endif %}\n            {%- endfor %}\n            )\n        select * from empty_table\n        where 1 = 0\n    {%- endset -%}\n\n    {{- return(empty_table_query)-}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.761504}, "macro.elementary.empty_column": {"unique_id": "macro.elementary.empty_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "empty_column", "macro_sql": "{% macro empty_column(column_name, data_type) %}\n\n    {%- set dummy_values = elementary.dummy_values() %}\n\n    {%- if data_type == 'boolean' %}\n        cast ({{ dummy_values['boolean'] }} as {{ elementary.type_bool()}}) as {{ column_name }}\n    {%- elif data_type == 'timestamp' -%}\n        cast('{{ dummy_values['timestamp'] }}' as {{ dbt_utils.type_timestamp() }}) as {{ column_name }}\n    {%- elif data_type == 'int' %}\n        cast({{ dummy_values['int'] }} as {{ dbt_utils.type_int() }}) as {{ column_name }}\n    {%- elif data_type == 'bigint' %}\n        cast({{ dummy_values['bigint'] }} as {{ dbt_utils.type_bigint() }}) as {{ column_name }}\n    {%- elif data_type == 'float' %}\n        cast({{ dummy_values['float'] }} as {{ dbt_utils.type_float() }}) as {{ column_name }}\n    {%- elif data_type == 'long_string' %}\n        cast('{{ dummy_values['long_string'] }}' as {{ elementary.type_long_string() }}) as {{ column_name }}\n    {%- else %}\n        cast('{{ dummy_values['string'] }}' as {{ elementary.type_string() }}) as {{ column_name }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.dummy_values", "macro.elementary.type_bool", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.type_int", "macro.dbt_utils.type_bigint", "macro.dbt_utils.type_float", "macro.elementary.type_long_string", "macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.762808}, "macro.elementary.dummy_values": {"unique_id": "macro.elementary.dummy_values", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/empty_table.sql", "original_file_path": "macros/edr/system/system_utils/empty_table.sql", "name": "dummy_values", "macro_sql": "{% macro dummy_values() %}\n\n    {%- set dummy_values = {\n     'string': \"dummy_string\",\n     'long_string': \"this_is_just_a_long_dummy_string\",\n     'boolean': 'True',\n     'int': 123456789,\n     'bigint': 31474836478,\n     'float': 123456789.99,\n     'timestamp': \"2091-02-17\"\n    } %}\n\n    {{ return(dummy_values) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.76328}, "macro.elementary.edr_log": {"unique_id": "macro.elementary.edr_log", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "edr_log", "macro_sql": "{% macro edr_log(msg) %}\n    {%- if execute %}\n        {% do log('Elementary: ' ~ msg, info=True) %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.764551}, "macro.elementary.debug_log": {"unique_id": "macro.elementary.debug_log", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "debug_log", "macro_sql": "{% macro debug_log(msg) %}\n    {%- if execute %}\n        {% set debug_logs_enabled = elementary.get_config_var('elementary_debug_logs') %}\n        {% if debug_logs_enabled %}\n            {{ elementary.edr_log(msg) }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7648692}, "macro.elementary.test_log": {"unique_id": "macro.elementary.test_log", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/logs.sql", "original_file_path": "macros/edr/system/system_utils/logs.sql", "name": "test_log", "macro_sql": "{% macro test_log(msg_type, table_name, column_name=none) %}\n    {% set monitored_table_not_found = 'Monitored table ' ~ table_name ~ ' not found' %}\n    {%- if column_name%}\n        {%- set start = 'Started running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name ~ ' ' ~ column_name %}\n        {%- set no_monitors = 'No data monitors to run on: ' ~ table_name ~ ' ' ~ column_name %}\n    {%- else %}\n        {%- set start = 'Started running data monitors on: ' ~ table_name %}\n        {%- set end = 'Finished running data monitors on: ' ~ table_name %}\n        {%- set no_monitors = 'No data monitors to run on: ' ~ table_name %}\n    {%- endif %}\n\n    {%- if msg_type == 'start' %}\n        {% do elementary.edr_log(start) %}\n    {%- elif msg_type == 'end' %}\n        {% do elementary.edr_log(end) %}\n    {%- elif msg_type == 'no_monitors' %}\n        {% do elementary.edr_log(no_monitors) %}\n    {% elif msg_type == 'monitored_table_not_found' %}\n        {% do elementary.edr_log(monitored_table_not_found) %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.edr_log"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.765955}, "macro.elementary.daily_buckets_cte": {"unique_id": "macro.elementary.daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "daily_buckets_cte", "macro_sql": "{% macro daily_buckets_cte() %}\n    {{ adapter.dispatch('daily_buckets_cte','elementary')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__daily_buckets_cte"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.76735}, "macro.elementary.default__daily_buckets_cte": {"unique_id": "macro.elementary.default__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "default__daily_buckets_cte", "macro_sql": "{% macro default__daily_buckets_cte() -%}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set min_bucket_end = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n\n    {%- set daily_buckets_cte %}\n        with dates as (\n            select {{ elementary.cast_as_timestamp(min_bucket_end) }} as date\n        union all\n        select {{ elementary.timeadd('day', '1', 'date') }}\n        from dates\n        where {{ elementary.timeadd('day', '1', 'date') }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n            )\n        select date as edr_daily_bucket\n        from dates\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp", "macro.elementary.timeadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.768082}, "macro.elementary.bigquery__daily_buckets_cte": {"unique_id": "macro.elementary.bigquery__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "bigquery__daily_buckets_cte", "macro_sql": "{% macro bigquery__daily_buckets_cte() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set min_bucket_end = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n\n    {%- set daily_buckets_cte %}\n        select edr_daily_bucket\n        from unnest(generate_timestamp_array({{ elementary.cast_as_timestamp(min_bucket_end) }}, {{ elementary.cast_as_timestamp(max_bucket_end) }}, interval 1 day)) as edr_daily_bucket\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.768642}, "macro.elementary.redshift__daily_buckets_cte": {"unique_id": "macro.elementary.redshift__daily_buckets_cte", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "original_file_path": "macros/edr/system/system_utils/daily_buckets_cte.sql", "name": "redshift__daily_buckets_cte", "macro_sql": "{% macro redshift__daily_buckets_cte() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set days_back = elementary.get_config_var('days_back') %}\n\n    {%- set daily_buckets_cte %}\n        {%- for i in range(0, days_back+1) %}\n            {%- set daily_bucket = \"'\"~ (run_started_at - modules.datetime.timedelta(i)).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n            select {{ elementary.cast_as_timestamp(daily_bucket) }} as edr_daily_bucket\n            {%- if not loop.last %} union all {%- endif %}\n        {%- endfor %}\n    {%- endset %}\n    {{ return(daily_buckets_cte) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.769376}, "macro.elementary.full_table_name": {"unique_id": "macro.elementary.full_table_name", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_table_name", "macro_sql": "{% macro full_table_name(alias) -%}\n    {% if alias is defined %}{%- set alias_dot = alias ~ '.' %}{% endif %}\n    upper({{ alias_dot }}database_name || '.' || {{ alias_dot }}schema_name || '.' || {{ alias_dot }}table_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.772495}, "macro.elementary.full_schema_name": {"unique_id": "macro.elementary.full_schema_name", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_schema_name", "macro_sql": "{% macro full_schema_name() -%}\n    upper(database_name || '.' || schema_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.772577}, "macro.elementary.full_column_name": {"unique_id": "macro.elementary.full_column_name", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_column_name", "macro_sql": "{% macro full_column_name() -%}\n    upper(database_name || '.' || schema_name || '.' || table_name || '.' || column_name)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.772654}, "macro.elementary.full_name_split": {"unique_id": "macro.elementary.full_name_split", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "full_name_split", "macro_sql": "{% macro full_name_split(part_name) %}\n    {{ adapter.dispatch('full_name_split','elementary')(part_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__full_name_split"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.772831}, "macro.elementary.default__full_name_split": {"unique_id": "macro.elementary.default__full_name_split", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "default__full_name_split", "macro_sql": "{% macro default__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[{{ part_index }}],'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.773281}, "macro.elementary.bigquery__full_name_split": {"unique_id": "macro.elementary.bigquery__full_name_split", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "bigquery__full_name_split", "macro_sql": "{% macro bigquery__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 0 %}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 1 %}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 2 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split(full_table_name,'.')[OFFSET({{ part_index }})],'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.773729}, "macro.elementary.redshift__full_name_split": {"unique_id": "macro.elementary.redshift__full_name_split", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "redshift__full_name_split", "macro_sql": "{% macro redshift__full_name_split(part_name) %}\n    {%- if part_name == 'database_name' -%}\n        {%- set part_index = 1 -%}\n    {%- elif part_name == 'schema_name' -%}\n        {%- set part_index = 2 -%}\n    {%- elif part_name == 'table_name' -%}\n        {%- set part_index = 3 -%}\n    {%- else -%}\n        {{ return('') }}\n    {%- endif -%}\n    trim(split_part(full_table_name,'.',{{ part_index }}),'\"') as {{ part_name }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7741709}, "macro.elementary.relation_to_full_name": {"unique_id": "macro.elementary.relation_to_full_name", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "relation_to_full_name", "macro_sql": "{% macro relation_to_full_name(relation) %}\n    {%- set full_table_name = relation.database | upper ~'.'~ relation.schema | upper ~'.'~ relation.identifier | upper %}\n    {{ return(full_table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7744489}, "macro.elementary.configured_schemas_from_graph_as_tuple": {"unique_id": "macro.elementary.configured_schemas_from_graph_as_tuple", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/full_names.sql", "original_file_path": "macros/edr/system/system_utils/full_names.sql", "name": "configured_schemas_from_graph_as_tuple", "macro_sql": "{% macro configured_schemas_from_graph_as_tuple() %}\n\n    {%- set configured_schema_tuples = elementary.get_configured_schemas_from_graph() %}\n    {%- set schemas_list = [] %}\n\n    {%- for configured_schema_tuple in configured_schema_tuples %}\n        {%- set database_name, schema_name = configured_schema_tuple %}\n        {%- set full_schema_name = database_name | upper ~ '.' ~ schema_name | upper %}\n        {%- do schemas_list.append(full_schema_name) -%}\n    {%- endfor %}\n\n    {% set schemas_tuple = elementary.strings_list_to_tuple(schemas_list) %}\n    {{ return(schemas_tuple) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_configured_schemas_from_graph", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.77507}, "macro.elementary.from": {"unique_id": "macro.elementary.from", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "from", "macro_sql": "{% macro from(full_table_name) %}\n    {{ adapter.dispatch('from','elementary')(full_table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__from"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7755678}, "macro.elementary.default__from": {"unique_id": "macro.elementary.default__from", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "default__from", "macro_sql": "{% macro default__from(full_table_name) %}\n    {%- set upper_full_name = full_table_name | upper %}\n    {%- set split_full_name = upper_full_name.split('.') %}\n    {%- set from_name = '\"'~ split_full_name[0] ~'\".\"'~ split_full_name[1] ~'\".\"'~ split_full_name[2] ~'\"' %}\n    {{ return(from_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.775979}, "macro.elementary.bigquery__from": {"unique_id": "macro.elementary.bigquery__from", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/system/system_utils/from.sql", "original_file_path": "macros/edr/system/system_utils/from.sql", "name": "bigquery__from", "macro_sql": "{% macro bigquery__from(full_table_name) %}\n    {%- set lower_full_name = full_table_name | lower %}\n    {%- set split_full_name = lower_full_name.split('.') %}\n    {%- set from_name = '`'~ split_full_name[0] ~'`.`'~ split_full_name[1] ~'`.`'~ split_full_name[2] ~'`' %}\n    {{ return(from_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.776395}, "macro.elementary.get_columns_from_information_schema": {"unique_id": "macro.elementary.get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "get_columns_from_information_schema", "macro_sql": "{% macro get_columns_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_columns_from_information_schema', 'elementary')(schema_tuple)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_columns_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7770271}, "macro.elementary.default__get_columns_from_information_schema": {"unique_id": "macro.elementary.default__get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "default__get_columns_from_information_schema", "macro_sql": "{% macro default__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from {{ schema_relation.information_schema('COLUMNS') }}\n    where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.777401}, "macro.elementary.redshift__get_columns_from_information_schema": {"unique_id": "macro.elementary.redshift__get_columns_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_columns_from_information_schema.sql", "name": "redshift__get_columns_from_information_schema", "macro_sql": "{% macro redshift__get_columns_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    select\n        upper(table_catalog || '.' || table_schema || '.' || table_name) as full_table_name,\n        upper(table_catalog) as database_name,\n        upper(table_schema) as schema_name,\n        upper(table_name) as table_name,\n        upper(column_name) as column_name,\n        data_type\n    from svv_columns\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.7775848}, "macro.elementary.get_tables_from_information_schema": {"unique_id": "macro.elementary.get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "get_tables_from_information_schema", "macro_sql": "{% macro get_tables_from_information_schema(schema_tuple) %}\n    {{ return(adapter.dispatch('get_tables_from_information_schema','elementary')(schema_tuple)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_tables_from_information_schema"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.797248}, "macro.elementary.default__get_tables_from_information_schema": {"unique_id": "macro.elementary.default__get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "default__get_tables_from_information_schema", "macro_sql": "{% macro default__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n    {% set schema_relation = api.Relation.create(database=database_name, schema=schema_name).without_identifier() %}\n\n    (with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from {{ schema_relation.information_schema('TABLES') }}\n        where upper(table_schema) = upper('{{ schema_name }}')\n\n    ),\n\n    information_schema_schemata as (\n\n        select\n            upper(catalog_name) as database_name,\n            upper(schema_name) as schema_name\n        from {{ dbt.information_schema_name(schema_relation.database) }}.SCHEMATA\n        where upper(schema_name) = upper('{{ schema_name }}')\n\n    )\n\n    select\n        case when tables.table_name is not null\n            then {{ elementary.full_table_name('TABLES') }}\n        else null end as full_table_name,\n        upper(schemas.database_name || '.' || schemas.schema_name) as full_schema_name,\n        schemas.database_name as database_name,\n        schemas.schema_name as schema_name,\n        tables.table_name\n    from information_schema_tables as tables\n    full outer join information_schema_schemata as schemas\n    on (tables.database_name = schemas.database_name and tables.schema_name = schemas.schema_name)\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.797821}, "macro.elementary.redshift__get_tables_from_information_schema": {"unique_id": "macro.elementary.redshift__get_tables_from_information_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "original_file_path": "macros/edr/metadata_collection/get_tables_from_information_schema.sql", "name": "redshift__get_tables_from_information_schema", "macro_sql": "{% macro redshift__get_tables_from_information_schema(schema_tuple) %}\n    {%- set database_name, schema_name = schema_tuple %}\n\n    (with information_schema_tables as (\n\n        select\n            upper(table_catalog) as database_name,\n            upper(table_schema) as schema_name,\n            upper(table_name) as table_name\n        from svv_tables\n            where upper(table_schema) = upper('{{ schema_name }}') and upper(table_catalog) = upper('{{ database_name }}')\n\n    )\n\n    select\n        {{ elementary.full_table_name() }} as full_table_name,\n        upper(database_name || '.' || schema_name) as full_schema_name,\n        database_name,\n        schema_name,\n        table_name\n    from information_schema_tables\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.full_table_name"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.798095}, "macro.elementary.get_anomaly_query": {"unique_id": "macro.elementary.get_anomaly_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_query.sql", "original_file_path": "macros/edr/data_monitoring/anomaly_detection/get_anomaly_query.sql", "name": "get_anomaly_query", "macro_sql": "{% macro get_anomaly_query(test_metrics_table_relation, full_monitored_table_name, monitors, column_name = none, columns_only=false, sensitivity=none) %}\n\n    {%- set global_min_bucket_start = elementary.get_global_min_bucket_start_as_datetime() %}\n    {%- set metrics_min_time = \"'\"~ (global_min_bucket_start - modules.datetime.timedelta(elementary.get_config_var('backfill_days_per_run'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {%- set backfill_period = \"'-\" ~ elementary.get_config_var('backfill_days_per_run') ~ \"'\" %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n    {%- set anomaly_sensitivity = elementary.get_anomaly_sensitivity(sensitivity) %}\n\n    {% set anomaly_query %}\n\n        with data_monitoring_metrics as (\n\n            select * from {{ ref('data_monitoring_metrics') }}\n            where bucket_start > {{ elementary.cast_as_timestamp(metrics_min_time) }}\n                and upper(full_table_name) = upper('{{ full_monitored_table_name }}')\n                and metric_name in {{ elementary.strings_list_to_tuple(monitors) }}\n                {%- if column_name %}\n                    and upper(column_name) = upper('{{ column_name }}')\n                {%- endif %}\n                {%- if columns_only %}\n                    and column_name is not null\n                {%- endif %}\n\n        ),\n\n\n        union_metrics as (\n\n            select * from data_monitoring_metrics\n            union all\n            select * from {{ test_metrics_table_relation }}\n\n        ),\n\n        grouped_metrics_duplicates as (\n\n            select\n                *,\n                row_number() over (partition by id order by updated_at desc) as row_number\n            from union_metrics\n\n        ),\n\n        grouped_metrics as (\n\n            select\n                id as metric_id,\n                full_table_name,\n                column_name,\n                metric_name,\n                metric_value,\n                source_value,\n                bucket_start,\n                bucket_end,\n                bucket_duration_hours,\n                updated_at\n            from grouped_metrics_duplicates\n            where row_number = 1\n\n        ),\n\n        daily_buckets as (\n\n            {{ elementary.daily_buckets_cte() }}\n\n        ),\n\n        time_window_aggregation as (\n\n            select\n                *,\n                avg(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_avg,\n                stddev(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_stddev,\n                count(metric_value) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_set_size,\n                last_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) training_end,\n                first_value(bucket_end) over (partition by metric_name, full_table_name, column_name order by edr_daily_bucket asc rows between {{ elementary.get_config_var('days_back') }} preceding and current row) as training_start\n            from daily_buckets left join\n                grouped_metrics on (edr_daily_bucket = bucket_end)\n            {{ dbt_utils.group_by(11) }}\n\n        ),\n\n        calc_anomaly_score as (\n\n            select\n                {{ dbt_utils.surrogate_key([\n                 'metric_id',\n                 elementary.const_as_string(test_execution_id)\n                ]) }} as id,\n                metric_id,\n                {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                {{ elementary.current_timestamp_column() }} as detected_at,\n                full_table_name,\n                column_name,\n                metric_name,\n                case\n                    when training_stddev = 0 then 0\n                    else (metric_value - training_avg) / (training_stddev)\n                end as anomaly_score,\n                {{ anomaly_sensitivity }} as anomaly_score_threshold,\n                {{ elementary.anomaly_detection_description() }},\n                source_value as anomalous_value,\n                bucket_start,\n                bucket_end,\n                metric_value as latest_metric_value,\n                training_avg,\n                training_stddev,\n                training_set_size\n            from time_window_aggregation\n            where\n                metric_value is not null\n              and training_avg is not null\n              and training_stddev is not null\n            {# training dataset minimal size to make anomaly detection relevant #}\n              and training_set_size >= {{ elementary.get_config_var('days_back') -1 }}\n            {# get anomalies for the whole backfill timeframe #}\n              and bucket_end >= {{ elementary.timeadd('day', backfill_period, elementary.get_max_bucket_end()) }}\n\n        )\n\n        select * from calc_anomaly_score\n        where abs(anomaly_score) > {{ anomaly_sensitivity }}\n\n    {% endset %}\n\n    {{ return(anomaly_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_global_min_bucket_start_as_datetime", "macro.elementary.get_config_var", "macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.get_anomaly_sensitivity", "macro.elementary.cast_as_timestamp", "macro.elementary.strings_list_to_tuple", "macro.elementary.daily_buckets_cte", "macro.dbt_utils.group_by", "macro.dbt_utils.surrogate_key", "macro.elementary.const_as_string", "macro.elementary.current_timestamp_column", "macro.elementary.anomaly_detection_description", "macro.elementary.timeadd", "macro.elementary.get_max_bucket_end"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.805475}, "macro.elementary.row_count": {"unique_id": "macro.elementary.row_count", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/table_monitors.sql", "name": "row_count", "macro_sql": "{% macro row_count() -%}\n    count(*)\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8056629}, "macro.elementary.max_length": {"unique_id": "macro.elementary.max_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "max_length", "macro_sql": "{% macro max_length(column_name) -%}\n    max(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.806093}, "macro.elementary.min_length": {"unique_id": "macro.elementary.min_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "min_length", "macro_sql": "{% macro min_length(column_name) -%}\n    min(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8062038}, "macro.elementary.average_length": {"unique_id": "macro.elementary.average_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "average_length", "macro_sql": "{% macro average_length(column_name) -%}\n    avg(length({{ column_name }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.806314}, "macro.elementary.missing_count": {"unique_id": "macro.elementary.missing_count", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "missing_count", "macro_sql": "{% macro missing_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when trim({{ column_name }}, ' ') = '' then 1 when lower({{ column_name }}) = 'null' then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.806474}, "macro.elementary.missing_percent": {"unique_id": "macro.elementary.missing_percent", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_string_monitors.sql", "name": "missing_percent", "macro_sql": "{% macro missing_percent(column_name) %}\n    {{ elementary.percent(elementary.missing_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.missing_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.806684}, "macro.elementary.null_count": {"unique_id": "macro.elementary.null_count", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "name": "null_count", "macro_sql": "{% macro null_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.806953}, "macro.elementary.null_percent": {"unique_id": "macro.elementary.null_percent", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_any_type_monitors.sql", "name": "null_percent", "macro_sql": "{% macro null_percent(column_name) %}\n    {{ elementary.percent(elementary.null_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.null_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.807161}, "macro.elementary.max": {"unique_id": "macro.elementary.max", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "max", "macro_sql": "{% macro max(column_name) -%}\n    max(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.807887}, "macro.elementary.min": {"unique_id": "macro.elementary.min", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "min", "macro_sql": "{% macro min(column_name) -%}\n    min(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.80804}, "macro.elementary.average": {"unique_id": "macro.elementary.average", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "average", "macro_sql": "{% macro average(column_name) -%}\n    avg(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.808193}, "macro.elementary.zero_count": {"unique_id": "macro.elementary.zero_count", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "zero_count", "macro_sql": "{% macro zero_count(column_name) %}\n    coalesce(sum(case when {{ column_name }} is null then 1 when cast({{ column_name }} as {{ dbt_utils.type_float() }}) = 0 then 1 else 0 end), 0)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.808436}, "macro.elementary.zero_percent": {"unique_id": "macro.elementary.zero_percent", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "zero_percent", "macro_sql": "{% macro zero_percent(column_name) %}\n    {{ elementary.percent(elementary.zero_count(column_name), elementary.row_count()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.percent", "macro.elementary.zero_count", "macro.elementary.row_count"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8086421}, "macro.elementary.standard_deviation": {"unique_id": "macro.elementary.standard_deviation", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "standard_deviation", "macro_sql": "{% macro standard_deviation(column_name) -%}\n    stddev(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.80879}, "macro.elementary.variance": {"unique_id": "macro.elementary.variance", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "original_file_path": "macros/edr/data_monitoring/monitors/column_numeric_monitors.sql", "name": "variance", "macro_sql": "{% macro variance(column_name) -%}\n    variance(cast({{ column_name }} as {{ dbt_utils.type_float() }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.808939}, "macro.elementary.schemas_to_alert_on_new_tables": {"unique_id": "macro.elementary.schemas_to_alert_on_new_tables", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/schemas_to_alert_on_new_tables.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/schemas_to_alert_on_new_tables.sql", "name": "schemas_to_alert_on_new_tables", "macro_sql": "{% macro schemas_to_alert_on_new_tables() %}\n    {%- set schemas_list = elementary.get_config_var('schemas_to_alert_on_new_tables') %}\n    {%- set upper_schemas_list = [] %}\n    {%- for schema in schemas_list %}\n        {%- do upper_schemas_list.append(schema.upper()) %}\n    {%- endfor %}\n    {%- set alert_on_schema_changes = elementary.strings_list_to_tuple(upper_schemas_list) %}\n    {{- return(alert_on_schema_changes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.strings_list_to_tuple"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.809556}, "macro.elementary.get_last_schema_changes_alert_time": {"unique_id": "macro.elementary.get_last_schema_changes_alert_time", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_alert_time.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_last_schema_changes_alert_time.sql", "name": "get_last_schema_changes_alert_time", "macro_sql": "{% macro get_last_schema_changes_alert_time() %}\n    {%- set last_schema_changes_query %}\n        select max(detected_at) as last_alert_time\n        from {{ ref('alerts_schema_changes') }}\n        where sub_type != 'table_added'\n    {%- endset %}\n\n    {%- set last_schema_changes_query_result = elementary.result_value(last_schema_changes_query) %}\n\n    {%- if last_schema_changes_query_result %}\n        {{ return(last_schema_changes_query_result) }}\n    {%- else %}\n        {{ return(null) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.810173}, "macro.elementary.get_schema_changes_alert_query": {"unique_id": "macro.elementary.get_schema_changes_alert_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/schema_changes/get_schema_changes_alert_query.sql", "original_file_path": "macros/edr/data_monitoring/schema_changes/get_schema_changes_alert_query.sql", "name": "get_schema_changes_alert_query", "macro_sql": "{% macro get_schema_changes_alert_query(full_table_name, last_alert=none) %}\n    {%- set test_execution_id = elementary.get_test_execution_id() %}\n    {%- set test_unique_id = elementary.get_test_unique_id() %}\n\n    {%- set schema_changes_test_query %}\n        with table_changes as (\n\n            select * from {{ ref('table_changes') }}\n            where {{ elementary.full_table_name() }} = upper('{{ full_table_name }}')\n\n        ),\n\n        column_changes as (\n\n            select * from {{ ref('column_changes') }}\n            where {{ elementary.full_table_name() }} = upper('{{ full_table_name }}')\n\n        ),\n\n        table_changes_alerts as (\n\n            select\n                change_id as data_issue_id,\n                detected_at,\n                database_name,\n                schema_name,\n                table_name,\n                {{ elementary.null_string() }} as column_name,\n                'schema_change' as alert_type,\n                change as sub_type,\n                change_description as alert_description,\n                {{ elementary.null_string() }} as owner,\n                {{ elementary.null_string() }} as tags,\n                {{ elementary.null_string() }} as alert_results_query,\n                {{ elementary.null_string() }} as other\n            from table_changes\n\n        ),\n\n        column_changes_alerts as (\n\n            select\n                change_id as data_issue_id,\n                detected_at,\n                database_name,\n                schema_name,\n                table_name,\n                column_name,\n                'schema_change' as alert_type,\n                change as sub_type,\n                change_description as alert_description,\n                {{ elementary.null_string() }} as owner,\n                {{ elementary.null_string() }} as tags,\n                {{ elementary.null_string() }} as alert_results_query,\n                {{ elementary.null_string() }} as other\n            from column_changes\n\n        ),\n\n        all_alerts as (\n\n            select * from table_changes_alerts\n            union all\n            select * from column_changes_alerts\n\n        ),\n\n        all_alerts_with_test_execution_id as (\n            select {{ dbt_utils.surrogate_key([\n                     'data_issue_id',\n                     elementary.const_as_string(test_execution_id)\n                    ]) }} as alert_id,\n                    {{ elementary.const_as_string(test_execution_id) }} as test_execution_id,\n                    {{ elementary.const_as_string(test_unique_id) }} as test_unique_id,\n                    *\n            from all_alerts\n        )\n\n        select * from all_alerts_with_test_execution_id\n        {%- if last_alert %}\n            {%- set last_alert_quoted = \"'\"~ last_alert ~\"'\" %}\n            where detected_at > {{ elementary.cast_as_timestamp(last_alert_quoted) }}\n        {%- endif %}\n    {%- endset %}\n    {{ return(schema_changes_test_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_test_execution_id", "macro.elementary.get_test_unique_id", "macro.elementary.full_table_name", "macro.elementary.null_string", "macro.dbt_utils.surrogate_key", "macro.elementary.const_as_string", "macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.814441}, "macro.elementary.column_monitoring_query": {"unique_id": "macro.elementary.column_monitoring_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/column_monitoring_query.sql", "name": "column_monitoring_query", "macro_sql": "{% macro column_monitoring_query(monitored_table_relation, timestamp_column, is_timestamp, min_bucket_start, column_obj, column_monitors) %}\n\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {%- set full_table_name_str = \"'\"~ elementary.relation_to_full_name(monitored_table_relation) ~\"'\" -%}\n\n    with filtered_monitored_table as (\n\n        select {{ column_obj.quoted }}\n            {% if is_timestamp -%}\n             , {{ elementary.date_trunc('day', timestamp_column) }} as edr_bucket\n            {%- else %}\n            , {{ elementary.null_timestamp() }} as edr_bucket\n            {%- endif %}\n        from {{ monitored_table_relation }}\n        where\n        {% if is_timestamp -%}\n            {{ elementary.cast_as_timestamp(timestamp_column) }} >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n            and {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n        {%- else %}\n            true\n        {%- endif %}\n\n    ),\n\n    column_monitors as (\n\n        {%- if column_monitors %}\n            {%- set column = column_obj.quoted -%}\n                select\n                    edr_bucket,\n                    {{ elementary.const_as_string(column_obj.name) }} as edr_column_name,\n                    {%- if 'null_count' in column_monitors -%} {{ elementary.null_count(column) }} {%- else -%} null {% endif %} as null_count,\n                    {%- if 'null_percent' in column_monitors -%} {{ elementary.null_percent(column) }} {%- else -%} null {% endif %} as null_percent,\n                    {%- if 'max' in column_monitors -%} {{ elementary.max(column) }} {%- else -%} null {% endif %} as max,\n                    {%- if 'min' in column_monitors -%} {{ elementary.min(column) }} {%- else -%} null {% endif %} as min,\n                    {%- if 'average' in column_monitors -%} {{ elementary.average(column) }} {%- else -%} null {% endif %} as average,\n                    {%- if 'zero_count' in column_monitors -%} {{ elementary.zero_count(column) }} {%- else -%} null {% endif %} as zero_count,\n                    {%- if 'zero_percent' in column_monitors -%} {{ elementary.zero_percent(column) }} {%- else -%} null {% endif %} as zero_percent,\n                    {%- if 'standard_deviation' in column_monitors -%} {{ elementary.standard_deviation(column) }} {%- else -%} null {% endif %} as standard_deviation,\n                    {%- if 'variance' in column_monitors -%} {{ elementary.variance(column) }} {%- else -%} null {% endif %} as variance,\n                    {%- if 'max_length' in column_monitors -%} {{ elementary.max_length(column) }} {%- else -%} null {% endif %} as max_length,\n                    {%- if 'min_length' in column_monitors -%} {{ elementary.min_length(column) }} {%- else -%} null {% endif %} as min_length,\n                    {%- if 'average_length' in column_monitors -%} {{ elementary.average_length(column) }} {%- else -%} null {% endif %} as average_length,\n                    {%- if 'missing_count' in column_monitors -%} {{ elementary.missing_count(column) }} {%- else -%} null {% endif %} as missing_count,\n                    {%- if 'missing_percent' in column_monitors -%} {{ elementary.missing_percent(column) }} {%- else -%} null {% endif %} as missing_percent\n                from filtered_monitored_table\n                group by 1,2\n        {%- else %}\n            {{ elementary.empty_column_monitors_cte() }}\n        {%- endif %}\n\n    ),\n\n    column_monitors_unpivot as (\n\n        {%- if column_monitors %}\n            {% for monitor in column_monitors %}\n                select edr_column_name, edr_bucket, {{ elementary.cast_as_string(\"'\"~ monitor ~\"'\") }} as metric_name, {{ elementary.cast_as_float(monitor) }} as metric_value from column_monitors where {{ monitor }} is not null\n                {% if not loop.last %} union all {% endif %}\n            {%- endfor %}\n        {%- else %}\n            {{ elementary.empty_column_unpivot_cte() }}\n        {%- endif %}\n\n    ),\n\n    metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            edr_column_name as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {%- if is_timestamp %}\n                edr_bucket as bucket_start,\n                {{ elementary.timeadd('day',1,'edr_bucket') }} as bucket_end,\n                24 as bucket_duration_hours\n            {%- else %}\n                {{ elementary.null_timestamp() }} as bucket_start,\n                {{ elementary.cast_as_timestamp(max_bucket_end) }} as bucket_end,\n                {{ elementary.null_int() }} as bucket_duration_hours\n            {%- endif %}\n        from column_monitors_unpivot\n\n    )\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{- dbt_utils.current_timestamp_in_utc() -}} as updated_at\n    from metrics_final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.relation_to_full_name", "macro.elementary.date_trunc", "macro.elementary.null_timestamp", "macro.elementary.cast_as_timestamp", "macro.elementary.const_as_string", "macro.elementary.null_count", "macro.elementary.null_percent", "macro.elementary.max", "macro.elementary.min", "macro.elementary.average", "macro.elementary.zero_count", "macro.elementary.zero_percent", "macro.elementary.standard_deviation", "macro.elementary.variance", "macro.elementary.max_length", "macro.elementary.min_length", "macro.elementary.average_length", "macro.elementary.missing_count", "macro.elementary.missing_percent", "macro.elementary.empty_column_monitors_cte", "macro.elementary.cast_as_string", "macro.elementary.cast_as_float", "macro.elementary.empty_column_unpivot_cte", "macro.elementary.null_string", "macro.elementary.timeadd", "macro.elementary.null_int", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8283892}, "macro.elementary.table_monitoring_query": {"unique_id": "macro.elementary.table_monitoring_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "original_file_path": "macros/edr/data_monitoring/monitors_query/table_monitoring_query.sql", "name": "table_monitoring_query", "macro_sql": "{% macro table_monitoring_query(monitored_table_relation, timestamp_column, is_timestamp, min_bucket_start, table_monitors, freshness_column=none) %}\n\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {%- set max_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(1)).strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {% set full_table_name_str = \"'\"~ elementary.relation_to_full_name(monitored_table_relation) ~\"'\" %}\n\n    {% if is_timestamp %}\n        with filtered_monitored_table as (\n            select *,\n                   {{ elementary.date_trunc('day', timestamp_column) }} as start_bucket_in_data\n            from {{ monitored_table_relation }}\n            where\n                {{ elementary.cast_as_timestamp(timestamp_column) }} >= {{ elementary.cast_as_timestamp(min_bucket_start) }}\n                and {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.cast_as_timestamp(max_bucket_end) }}\n        ),\n\n        daily_buckets as (\n            {{ elementary.daily_buckets_cte() }}\n            where edr_daily_bucket >= {{ elementary.cast_as_timestamp(min_bucket_start) }} and\n                  edr_daily_bucket <= {{ elementary.cast_as_timestamp(max_bucket_start) }} and\n                  edr_daily_bucket >= (select min(start_bucket_in_data) from filtered_monitored_table)\n        ),\n\n        {%- if 'row_count' in table_monitors %}\n\n        daily_row_count as (\n            select edr_daily_bucket,\n                   start_bucket_in_data,\n                   case when start_bucket_in_data is null then\n                       0\n                   else {{ elementary.cast_as_float(elementary.row_count()) }} end as row_count_value\n            from daily_buckets left join filtered_monitored_table on (edr_daily_bucket = start_bucket_in_data)\n            group by 1,2\n        ),\n\n        row_count as (\n            select edr_daily_bucket as edr_bucket,\n                   {{ elementary.const_as_string('row_count') }} as metric_name,\n                   {{ elementary.null_string() }} as source_value,\n                   row_count_value as metric_value\n            from daily_row_count\n        ),\n\n        {%- else %}\n\n        row_count as (\n            {{ elementary.empty_table([('edr_bucket','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')]) }}\n        ),\n\n        {%- endif %}\n\n        table_freshness as (\n        {%- if 'freshness' in table_monitors %}\n            {%- if freshness_column is undefined or freshness_column is none %}\n                {%- set freshness_column = timestamp_column %}\n            {%- endif %}\n            select\n                edr_daily_bucket as edr_bucket,\n                {{ elementary.const_as_string('freshness') }} as metric_name,\n                {{ elementary.to_char('max('~freshness_column~')') }} as source_value,\n                {{ elementary.timediff('second', elementary.cast_as_timestamp('max('~freshness_column~')'), elementary.timeadd('day','1','edr_daily_bucket')) }} as metric_value\n            from daily_buckets, {{ monitored_table_relation }}\n            where {{ elementary.cast_as_timestamp(timestamp_column) }} <= {{ elementary.timeadd('day','1','edr_daily_bucket') }}\n            group by 1,2\n        {%- else %}\n            {{ elementary.empty_table([('edr_bucket','timestamp'),('metric_name','string'),('source_value','string'),('metric_value','int')]) }}\n        {%- endif %}\n        ),\n\n        union_metrics as (\n\n        select * from row_count\n        union all\n        select * from table_freshness\n\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            source_value,\n            edr_bucket as bucket_start,\n            {{ elementary.timeadd('day',1,'edr_bucket') }} as bucket_end,\n            24 as bucket_duration_hours\n        from\n            union_metrics\n        where (metric_value is not null and cast(metric_value as {{ dbt_utils.type_int() }}) < {{ elementary.get_config_var('max_int') }}) or\n            metric_value is null\n        )\n    {% else %}\n        with row_count as (\n            {%- if 'row_count' in table_monitors %}\n                select\n                    {{ elementary.const_as_string('row_count') }} as metric_name,\n                    {{ elementary.row_count() }} as metric_value\n                from {{ monitored_table_relation }}\n                group by 1\n            {%- else %}\n                {{ elementary.empty_table([('metric_name','string'),('metric_value','int')]) }}\n            {%- endif %}\n        ),\n\n        metrics_final as (\n\n        select\n            {{ elementary.cast_as_string(full_table_name_str) }} as full_table_name,\n            {{ elementary.null_string() }} as column_name,\n            metric_name,\n            {{ elementary.cast_as_float('metric_value') }} as metric_value,\n            {{ elementary.null_string() }} as source_value,\n            {{ elementary.null_timestamp() }} as bucket_start,\n            {{ elementary.cast_as_timestamp(max_bucket_end) }} as bucket_end,\n            {{ elementary.null_int() }} as bucket_duration_hours\n        from row_count\n\n        )\n    {% endif %}\n\n    select\n        {{ dbt_utils.surrogate_key([\n            'full_table_name',\n            'column_name',\n            'metric_name',\n            'bucket_end'\n        ]) }} as id,\n        full_table_name,\n        column_name,\n        metric_name,\n        metric_value,\n        source_value,\n        bucket_start,\n        bucket_end,\n        bucket_duration_hours,\n        {{- dbt_utils.current_timestamp_in_utc() -}} as updated_at\n\n    from metrics_final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.relation_to_full_name", "macro.elementary.date_trunc", "macro.elementary.cast_as_timestamp", "macro.elementary.daily_buckets_cte", "macro.elementary.cast_as_float", "macro.elementary.row_count", "macro.elementary.const_as_string", "macro.elementary.null_string", "macro.elementary.empty_table", "macro.elementary.to_char", "macro.elementary.timediff", "macro.elementary.timeadd", "macro.elementary.cast_as_string", "macro.dbt_utils.type_int", "macro.elementary.get_config_var", "macro.elementary.null_timestamp", "macro.elementary.null_int", "macro.dbt_utils.surrogate_key", "macro.dbt_utils.current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.838412}, "macro.elementary.get_column_obj_and_monitors": {"unique_id": "macro.elementary.get_column_obj_and_monitors", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "get_column_obj_and_monitors", "macro_sql": "{% macro get_column_obj_and_monitors(model_relation, column_name, column_tests=none) %}\n\n    {%- set column_obj_and_monitors = [] %}\n    {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n\n    {%- for column_obj in column_objects %}\n        {% if column_obj.name | lower == column_name | lower %}\n            {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n            {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n            {{ return(column_item) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(none) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.840689}, "macro.elementary.get_all_column_obj_and_monitors": {"unique_id": "macro.elementary.get_all_column_obj_and_monitors", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "get_all_column_obj_and_monitors", "macro_sql": "{% macro get_all_column_obj_and_monitors(model_relation, column_tests=none) %}\n\n    {%- set column_obj_and_monitors = [] %}\n    {%- set column_objects = adapter.get_columns_in_relation(model_relation) -%}\n\n    {%- for column_obj in column_objects %}\n        {%- set column_monitors = elementary.column_monitors_by_type(column_obj.dtype, column_tests) %}\n        {%- set column_item = {'column': column_obj, 'monitors': column_monitors} %}\n        {%- do column_obj_and_monitors.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(column_obj_and_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.column_monitors_by_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.841275}, "macro.elementary.column_monitors_by_type": {"unique_id": "macro.elementary.column_monitors_by_type", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "column_monitors_by_type", "macro_sql": "{% macro column_monitors_by_type(data_type, column_tests=none) %}\n\n    {%- set normalized_data_type = elementary.normalize_data_type(data_type) %}\n\n    {%- set default_all_types = elementary.get_config_var('edr_monitors')['column_any_type'] | list %}\n    {%- set default_numeric_monitors = elementary.get_config_var('edr_monitors')['column_numeric'] | list %}\n    {%- set default_string_monitors = elementary.get_config_var('edr_monitors')['column_string'] | list %}\n\n    {# if column_tests is null, default is to use all relevant monitors for this data type #}\n    {%- if column_tests %}\n        {%- set monitors_list = column_tests %}\n    {%- else %}\n        {% set monitors_list = [] %}\n        {% do monitors_list.extend(default_all_types) %}\n        {% do monitors_list.extend(default_numeric_monitors) %}\n        {% do monitors_list.extend(default_string_monitors) %}\n    {%- endif %}\n\n    {%- set column_monitors = [] %}\n    {%- set all_types_intersect = elementary.lists_intersection(monitors_list, default_all_types) %}\n    {% do column_monitors.extend(all_types_intersect) %}\n\n    {%- if normalized_data_type == 'numeric' %}\n        {%- set numeric_intersect = elementary.lists_intersection(monitors_list, default_numeric_monitors) %}\n        {% do column_monitors.extend(numeric_intersect) %}\n    {%- endif %}\n\n    {%- if normalized_data_type == 'string' %}\n        {%- set string_intersect = elementary.lists_intersection(monitors_list, default_string_monitors) %}\n        {% do column_monitors.extend(string_intersect) %}\n    {%- endif %}\n\n    {{ return(column_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.normalize_data_type", "macro.elementary.get_config_var", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.842735}, "macro.elementary.all_column_monitors": {"unique_id": "macro.elementary.all_column_monitors", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_column_monitors.sql", "name": "all_column_monitors", "macro_sql": "{% macro all_column_monitors() %}\n    {%- set all_column_monitors = [] %}\n    {%- set numeric = elementary.get_config_var('edr_monitors')['column_numeric'] %}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_any_type']) -%}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_string']) -%}\n    {%- do all_column_monitors.extend(elementary.get_config_var('edr_monitors')['column_numeric']) -%}\n    {{ return(all_column_monitors) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.843331}, "macro.elementary.get_final_table_monitors": {"unique_id": "macro.elementary.get_final_table_monitors", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "name": "get_final_table_monitors", "macro_sql": "{% macro get_final_table_monitors(table_anomalies=none) %}\n    {%- set final_table_monitors = [] %}\n    {%- set default_table_monitors = elementary.get_default_table_monitors() %}\n\n    {%- if table_anomalies and table_anomalies | length > 0 %}\n        {%- set final_table_monitors = elementary.lists_intersection(table_anomalies, default_table_monitors) %}\n    {%- else %}\n        {%- set final_table_monitors = default_table_monitors %}\n    {%- endif %}\n    {# schema_changes is a different flow #}\n    {% if 'schema_changes' in final_table_monitors %}\n        {%- do final_table_monitors.remove('schema_changes') %}\n    {% endif %}\n    {{ return(final_table_monitors) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_default_table_monitors", "macro.elementary.lists_intersection"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.844241}, "macro.elementary.get_default_table_monitors": {"unique_id": "macro.elementary.get_default_table_monitors", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_table_monitors.sql", "name": "get_default_table_monitors", "macro_sql": "{% macro get_default_table_monitors() %}\n\n    {%- set default_table_monitors = elementary.get_config_var('edr_monitors')['table'] | list %}\n    {{ return(default_table_monitors) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.844481}, "macro.elementary.get_global_min_bucket_start": {"unique_id": "macro.elementary.get_global_min_bucket_start", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_global_min_bucket_start", "macro_sql": "{% macro get_global_min_bucket_start() %}\n    {%- set global_min_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {{ return(global_min_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.846608}, "macro.elementary.get_global_min_bucket_start_as_datetime": {"unique_id": "macro.elementary.get_global_min_bucket_start_as_datetime", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_global_min_bucket_start_as_datetime", "macro_sql": "{% macro get_global_min_bucket_start_as_datetime() %}\n    {%- set global_min_bucket_start = run_started_at - modules.datetime.timedelta(elementary.get_config_var('days_back')) %}\n    {{ return(global_min_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.846878}, "macro.elementary.get_max_bucket_end": {"unique_id": "macro.elementary.get_max_bucket_end", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_max_bucket_end", "macro_sql": "{% macro get_max_bucket_end() %}\n    {%- set max_bucket_end = \"'\"~ run_started_at.strftime(\"%Y-%m-%d 00:00:00\")~\"'\" %}\n    {{ return(max_bucket_end) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.847113}, "macro.elementary.get_backfill_bucket_start": {"unique_id": "macro.elementary.get_backfill_bucket_start", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_backfill_bucket_start", "macro_sql": "{% macro get_backfill_bucket_start() %}\n    {%- set backfill_bucket_start = \"'\"~ (run_started_at - modules.datetime.timedelta(elementary.get_config_var('backfill_days_per_run'))).strftime(\"%Y-%m-%d 00:00:00\") ~\"'\" %}\n    {{ return(backfill_bucket_start) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.847446}, "macro.elementary.get_min_bucket_start": {"unique_id": "macro.elementary.get_min_bucket_start", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_buckets_configuration.sql", "name": "get_min_bucket_start", "macro_sql": "{% macro get_min_bucket_start(full_table_name,monitors=none,column_name=none) %}\n\n    {%- set global_min_bucket_start = elementary.get_global_min_bucket_start() %}\n    {%- set backfill_bucket_start = elementary.get_backfill_bucket_start() %}\n\n    {%- if monitors %}\n        {%- set monitors_tuple = elementary.strings_list_to_tuple(monitors) %}\n    {%- endif %}\n\n    {%- set min_bucket_start_query %}\n        with min_times as (\n            select min(last_bucket_end) as last_run,\n                {{ elementary.cast_as_timestamp(global_min_bucket_start) }} as global_min_start,\n                {{ elementary.cast_as_timestamp(backfill_bucket_start) }} as backfill_start\n            from {{ ref('monitors_runs') }}\n            where upper(full_table_name) = upper('{{ full_table_name }}')\n            {%- if monitors %}\n                and metric_name in {{ monitors_tuple }}\n            {%- endif %}\n            {%- if column_name %}\n                and upper(column_name) = upper('{{ column_name }}')\n            {%- endif %}\n            )\n        select\n            case\n                when last_run is null then global_min_start\n                when last_run < backfill_start then last_run\n                else backfill_start\n            end as min_start\n        from min_times\n    {%- endset %}\n\n    {%- set min_bucket_start_query_result = elementary.result_value(min_bucket_start_query) %}\n\n    {%- if min_bucket_start_query_result %}\n        {{ return(min_bucket_start_query_result) }}\n    {%- else %}\n        {{ return(global_min_bucket_start) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_global_min_bucket_start", "macro.elementary.get_backfill_bucket_start", "macro.elementary.strings_list_to_tuple", "macro.elementary.cast_as_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.848416}, "macro.elementary.get_is_column_timestamp": {"unique_id": "macro.elementary.get_is_column_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "original_file_path": "macros/edr/data_monitoring/data_monitors_configuration/get_is_column_timestamp.sql", "name": "get_is_column_timestamp", "macro_sql": "{% macro get_is_column_timestamp(table_relation,timestamp_column,timestamp_column_data_type) %}\n    {%- if timestamp_column_data_type == 'string' %}\n        {%- set is_timestamp = elementary.try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {%- elif timestamp_column_data_type == 'timestamp' %}\n        {%- set is_timestamp = true %}\n    {%- else %}\n        {%- set is_timestamp = false %}\n    {%- endif %}\n    {{ return(is_timestamp) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.849063}, "macro.elementary.upload_edr_configuration": {"unique_id": "macro.elementary.upload_edr_configuration", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "upload_edr_configuration", "macro_sql": "{% macro upload_edr_configuration() %}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run and flags.WHICH == 'run' %}\n        {% set nodes = elementary.get_nodes_from_graph() %}\n        {% set test_nodes = nodes | selectattr('resource_type', '==', 'test') %}\n        {% set config_in_tests = elementary.get_config_from_tests(test_nodes) %}\n        {% do elementary.upload_tables_configuration(nodes, config_in_tests) %}\n        {% do elementary.upload_columns_configuration(nodes, config_in_tests) %}\n    {% endif %}\n    {{ return('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_nodes_from_graph", "macro.elementary.get_config_from_tests", "macro.elementary.upload_tables_configuration", "macro.elementary.upload_columns_configuration"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8798678}, "macro.elementary.upload_tables_configuration": {"unique_id": "macro.elementary.upload_tables_configuration", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "upload_tables_configuration", "macro_sql": "{% macro upload_tables_configuration(nodes, config_in_tests) %}\n    {% set empty_table_config_query = elementary.empty_table([('full_table_name', 'string'),\n                                                              ('database_name', 'string'),\n                                                              ('schema_name', 'string'),\n                                                              ('table_name', 'string'),\n                                                              ('timestamp_column', 'string'),\n                                                              ('bucket_duration_hours', 'int'),\n                                                              ('table_monitored', 'boolean'),\n                                                              ('table_monitors', 'string'),\n                                                              ('columns_monitored', 'boolean')]) %}\n    {% set table_config_relation = elementary.create_source_table('table_monitors_config', empty_table_config_query, True) %}\n    {% set table_monitors = [] %}\n    {% for node in nodes | selectattr('resource_type', 'in', 'seed,source,model') -%}\n        {% set table_config_dict = elementary.get_table_config(node, config_in_tests) %}\n        {% if table_config_dict is not none %}\n            {% do table_monitors.append(table_config_dict) %}\n        {% endif %}\n    {% endfor %}\n    {% if table_monitors|length > 0 %}\n        {% do elementary.insert_dicts(table_config_relation, table_monitors) %}\n    {% endif %}\n    -- remove empty rows\n    {% do elementary.remove_empty_rows(table_config_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table", "macro.elementary.create_source_table", "macro.elementary.get_table_config", "macro.elementary.insert_dicts", "macro.elementary.remove_empty_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8812768}, "macro.elementary.upload_columns_configuration": {"unique_id": "macro.elementary.upload_columns_configuration", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "upload_columns_configuration", "macro_sql": "{% macro upload_columns_configuration(nodes, config_in_tests) %}\n    {% set empty_columns_config_query = elementary.empty_table([('full_column_name', 'string'),\n                                                                ('database_name', 'string'),\n                                                                ('schema_name', 'string'),\n                                                                ('table_name', 'string'),\n                                                                ('column_name', 'string'),\n                                                                ('column_monitors', 'string')]) %}\n    {% set column_config_relation = elementary.create_source_table('column_monitors_config', empty_columns_config_query, True) %}\n    {% set column_monitors = [] %}\n    {% for node in nodes | selectattr('resource_type', 'in', 'seed,source,model') -%}\n        {% do column_monitors.extend(elementary.get_columns_config(node, config_in_tests)) %}\n    {% endfor %}\n    {% if column_monitors | length > 0 %}\n        {% do elementary.insert_dicts(column_config_relation, column_monitors) %}\n    {% endif %}\n    -- remove empty rows\n    {% do elementary.remove_empty_rows(column_config_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table", "macro.elementary.create_source_table", "macro.elementary.get_columns_config", "macro.elementary.insert_dicts", "macro.elementary.remove_empty_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8823411}, "macro.elementary.get_config_from_tests": {"unique_id": "macro.elementary.get_config_from_tests", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "get_config_from_tests", "macro_sql": "{% macro get_config_from_tests(test_nodes) %}\n    {% set config_in_tests = {} %}\n    {% for node in test_nodes %}\n        {% set edr_config = elementary.get_elementary_config_from_test(node) %}\n        {% if edr_config %}\n            {% set test_name = edr_config.get('test_name') %}\n            {% set model_unique_id = edr_config.get('model_unique_id') %}\n            {% if model_unique_id %}\n                {% if model_unique_id not in config_in_tests %}\n                    {% do config_in_tests.update({model_unique_id: {'table_monitors': [], 'columns': {}}}) %}\n                {% endif %}\n                {% if test_name == 'table_anomalies' %}\n                    {% set table_monitors = edr_config.get('table_monitors') %}\n                    {% if not table_monitors %}\n                        {% set table_monitors = [] %}\n                    {% endif %}\n                    {% do config_in_tests[model_unique_id]['table_monitors'].extend([table_monitors]) %}\n                {% elif test_name == 'schema_changes' %}\n                    {% do config_in_tests[model_unique_id]['table_monitors'].extend([['schema_changes']]) %}\n                {% elif test_name == 'column_anomalies' or 'all_columns_anomalies' %}\n                    {% set column_name = edr_config.get('column_name') %}\n                    {% if not column_name %}\n                        {% set column_name = '__ALL_COLUMNS__'%}\n                    {% endif %}\n                    {% set column_monitors = edr_config.get('column_monitors') %}\n                    {% if not column_monitors %}\n                        {% set column_monitors = [] %}\n                    {% endif %}\n                    {% if column_name in config_in_tests[model_unique_id]['columns'] %}\n                        {% do config_in_tests[model_unique_id]['columns'][column_name].extend([column_monitors]) %}\n                    {% else %}\n                        {% do config_in_tests[model_unique_id]['columns'].update({column_name: [column_monitors]}) %}\n                    {% endif %}\n                {% endif %}\n            {% endif %}\n        {% endif %}\n    {% endfor %}\n    {{ return(config_in_tests) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_elementary_config_from_test"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8846028}, "macro.elementary.find_test_model_unique_id": {"unique_id": "macro.elementary.find_test_model_unique_id", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "find_test_model_unique_id", "macro_sql": "{% macro find_test_model_unique_id(test_depends_on) %}\n    {% set depends_on_nodes = test_depends_on.get('nodes') %}\n    {% if depends_on_nodes %}\n        {% for node in depends_on_nodes %}\n            {% if not node.startswith('model.elementary.') %}\n                {{ return(node) }}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.885099}, "macro.elementary.get_elementary_config_from_test": {"unique_id": "macro.elementary.get_elementary_config_from_test", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "get_elementary_config_from_test", "macro_sql": "{% macro get_elementary_config_from_test(test_node) %}\n    {% set edr_config = {} %}\n    {% set test_metadata = test_node.get('test_metadata') %}\n    {% if test_metadata %}\n        {% set test_name = test_metadata.get('name') %}\n        {% set test_namespace = test_metadata.get('namespace') %}\n        {% set test_params = test_metadata.get('kwargs') %}\n        {% if test_params %}\n            {% set test_column_name = test_params.get('column_name') %}\n            {% set test_column_monitors = test_params.get('column_anomalies') %}\n            {% set test_table_monitors = test_params.get('table_anomalies') %}\n            {% if test_namespace == 'elementary' %}\n                {% set test_model_unique_id = none %}\n                {% set test_depends_on = test_node.get('depends_on') %}\n                {% if test_depends_on %}\n                    {% set test_model_unique_id = elementary.find_test_model_unique_id(test_depends_on) %}\n                {% endif %}\n                {% if test_model_unique_id %}\n                    {% set edr_config = {'model_unique_id': test_model_unique_id,\n                                         'table_monitors': test_table_monitors,\n                                         'column_name': test_column_name,\n                                         'column_monitors': test_column_monitors,\n                                         'test_name': test_name} %}\n                {% endif %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {{ return(edr_config) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.find_test_model_unique_id"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.8864799}, "macro.elementary.get_table_config": {"unique_id": "macro.elementary.get_table_config", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "get_table_config", "macro_sql": "{% macro get_table_config(node, config_in_tests) %}\n    {% set node_unique_id = node.get('unique_id') %}\n    {% if node_unique_id in config_in_tests %}\n        {% set table_monitors = config_in_tests[node_unique_id].get('table_monitors') %}\n        {% set columns = config_in_tests[node_unique_id].get('columns') %}\n        {% if columns %}\n            {% set columns_monitored = True %}\n        {% endif %}\n        {% set table_name = elementary.get_table_name_from_node(node) %}\n        {% set full_table_name = node.database + '.' + node.schema + '.' + table_name %}\n        {% set elementary_config = elementary.get_elementary_config_from_node(node) %}\n        {% set timestamp_column = elementary_config.get('timestamp_column') %}\n        {% if timestamp_column %}\n            {% set timestamp_column = timestamp_column | upper %}\n        {% endif %}\n        {{ return({'full_table_name': full_table_name | upper,\n                   'database_name': node.database | upper,\n                   'schema_name': node.schema | upper,\n                   'table_name': table_name | upper,\n                   'timestamp_column': timestamp_column,\n                   'bucket_duration_hours': 24,\n                   'table_monitored': True,\n                   'table_monitors': table_monitors,\n                   'columns_monitored': columns_monitored}) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_table_name_from_node", "macro.elementary.get_elementary_config_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.887949}, "macro.elementary.get_columns_config": {"unique_id": "macro.elementary.get_columns_config", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "original_file_path": "macros/edr_sources/configuration/upload_edr_configuration.sql", "name": "get_columns_config", "macro_sql": "{% macro get_columns_config(node, config_in_tests) %}\n    {% set column_config_dicts = [] %}\n    {% set node_unique_id = node.get('unique_id') %}\n    {% if node_unique_id in config_in_tests %}\n        {% set columns = config_in_tests[node_unique_id].get('columns') %}\n        {% if columns %}\n            {% set table_name = elementary.get_table_name_from_node(node) %}\n            {% for column_name, column_monitors in columns.items() %}\n                {% set full_column_name = node.database + '.' + node.schema + '.' + table_name + '.' + column_name %}\n                {% do column_config_dicts.append({'full_column_name': full_column_name | upper,\n                                                  'database_name': node.database | upper,\n                                                  'schema_name': node.schema | upper,\n                                                  'table_name': table_name | upper,\n                                                  'column_name': column_name | upper,\n                                                  'column_monitors': column_monitors}) %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(column_config_dicts) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_table_name_from_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743708.889079}, "macro.elementary.upload_dbt_artifacts": {"unique_id": "macro.elementary.upload_dbt_artifacts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "upload_dbt_artifacts", "macro_sql": "{% macro upload_dbt_artifacts(results) %}\n    {% set edr_cli_run = elementary.get_config_var('edr_cli_run') %}\n    {% if execute and not edr_cli_run %}\n\n        -- handle models\n        {% set nodes = graph.nodes.values() | selectattr('resource_type', '==', 'model') %}\n        {% set flatten_node_macro = context['elementary']['flatten_model'] %}\n        {% set dbt_models_empty_table_query = elementary.get_dbt_models_empty_table_query() %}\n        {% set dbt_models = elementary.create_source_table('dbt_models', dbt_models_empty_table_query, True) %}\n        {% do elementary.insert_nodes_to_table(dbt_models, nodes, flatten_node_macro) %}\n        {% do adapter.commit() %}\n\n        -- handle tests\n        {% set nodes = graph.nodes.values() | selectattr('resource_type', '==', 'test') %}\n        {% set flatten_node_macro = context['elementary']['flatten_test'] %}\n        {% set dbt_tests_empty_table_query = elementary.get_dbt_tests_empty_table_query() %}\n        {% set dbt_tests = elementary.create_source_table('dbt_tests', dbt_tests_empty_table_query, True) %}\n        {% do elementary.insert_nodes_to_table(dbt_tests, nodes, flatten_node_macro) %}\n        {% do adapter.commit() %}\n\n        -- handle sources\n        {% set nodes = graph.sources.values() | selectattr('resource_type', '==', 'source') %}\n        {% set flatten_node_macro = context['elementary']['flatten_source'] %}\n        {% set dbt_sources_empty_table_query = elementary.get_dbt_sources_empty_table_query() %}\n        {% set dbt_sources = elementary.create_source_table('dbt_sources', dbt_sources_empty_table_query, True) %}\n        {% do elementary.insert_nodes_to_table(dbt_sources, nodes, flatten_node_macro) %}\n        {% do adapter.commit() %}\n\n        -- handle exposures\n        {% set nodes = graph.exposures.values() | selectattr('resource_type', '==', 'exposure') %}\n        {% set flatten_node_macro = context['elementary']['flatten_exposure'] %}\n        {% set dbt_exposures_empty_table_query = elementary.get_dbt_exposures_empty_table_query() %}\n        {% set dbt_exposures = elementary.create_source_table('dbt_exposures', dbt_exposures_empty_table_query, True) %}\n        {% do elementary.insert_nodes_to_table(dbt_exposures, nodes, flatten_node_macro) %}\n        {% do adapter.commit() %}\n\n        -- handle metrics\n        {% set nodes = graph.metrics.values() | selectattr('resource_type', '==', 'metric') %}\n        {% set flatten_node_macro = context['elementary']['flatten_metric'] %}\n        {% set dbt_metrics_empty_table_query = elementary.get_dbt_metrics_empty_table_query() %}\n        {% set dbt_metrics = elementary.create_source_table('dbt_metrics', dbt_metrics_empty_table_query, True) %}\n        {% do elementary.insert_nodes_to_table(dbt_metrics, nodes, flatten_node_macro) %}\n        {% do adapter.commit() %}\n\n        -- handle run_results\n        {% if results %}\n            {% set flatten_node_macro = context['elementary']['flatten_run_result'] %}\n            {% set dbt_run_results_empty_table_query = elementary.get_dbt_run_results_empty_table_query() %}\n            {% set dbt_run_results = elementary.create_source_table('dbt_run_results',\n                                                                    dbt_run_results_empty_table_query,\n                                                                    False,\n                                                                    elementary.get_config_var('refresh_dbt_artifacts')) %}\n            {% do elementary.insert_nodes_to_table(dbt_run_results, results, flatten_node_macro) %}\n            {% do adapter.commit() %}\n        {% endif %}\n    {% endif %}\n    {{ return ('') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_config_var", "macro.elementary.get_dbt_models_empty_table_query", "macro.elementary.create_source_table", "macro.elementary.insert_nodes_to_table", "macro.elementary.get_dbt_tests_empty_table_query", "macro.elementary.get_dbt_sources_empty_table_query", "macro.elementary.get_dbt_exposures_empty_table_query", "macro.elementary.get_dbt_metrics_empty_table_query", "macro.elementary.get_dbt_run_results_empty_table_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.103771}, "macro.elementary.insert_nodes_to_table": {"unique_id": "macro.elementary.insert_nodes_to_table", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "insert_nodes_to_table", "macro_sql": "{% macro insert_nodes_to_table(table_name, nodes, flatten_node_macro) %}\n    {% set artifacts = [] %}\n    {% for node in nodes %}\n        {% set metadata_dict = flatten_node_macro(node) %}\n        {% if metadata_dict is not none %}\n            {% do artifacts.append(metadata_dict) %}\n        {% endif %}\n    {% endfor %}\n    {%- set artifacts_length = artifacts | length %}\n    {% if artifacts_length > 0 %}\n        {{ elementary.debug_log('Inserting ' ~ artifacts_length ~ ' rows to table ' ~ table_name) }}\n        {% do elementary.insert_dicts(table_name, artifacts, elementary.get_config_var('dbt_artifacts_chunk_size')) %}\n    {%- else %}\n        {{ elementary.debug_log('No artifacts to insert to ' ~ table_name) }}\n    {% endif %}\n    -- remove empty rows\n    {% do elementary.remove_empty_rows(table_name) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.debug_log", "macro.elementary.insert_dicts", "macro.elementary.get_config_var", "macro.elementary.remove_empty_rows"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.104716}, "macro.elementary.get_dbt_run_results_empty_table_query": {"unique_id": "macro.elementary.get_dbt_run_results_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_run_results_empty_table_query", "macro_sql": "{% macro get_dbt_run_results_empty_table_query() %}\n    {% set dbt_run_results_empty_table_query = elementary.empty_table([('model_execution_id', 'long_string'),\n                                                                       ('unique_id', 'long_string'),\n                                                                       ('invocation_id', 'string'),\n                                                                       ('generated_at', 'string'),\n                                                                       ('name', 'long_string'),\n                                                                       ('status', 'string'),\n                                                                       ('resource_type', 'string'),\n                                                                       ('execution_time', 'float'),\n                                                                       ('execute_started_at', 'string'),\n                                                                       ('execute_completed_at', 'string'),\n                                                                       ('compile_started_at', 'string'),\n                                                                       ('compile_completed_at', 'string'),\n                                                                       ('rows_affected', 'bigint'),\n                                                                       ('full_refresh', 'boolean')]) %}\n    {{ return(dbt_run_results_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.105539}, "macro.elementary.flatten_run_result": {"unique_id": "macro.elementary.flatten_run_result", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_run_result", "macro_sql": "{% macro flatten_run_result(run_result) %}\n    {% set run_result_dict = run_result.to_dict() %}\n    {% set node = elementary.safe_get_with_default(run_result_dict, 'node', {}) %}\n    {% set flatten_run_result_dict = {\n        'model_execution_id': elementary.get_node_execution_id(node),\n        'invocation_id': invocation_id,\n        'unique_id': node.get('unique_id'),\n        'name': node.get('name'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S'),\n        'rows_affected': run_result_dict.get('adapter_response', {}).get('rows_affected'),\n        'execution_time': run_result_dict.get('execution_time'),\n        'status': run_result_dict.get('status'),\n        'resource_type': node.get('resource_type'),\n        'execute_started_at': none,\n        'execute_completed_at': none,\n        'compile_started_at': none,\n        'compile_completed_at': none,\n        'full_refresh': flags.FULL_REFRESH\n    }%}\n\n    {% set timings = elementary.safe_get_with_default(run_result_dict, 'timing', []) %}\n    {% if timings %}\n        {% for timing in timings %}\n            {% if timing is mapping %}\n                {% if timing.get('name') == 'execute' %}\n                    {% do flatten_run_result_dict.update({'execute_started_at': timing.get('started_at'), 'execute_completed_at': timing.get('completed_at')}) %}\n                {% elif timing.get('name') == 'compile' %}\n                    {% do flatten_run_result_dict.update({'compile_started_at': timing.get('started_at'), 'compile_completed_at': timing.get('completed_at')}) %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n    {% endif %}\n    {{ return(flatten_run_result_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.get_node_execution_id"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.107796}, "macro.elementary.get_dbt_models_empty_table_query": {"unique_id": "macro.elementary.get_dbt_models_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_models_empty_table_query", "macro_sql": "{% macro get_dbt_models_empty_table_query() %}\n    {% set dbt_models_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                  ('alias', 'string'),\n                                                                  ('checksum', 'string'),\n                                                                  ('materialization', 'string'),\n                                                                  ('tags', 'long_string'),\n                                                                  ('meta', 'long_string'),\n                                                                  ('owner', 'string'),\n                                                                  ('database_name', 'string'),\n                                                                  ('schema_name', 'string'),\n                                                                  ('depends_on_macros', 'long_string'),\n                                                                  ('depends_on_nodes', 'long_string'),\n                                                                  ('description', 'long_string'),\n                                                                  ('name', 'string'),\n                                                                  ('package_name', 'string'),\n                                                                  ('original_path', 'long_string'),\n                                                                  ('path', 'string'),\n                                                                  ('generated_at', 'string')]) %}\n    {{ return(dbt_models_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.108789}, "macro.elementary.flatten_model": {"unique_id": "macro.elementary.flatten_model", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_model", "macro_sql": "{% macro flatten_model(node_dict) %}\n    {% set checksum_dict = elementary.safe_get_with_default(node_dict, 'checksum', {}) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set flatten_model_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'alias': node_dict.get('alias'),\n        'checksum': checksum_dict.get('checksum'),\n        'materialization': config_dict.get('materialized'),\n        'tags': tags,\n        'meta': meta_dict,\n        'owner': owner,\n        'database_name': node_dict.get('database'),\n        'schema_name': node_dict.get('schema'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_model_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.111129}, "macro.elementary.get_dbt_tests_empty_table_query": {"unique_id": "macro.elementary.get_dbt_tests_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_tests_empty_table_query", "macro_sql": "{% macro get_dbt_tests_empty_table_query() %}\n    {% set dbt_tests_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                 ('database_name', 'string'),\n                                                                 ('schema_name', 'string'),\n                                                                 ('name', 'string'),\n                                                                 ('short_name', 'string'),\n                                                                 ('alias', 'string'),\n                                                                 ('test_column_name', 'string'),\n                                                                 ('severity', 'string'),\n                                                                 ('warn_if', 'string'),\n                                                                 ('error_if', 'string'),\n                                                                 ('test_params', 'long_string'),\n                                                                 ('test_namespace', 'string'),\n                                                                 ('tags', 'long_string'),\n                                                                 ('model_tags', 'long_string'),\n                                                                 ('model_owners', 'long_string'),\n                                                                 ('meta', 'long_string'),\n                                                                 ('depends_on_macros', 'long_string'),\n                                                                 ('depends_on_nodes', 'long_string'),\n                                                                 ('parent_model_unique_id', 'string'),\n                                                                 ('description', 'long_string'),\n                                                                 ('package_name', 'string'),\n                                                                 ('original_path', 'long_string'),\n                                                                 ('compiled_sql', 'long_string'),\n                                                                 ('path', 'string'),\n                                                                 ('generated_at', 'string')]) %}\n    {{ return(dbt_tests_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.112442}, "macro.elementary.flatten_test": {"unique_id": "macro.elementary.flatten_test", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_test", "macro_sql": "{% macro flatten_test(node_dict) %}\n    {% set config_dict = elementary.safe_get_with_default(node_dict, 'config', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n\n    {% set config_meta_dict = elementary.safe_get_with_default(config_dict, 'meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(config_meta_dict) %}\n\n    {% set config_tags = elementary.safe_get_with_default(config_dict, 'tags', []) %}\n    {% set global_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(config_tags, global_tags) %}\n    {% set tags = elementary.union_lists(tags, meta_tags) %}\n\n    {% set parent_model_unique_ids = elementary.get_parent_model_unique_ids_from_test_node(node_dict) %}\n    {% set parent_model_nodes = elementary.get_nodes_by_unique_ids(parent_model_unique_ids) %}\n    {% set parent_models_owners = [] %}\n    {% set parent_models_tags = [] %}\n    {% for parent_model_node in parent_model_nodes %}\n        {% set flatten_parent_model_node = elementary.flatten_model(parent_model_node) %}\n        {% set parent_model_owner = flatten_parent_model_node.get('owner') %}\n        {% set parent_model_tags = flatten_parent_model_node.get('tags') %}\n        {% if parent_model_owner %}\n            {% do parent_models_owners.append(parent_model_owner) %}\n        {% endif %}\n        {% if parent_model_tags and parent_model_tags is sequence %}\n            {% do parent_models_tags.extend(parent_model_tags) %}\n        {% endif %}\n    {% endfor %}\n\n    {% set primary_parent_model_database, primary_parent_model_schema = elementary.get_model_database_and_schema_from_test_node(node_dict) %}\n    {% set test_metadata = elementary.safe_get_with_default(node_dict, 'test_metadata', {}) %}\n    {% set test_kwargs = elementary.safe_get_with_default(test_metadata, 'kwargs', {}) %}\n    {% set test_model_jinja = test_kwargs.get('model') %}\n    {% set primary_parent_model_id = none %}\n    {% if test_model_jinja %}\n        {% set primary_parent_model_candidates = [] %}\n        {% for parent_model_unique_id in parent_model_unique_ids %}\n            {% set split_parent_model_unique_id = parent_model_unique_id.split('.') %}\n            {% if split_parent_model_unique_id and split_parent_model_unique_id | length > 0 %}\n                {% set parent_model_name = split_parent_model_unique_id[-1] %}\n                {% if parent_model_name and parent_model_name in test_model_jinja %}\n                    {% do primary_parent_model_candidates.append(parent_model_unique_id) %}\n                {% endif %}\n            {% endif %}\n        {% endfor %}\n        {% if primary_parent_model_candidates | length == 1 %}\n            {% set primary_parent_model_id = primary_parent_model_candidates[0] %}\n        {% endif %}\n    {% endif %}\n\n    {% set flatten_test_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'short_name': test_metadata.get('name'),\n        'alias': node_dict.get('alias'),\n        'test_column_name': node_dict.get('column_name'),\n        'severity': config_dict.get('severity'),\n        'warn_if': config_dict.get('warn_if'),\n        'error_if': config_dict.get('error_if'),\n        'test_params': test_kwargs,\n        'test_namespace': test_metadata.get('namespace'),\n        'tags': tags,\n        'model_tags': parent_models_tags,\n        'model_owners': parent_models_owners,\n        'meta': meta_dict,\n        'database_name': primary_parent_model_database,\n        'schema_name': primary_parent_model_schema,\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'parent_model_unique_id': primary_parent_model_id,\n        'description': node_dict.get('description'),\n        'name': node_dict.get('name'),\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'compiled_sql': node_dict.get('compiled_sql'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_test_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists", "macro.elementary.get_parent_model_unique_ids_from_test_node", "macro.elementary.get_nodes_by_unique_ids", "macro.elementary.flatten_model", "macro.elementary.get_model_database_and_schema_from_test_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.117048}, "macro.elementary.get_dbt_sources_empty_table_query": {"unique_id": "macro.elementary.get_dbt_sources_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_sources_empty_table_query", "macro_sql": "{% macro get_dbt_sources_empty_table_query() %}\n    {% set dbt_sources_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('database_name', 'string'),\n                                                                   ('schema_name', 'string'),\n                                                                   ('source_name', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('identifier', 'string'),\n                                                                   ('loaded_at_field', 'string'),\n                                                                   ('freshness_warn_after', 'string'),\n                                                                   ('freshness_error_after', 'string'),\n                                                                   ('freshness_filter', 'long_string'),\n                                                                   ('relation_name', 'string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('owner', 'string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('source_description', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('generated_at', 'string')]) %}\n    {{ return(dbt_sources_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.11825}, "macro.elementary.flatten_source": {"unique_id": "macro.elementary.flatten_source", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_source", "macro_sql": "{% macro flatten_source(node_dict) %}\n    {% set freshness_dict = elementary.safe_get_with_default(node_dict, 'freshness', {}) %}\n    {% set source_meta_dict = elementary.safe_get_with_default(node_dict, 'source_meta', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% do meta_dict.update(source_meta_dict) %}\n    {% set owner = meta_dict.get('owner') %}\n    {% set node_tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set meta_tags = elementary.safe_get_with_default(meta_dict, 'tags', []) %}\n    {% set tags = elementary.union_lists(node_tags, meta_tags) %}\n    {% set flatten_source_metadata_dict = {\n         'unique_id': node_dict.get('unique_id'),\n         'database_name': node_dict.get('database'),\n         'schema_name': node_dict.get('schema'),\n         'source_name': node_dict.get('source_name'),\n         'name': node_dict.get('name'),\n         'identifier': node_dict.get('identifier'),\n         'loaded_at_field': node_dict.get('loaded_at_field'),\n         'freshness_warn_after': freshness_dict.get('warn_after', {}),\n         'freshness_error_after': freshness_dict.get('error_after', {}),\n         'freshness_filter': freshness_dict.get('filter'),\n         'relation_name': node_dict.get('relation_name'),\n         'tags': tags,\n         'meta': meta_dict,\n         'owner': owner,\n         'package_name': node_dict.get('package_name'),\n         'original_path': node_dict.get('original_file_path'),\n         'path': node_dict.get('path'),\n         'source_description': node_dict.get('source_description'),\n         'description': node_dict.get('description'),\n         'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n     }%}\n    {{ return(flatten_source_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default", "macro.elementary.union_lists"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.120456}, "macro.elementary.get_dbt_exposures_empty_table_query": {"unique_id": "macro.elementary.get_dbt_exposures_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_exposures_empty_table_query", "macro_sql": "{% macro get_dbt_exposures_empty_table_query() %}\n    {% set dbt_exposures_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                     ('name', 'string'),\n                                                                     ('maturity', 'string'),\n                                                                     ('type', 'string'),\n                                                                     ('owner_email', 'string'),\n                                                                     ('owner_name', 'string'),\n                                                                     ('url', 'long_string'),\n                                                                     ('depends_on_macros', 'long_string'),\n                                                                     ('depends_on_nodes', 'long_string'),\n                                                                     ('description', 'long_string'),\n                                                                     ('tags', 'long_string'),\n                                                                     ('meta', 'long_string'),\n                                                                     ('package_name', 'string'),\n                                                                     ('original_path', 'long_string'),\n                                                                     ('path', 'string'),\n                                                                     ('generated_at', 'string')]) %}\n    {{ return(dbt_exposures_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.121411}, "macro.elementary.flatten_exposure": {"unique_id": "macro.elementary.flatten_exposure", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_exposure", "macro_sql": "{% macro flatten_exposure(node_dict) %}\n    {% set owner_dict = elementary.safe_get_with_default(node_dict, 'owner', {}) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_exposure_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'maturity': node_dict.get('maturity'),\n        'type': node_dict.get('type'),\n        'owner_email': owner_dict.get('email'),\n        'owner_name': owner_dict.get('name'),\n        'url': node_dict.get('url'),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n      }%}\n    {{ return(flatten_exposure_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.122967}, "macro.elementary.get_dbt_metrics_empty_table_query": {"unique_id": "macro.elementary.get_dbt_metrics_empty_table_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "get_dbt_metrics_empty_table_query", "macro_sql": "{% macro get_dbt_metrics_empty_table_query() %}\n    {% set dbt_metrics_empty_table_query = elementary.empty_table([('unique_id', 'string'),\n                                                                   ('name', 'string'),\n                                                                   ('label', 'string'),\n                                                                   ('model', 'string'),\n                                                                   ('type', 'string'),\n                                                                   ('sql', 'long_string'),\n                                                                   ('timestamp', 'string'),\n                                                                   ('filters', 'long_string'),\n                                                                   ('time_grains', 'long_string'),\n                                                                   ('dimensions', 'long_string'),\n                                                                   ('depends_on_macros', 'long_string'),\n                                                                   ('depends_on_nodes', 'long_string'),\n                                                                   ('description', 'long_string'),\n                                                                   ('tags', 'long_string'),\n                                                                   ('meta', 'long_string'),\n                                                                   ('package_name', 'string'),\n                                                                   ('original_path', 'long_string'),\n                                                                   ('path', 'string'),\n                                                                   ('generated_at', 'string')]) %}\n    {{ return(dbt_metrics_empty_table_query) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.empty_table"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1240268}, "macro.elementary.flatten_metric": {"unique_id": "macro.elementary.flatten_metric", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "original_file_path": "macros/edr_sources/dbt/upload_dbt_artifacts.sql", "name": "flatten_metric", "macro_sql": "{% macro flatten_metric(node_dict) %}\n    {% set depends_on_dict = elementary.safe_get_with_default(node_dict, 'depends_on', {}) %}\n    {% set meta_dict = elementary.safe_get_with_default(node_dict, 'meta', {}) %}\n    {% set tags = elementary.safe_get_with_default(node_dict, 'tags', []) %}\n    {% set flatten_metrics_metadata_dict = {\n        'unique_id': node_dict.get('unique_id'),\n        'name': node_dict.get('name'),\n        'label': node_dict.get('label'),\n        'model': node_dict.get('model'),\n        'type': node_dict.get('type'),\n        'sql': node_dict.get('sql'),\n        'timestamp': node_dict.get('timestamp'),\n        'filters': node_dict.get('filters', {}),\n        'time_grains': node_dict.get('time_grains', []),\n        'dimensions': node_dict.get('dimensions', []),\n        'depends_on_macros': depends_on_dict.get('macros', []),\n        'depends_on_nodes': depends_on_dict.get('nodes', []),\n        'description': node_dict.get('description'),\n        'tags': tags,\n        'meta': meta_dict,\n        'package_name': node_dict.get('package_name'),\n        'original_path': node_dict.get('original_file_path'),\n        'path': node_dict.get('path'),\n        'generated_at': run_started_at.strftime('%Y-%m-%d %H:%M:%S')\n    }%}\n    {{ return(flatten_metrics_metadata_dict) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.125741}, "macro.elementary.create_source_table": {"unique_id": "macro.elementary.create_source_table", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/edr_sources/utils/create_source_table.sql", "original_file_path": "macros/edr_sources/utils/create_source_table.sql", "name": "create_source_table", "macro_sql": "{% macro create_source_table(table_name, sql_query, drop_if_exists, full_refresh = False) %}\n    {% set edr_sources_database = var('dbt_artifacts_database', elementary.target_database()) %}\n    {% set edr_sources_schema = var('dbt_artifacts_schema', target.schema) %}\n    {% set source_table_exists, source_table_relation = dbt.get_or_create_relation(database=edr_sources_database,\n                                                                                   schema=edr_sources_schema,\n                                                                                   identifier=table_name,\n                                                                                   type='table') -%}\n    {% if not adapter.check_schema_exists(edr_sources_database, edr_sources_schema) %}\n        {{ elementary.debug_log('Creating dbt artifacts schema: '~ edr_sources_database ~'.'~edr_sources_schema) }}\n        {% do dbt.create_schema(source_table_relation) %}\n        {% do adapter.commit() %}\n    {% endif %}\n    {% if source_table_exists %}\n        {% if drop_if_exists or full_refresh %}\n            {{ elementary.debug_log('Recreating ' ~ elementary.relation_to_full_name(source_table_relation)) }}\n            {% do adapter.drop_relation(source_table_relation) %}\n            {% do run_query(dbt.create_table_as(False, source_table_relation, sql_query)) %}\n        {% endif %}\n    {% else %}\n        {{ elementary.debug_log('Creating ' ~ elementary.relation_to_full_name(source_table_relation)) }}\n        {% do run_query(dbt.create_table_as(False, source_table_relation, sql_query)) %}\n    {% endif %}\n    {{ return(source_table_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.target_database", "macro.dbt.get_or_create_relation", "macro.elementary.debug_log", "macro.dbt.create_schema", "macro.elementary.relation_to_full_name", "macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1281059}, "macro.elementary.percent": {"unique_id": "macro.elementary.percent", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/percent_query.sql", "original_file_path": "macros/utils/percent_query.sql", "name": "percent", "macro_sql": "{% macro percent(value, total) %}\n    round(cast({{ value }} as {{ dbt_utils.type_float() }}) / nullif(cast({{ total }} as {{ dbt_utils.type_float() }}), 0) * 100.0, 3)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.128503}, "macro.elementary.trim_quotes": {"unique_id": "macro.elementary.trim_quotes", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/trim_quotes.sql", "original_file_path": "macros/utils/trim_quotes.sql", "name": "trim_quotes", "macro_sql": "{% macro trim_quotes(column_to_trim) %}\n    trim({{ column_to_trim }},'\"')\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.128713}, "macro.elementary.target_database": {"unique_id": "macro.elementary.target_database", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "target_database", "macro_sql": "{% macro target_database() -%}\n    {{ return(adapter.dispatch('target_database', 'elementary')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__target_database"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.129152}, "macro.elementary.default__target_database": {"unique_id": "macro.elementary.default__target_database", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "default__target_database", "macro_sql": "{% macro default__target_database() %}\n    {% set database = target.dbname %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.129334}, "macro.elementary.snowflake__target_database": {"unique_id": "macro.elementary.snowflake__target_database", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "snowflake__target_database", "macro_sql": "{% macro snowflake__target_database() %}\n    {% set database = target.database %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.12951}, "macro.elementary.bigquery__target_database": {"unique_id": "macro.elementary.bigquery__target_database", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/target_database.sql", "original_file_path": "macros/utils/cross_db_utils/target_database.sql", "name": "bigquery__target_database", "macro_sql": "{% macro bigquery__target_database() %}\n    {% set database = target.project %}\n    {{ return(database) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.129689}, "macro.elementary.quote_column": {"unique_id": "macro.elementary.quote_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "name": "quote_column", "macro_sql": "{% macro quote_column(column_name) %}\n    {{ adapter.dispatch('quote_column','elementary')(column_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__quote_column"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1300638}, "macro.elementary.default__quote_column": {"unique_id": "macro.elementary.default__quote_column", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/quote_column.sql", "original_file_path": "macros/utils/cross_db_utils/quote_column.sql", "name": "default__quote_column", "macro_sql": "\n\n{%- macro default__quote_column(column_name) -%}\n    {% if adapter.quote(column_name[1:-1]) == column_name %}\n        {{ return(column_name) }}\n    {% else %}\n        {% set quoted_column = adapter.quote(column_name) %}\n        {{ return(quoted_column) }}\n    {% endif %}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1304781}, "macro.elementary.to_char": {"unique_id": "macro.elementary.to_char", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "to_char", "macro_sql": "{% macro to_char(column, format) -%}\n    {{ return(adapter.dispatch('to_char', 'elementary')(column, format)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__to_char"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1310349}, "macro.elementary.default__to_char": {"unique_id": "macro.elementary.default__to_char", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "default__to_char", "macro_sql": "{% macro default__to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.131236}, "macro.elementary.bigquery__to_char": {"unique_id": "macro.elementary.bigquery__to_char", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "bigquery__to_char", "macro_sql": "{% macro bigquery__to_char(column, format) %}\n    cast({{ column }} as STRING {%- if format %}FORMAT '{{ format }}'){%- else %}){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1314418}, "macro.elementary.redshift__to_char": {"unique_id": "macro.elementary.redshift__to_char", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/to_char.sql", "original_file_path": "macros/utils/cross_db_utils/to_char.sql", "name": "redshift__to_char", "macro_sql": "{% macro redshift__to_char(column, format) %}\n    to_char({{ column }} {%- if format %}, '{{ format }}'){%- else %}, 'YYYY-MM-DD HH:MI:SS'){%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.131656}, "macro.elementary.timediff": {"unique_id": "macro.elementary.timediff", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "timediff", "macro_sql": "{% macro timediff(timepart, first_timestamp, second_timestamp) -%}\n    {{ return(adapter.dispatch('timediff', 'elementary')(timepart, first_timestamp, second_timestamp)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__timediff"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.132127}, "macro.elementary.default__timediff": {"unique_id": "macro.elementary.default__timediff", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "default__timediff", "macro_sql": "{% macro default__timediff(timepart, first_timestamp, second_timestamp) %}\n    datediff({{ timepart }}, {{ first_timestamp }}, {{ second_timestamp }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.132315}, "macro.elementary.bigquery__timediff": {"unique_id": "macro.elementary.bigquery__timediff", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timediff.sql", "original_file_path": "macros/utils/cross_db_utils/timediff.sql", "name": "bigquery__timediff", "macro_sql": "{% macro bigquery__timediff(timepart, first_timestamp, second_timestamp) %}\n    timestamp_diff({{ first_timestamp }}, {{ second_timestamp }}, {{ timepart }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.132483}, "macro.elementary.date_trunc": {"unique_id": "macro.elementary.date_trunc", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(date_part, date_expression) -%}\n    {{ return(adapter.dispatch('date_trunc', 'elementary') (date_part, date_expression)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1329222}, "macro.elementary.default__date_trunc": {"unique_id": "macro.elementary.default__date_trunc", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(date_part, date_expression) %}\n    date_trunc('{{date_part}}', cast({{ date_expression }} as {{ dbt_utils.type_timestamp() }}))\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.133101}, "macro.elementary.bigquery__date_trunc": {"unique_id": "macro.elementary.bigquery__date_trunc", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/date_trunc.sql", "original_file_path": "macros/utils/cross_db_utils/date_trunc.sql", "name": "bigquery__date_trunc", "macro_sql": "{% macro bigquery__date_trunc(date_part, date_expression) %}\n    timestamp_trunc(cast({{ date_expression }} as timestamp), {{ date_part }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1332438}, "macro.elementary.timeadd": {"unique_id": "macro.elementary.timeadd", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "timeadd", "macro_sql": "{% macro timeadd(date_part, number, timestamp_expression) -%}\n    {{ return(adapter.dispatch('timeadd', 'elementary')(date_part, number, timestamp_expression)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__timeadd"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1336992}, "macro.elementary.default__timeadd": {"unique_id": "macro.elementary.default__timeadd", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "default__timeadd", "macro_sql": "{% macro default__timeadd(date_part, number, timestamp_expression) %}\n    dateadd({{ date_part }}, {{ number }}, {{ elementary.cast_as_timestamp(timestamp_expression) }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.134012}, "macro.elementary.bigquery__timeadd": {"unique_id": "macro.elementary.bigquery__timeadd", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/cross_db_utils/timeadd.sql", "original_file_path": "macros/utils/cross_db_utils/timeadd.sql", "name": "bigquery__timeadd", "macro_sql": "{% macro bigquery__timeadd(date_part, number, timestamp_expression) %}\n    timestamp_add({{ elementary.cast_as_timestamp(timestamp_expression) }}, INTERVAL {{ number }} {{ date_part }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.cast_as_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.134228}, "macro.elementary.try_cast_column_to_timestamp": {"unique_id": "macro.elementary.try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "try_cast_column_to_timestamp", "macro_sql": "{% macro try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(adapter.dispatch('try_cast_column_to_timestamp', 'elementary')(table_relation, timestamp_column)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__try_cast_column_to_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1347892}, "macro.elementary.default__try_cast_column_to_timestamp": {"unique_id": "macro.elementary.default__try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "default__try_cast_column_to_timestamp", "macro_sql": "{% macro default__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {# We only try casting for snowflake and bigquery, as these support safe cast and the query will not fail if the cast fails #}\n    {%- set query %}\n        select {{ dbt_utils.safe_cast(timestamp_column, dbt_utils.type_timestamp()) }} as timestamp_column\n        from {{ table_relation }}\n        where {{ timestamp_column }} is not null\n        limit 1\n    {%- endset %}\n\n    {%- set result = elementary.result_value(query) %}\n    {%- if result is not none %}\n        {{ return(true) }}\n    {%- endif %}\n    {{ return(false) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.safe_cast", "macro.dbt_utils.type_timestamp", "macro.elementary.result_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.135339}, "macro.elementary.redshift__try_cast_column_to_timestamp": {"unique_id": "macro.elementary.redshift__try_cast_column_to_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "original_file_path": "macros/utils/data_types/try_cast_column_to_timestamp.sql", "name": "redshift__try_cast_column_to_timestamp", "macro_sql": "{% macro redshift__try_cast_column_to_timestamp(table_relation, timestamp_column) %}\n    {{ return(false) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.135487}, "macro.elementary.data_type_list": {"unique_id": "macro.elementary.data_type_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "data_type_list", "macro_sql": "{% macro data_type_list(data_type) %}\n    {% set result = adapter.dispatch('data_type_list','elementary')(data_type) %}\n    {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.137397}, "macro.elementary.default__data_type_list": {"unique_id": "macro.elementary.default__data_type_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "default__data_type_list", "macro_sql": "{% macro default__data_type_list(data_type) %}\n\n    {% set string_list = ['character varying','varchar','character','char','text','nchar','bpchar','string'] | list %}\n    {% set numeric_list = ['integer', 'bigint','smallint','decimal','numeric','real','double precision','enum','int2','int4','int','int8','float8','float'] | list %}\n    {% set timestamp_list = ['date', 'timestamp','timestamptz','timestamp without time zone','timestamp with time zone'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n    {% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.138394}, "macro.elementary.bigquery__data_type_list": {"unique_id": "macro.elementary.bigquery__data_type_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "bigquery__data_type_list", "macro_sql": "{% macro bigquery__data_type_list(data_type) %}\n\n    {% set string_list = ['STRING'] | list %}\n    {% set numeric_list = ['INT64','NUMERIC','BIGNUMERIC','FLOAT64','INTEGER'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIMESTAMP'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.139126}, "macro.elementary.snowflake__data_type_list": {"unique_id": "macro.elementary.snowflake__data_type_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type_list.sql", "original_file_path": "macros/utils/data_types/data_type_list.sql", "name": "snowflake__data_type_list", "macro_sql": "{% macro snowflake__data_type_list(data_type) %}\n\n    {% set string_list = ['VARCHAR','CHAR','CHARACTER','STRING','TEXT'] | list %}\n    {% set numeric_list = ['NUMBER','DECIMAL','NUMERIC','INT','INTEGER','BIGINT','SMALLINT','TINYINT','BYTEINT','FLOAT','FLOAT4','FLOAT8','DOUBLE','DOUBLE PRECISION','REAL'] | list %}\n    {% set timestamp_list = ['DATE','DATETIME','TIME','TIMESTAMP','TIMESTAMP_LTZ','TIMESTAMP_NTZ','TIMESTAMP_TZ'] | list %}\n\n    {%- if data_type == 'string' %}\n        {{ return(string_list) }}\n    {%- elif data_type == 'numeric' %}\n        {{ return(numeric_list) }}\n    {%- elif data_type == 'timestamp' %}\n        {{ return(timestamp_list) }}\n    {%- else %}\n        {{ return([]) }}\n    {%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1401238}, "macro.elementary.cast_as_timestamp": {"unique_id": "macro.elementary.cast_as_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_timestamp", "macro_sql": "{%- macro cast_as_timestamp(timestamp_field) -%}\n    cast({{ timestamp_field }} as {{- dbt_utils.type_timestamp() -}})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.140535}, "macro.elementary.cast_as_float": {"unique_id": "macro.elementary.cast_as_float", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_float", "macro_sql": "{%- macro cast_as_float(column) -%}\n    cast({{ column }} as {{ dbt_utils.type_float() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.140679}, "macro.elementary.cast_as_string": {"unique_id": "macro.elementary.cast_as_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "cast_as_string", "macro_sql": "{%- macro cast_as_string(column) -%}\n    cast({{ column }} as {{ elementary.type_string() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.140827}, "macro.elementary.const_as_string": {"unique_id": "macro.elementary.const_as_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/cast_column.sql", "original_file_path": "macros/utils/data_types/cast_column.sql", "name": "const_as_string", "macro_sql": "{%- macro const_as_string(string) -%}\n    cast('{{ string }}' as {{ elementary.type_string() }})\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.140971}, "macro.elementary.type_bool": {"unique_id": "macro.elementary.type_bool", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_bool", "macro_sql": "{%- macro type_bool() -%}\n    {{ return(adapter.dispatch('type_bool', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__type_bool"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.141579}, "macro.elementary.default__type_bool": {"unique_id": "macro.elementary.default__type_bool", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_bool", "macro_sql": "{% macro default__type_bool() %}\n    boolean\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1416562}, "macro.elementary.bigquery__type_bool": {"unique_id": "macro.elementary.bigquery__type_bool", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "bigquery__type_bool", "macro_sql": "{% macro bigquery__type_bool() %}\n    BOOL\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.141734}, "macro.elementary.type_string": {"unique_id": "macro.elementary.type_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_string", "macro_sql": "\n\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.bigquery__type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.141917}, "macro.elementary.default__type_string": {"unique_id": "macro.elementary.default__type_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    varchar\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.14199}, "macro.elementary.bigquery__type_string": {"unique_id": "macro.elementary.bigquery__type_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "bigquery__type_string", "macro_sql": "{% macro bigquery__type_string() %}\n    string\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.142061}, "macro.elementary.redshift__type_string": {"unique_id": "macro.elementary.redshift__type_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "redshift__type_string", "macro_sql": "{% macro redshift__type_string() %}\n    varchar(256)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1421309}, "macro.elementary.type_long_string": {"unique_id": "macro.elementary.type_long_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "type_long_string", "macro_sql": "\n\n\n{%- macro type_long_string() -%}\n    {{ return(adapter.dispatch('type_long_string', 'elementary')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__type_long_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.142297}, "macro.elementary.default__type_long_string": {"unique_id": "macro.elementary.default__type_long_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "default__type_long_string", "macro_sql": "{%- macro default__type_long_string() -%}\n    {{ elementary.type_string() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.142406}, "macro.elementary.redshift__type_long_string": {"unique_id": "macro.elementary.redshift__type_long_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/data_type.sql", "original_file_path": "macros/utils/data_types/data_type.sql", "name": "redshift__type_long_string", "macro_sql": "{%- macro redshift__type_long_string() -%}\n    varchar(4096)\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.142485}, "macro.elementary.normalize_data_type": {"unique_id": "macro.elementary.normalize_data_type", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/normalize_data_type.sql", "original_file_path": "macros/utils/data_types/normalize_data_type.sql", "name": "normalize_data_type", "macro_sql": "{% macro normalize_data_type(data_type) %}\n    {%- if data_type is defined and data_type is not none %}\n        {%- if data_type in elementary.data_type_list('string') %}\n            {{ return('string') }}\n        {%- elif data_type in elementary.data_type_list('numeric') %}\n            {{ return('numeric') }}\n        {%- elif data_type in elementary.data_type_list('timestamp') %}\n            {{ return('timestamp') }}\n        {%- else %}\n            {{ return('other') }}\n        {% endif %}\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.data_type_list"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.143448}, "macro.elementary.null_int": {"unique_id": "macro.elementary.null_int", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_int", "macro_sql": "{%- macro null_int() -%}\n    cast(null as {{ dbt_utils.type_int() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_int"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1437619}, "macro.elementary.null_timestamp": {"unique_id": "macro.elementary.null_timestamp", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_timestamp", "macro_sql": "{%- macro null_timestamp() -%}\n    cast(null as {{ dbt_utils.type_timestamp() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.143879}, "macro.elementary.null_float": {"unique_id": "macro.elementary.null_float", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_float", "macro_sql": "{%- macro null_float() -%}\n    cast(null as {{ dbt_utils.type_float() }})\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_float"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.143998}, "macro.elementary.null_string": {"unique_id": "macro.elementary.null_string", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/data_types/null_as.sql", "original_file_path": "macros/utils/data_types/null_as.sql", "name": "null_string", "macro_sql": "{% macro null_string() %}\n    cast(null as {{ elementary.type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.type_string"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.144116}, "macro.elementary.insensitive_get_dict_value": {"unique_id": "macro.elementary.insensitive_get_dict_value", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "original_file_path": "macros/utils/dict_utils/insensitive_get_dict_value.sql", "name": "insensitive_get_dict_value", "macro_sql": "{% macro insensitive_get_dict_value(dict, key, default) -%}\n    {% set value = elementary.safe_get_with_default(dict, key) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.lower()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {% set value = elementary.safe_get_with_default(dict, key.upper()) %}\n    {%- if value is not none -%}\n        {{- return(value) -}}\n    {%- endif %}\n    {%- if default is defined -%}\n        {{- return(default) -}}\n    {% else %}\n        {{ return(none) }}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.145447}, "macro.elementary.safe_get_with_default": {"unique_id": "macro.elementary.safe_get_with_default", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "original_file_path": "macros/utils/dict_utils/safe_get_with_default_value.sql", "name": "safe_get_with_default", "macro_sql": "{% macro safe_get_with_default(dict, key, default) %}\n    {% set value = dict.get(key) %}\n    {% if value is defined and value is not none %}\n        {{ return(value) }}\n    {% endif %}\n    {% if default is defined %}\n        {{ return(default) }}\n    {% endif %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.146145}, "macro.elementary.get_node_execution_id": {"unique_id": "macro.elementary.get_node_execution_id", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_node_execution_id.sql", "original_file_path": "macros/utils/graph/get_node_execution_id.sql", "name": "get_node_execution_id", "macro_sql": "{% macro get_node_execution_id(node) %}\n    {% set node_execution_id = [invocation_id, node.get('unique_id')] | join('.') %}\n    {{ return(node_execution_id) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.146542}, "macro.elementary.get_node": {"unique_id": "macro.elementary.get_node", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_node.sql", "original_file_path": "macros/utils/graph/get_node.sql", "name": "get_node", "macro_sql": "{% macro get_node(node_unique_id) %}\n    {# First let's try to find it in regular nodes #}\n    {%- set node = graph.nodes.get(node_unique_id) -%}\n    {%- if not node -%}\n        {# If not found let's try to find it in source nodes #}\n        {%- set node = graph.sources.get(node_unique_id) -%}\n    {%- endif -%}\n    {{ return(node) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1470451}, "macro.elementary.get_elementary_config_from_node": {"unique_id": "macro.elementary.get_elementary_config_from_node", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_elementary_config_from_node.sql", "original_file_path": "macros/utils/graph/get_elementary_config_from_node.sql", "name": "get_elementary_config_from_node", "macro_sql": "{% macro get_elementary_config_from_node(node) %}\n    {% set res = {} %}\n    {% set node_config = node.get('config') %}\n    {% if node_config %}\n        {% set elementary_config = node.config.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n        {% set config_meta = node.config.get('meta') %}\n        {% if config_meta and config_meta is mapping %}\n            {% set elementary_config = config_meta.get('elementary') %}\n            {% if elementary_config and elementary_config is mapping %}\n                {% do res.update(elementary_config) %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {% set node_meta = node.get('meta') %}\n    {% if node_meta and node_meta is mapping %}\n        {% set elementary_config = node_meta.get('elementary') %}\n        {% if elementary_config and elementary_config is mapping %}\n            {% do res.update(elementary_config) %}\n        {% endif %}\n    {% endif %}\n    {{ return(res) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.14892}, "macro.elementary.get_nodes_from_graph": {"unique_id": "macro.elementary.get_nodes_from_graph", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_nodes_from_graph.sql", "original_file_path": "macros/utils/graph/get_nodes_from_graph.sql", "name": "get_nodes_from_graph", "macro_sql": "{% macro get_nodes_from_graph() %}\n    {% set nodes = [] %}\n    {% do nodes.extend(graph.sources.values()) %}\n    {% do nodes.extend(graph.nodes.values()) %}\n    {{ return(nodes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1494122}, "macro.elementary.get_package_database_and_schema": {"unique_id": "macro.elementary.get_package_database_and_schema", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_package_database_and_schema.sql", "original_file_path": "macros/utils/graph/get_package_database_and_schema.sql", "name": "get_package_database_and_schema", "macro_sql": "{% macro get_package_database_and_schema(package_name) %}\n    {% if execute %}\n        {% set node_in_package = graph.nodes.values()\n                                 | selectattr(\"resource_type\", \"==\", \"model\")\n                                 | selectattr(\"package_name\", \"==\", package_name) | first %}\n        {% if node_in_package %}\n            {{ return([node_in_package.database, node_in_package.schema]) }}\n        {% endif %}\n    {% endif %}\n    {{ return([none, none]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.150183}, "macro.elementary.get_parent_model_unique_ids_from_test_node": {"unique_id": "macro.elementary.get_parent_model_unique_ids_from_test_node", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "original_file_path": "macros/utils/graph/get_parent_model_unique_ids_from_test_node.sql", "name": "get_parent_model_unique_ids_from_test_node", "macro_sql": "{% macro get_parent_model_unique_ids_from_test_node(test_node) %}\n    {% set nodes_in_current_package = [] %}\n    {% set test_depends_on = test_node.get('depends_on') %}\n    {% if test_depends_on %}\n        {% set depends_on_nodes = test_depends_on.get('nodes') %}\n        {% if depends_on_nodes %}\n            {% set current_package_name = test_node.get('package_name') %}\n            {% if current_package_name %}\n                {% set current_package_name = '.' ~ current_package_name ~ '.' %}\n                {% for node in depends_on_nodes %}\n                    {% if current_package_name in node %}\n                        {% do nodes_in_current_package.append(node) %}\n                    {% endif %}\n                {% endfor %}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes_in_current_package) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.151486}, "macro.elementary.get_nodes_by_unique_ids": {"unique_id": "macro.elementary.get_nodes_by_unique_ids", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "original_file_path": "macros/utils/graph/get_nodes_by_unique_ids.sql", "name": "get_nodes_by_unique_ids", "macro_sql": "{% macro get_nodes_by_unique_ids(unique_ids) %}\n    {% set nodes = []%}\n    {% if execute %}\n        {% if unique_ids and unique_ids is iterable %}\n            {% for unique_id in unique_ids %}\n                {% set node = elementary.get_node(unique_id) %}\n                {% if node %}\n                    {% do nodes.append(node) %}\n                {% endif %}\n            {% endfor %}\n        {% endif %}\n    {% endif %}\n    {{ return(nodes) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_node"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.152357}, "macro.elementary.get_table_name_from_node": {"unique_id": "macro.elementary.get_table_name_from_node", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_table_name_from_node.sql", "original_file_path": "macros/utils/graph/get_table_name_from_node.sql", "name": "get_table_name_from_node", "macro_sql": "{% macro get_table_name_from_node(node) %}\n    {% if node.identifier %}\n        {% set table_name = node.identifier %}\n    {% elif node.alias %}\n        {% set table_name = node.alias %}\n    {% else %}\n        {% set table_name = node.name %}\n    {% endif %}\n    {{ return(table_name) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1529331}, "macro.elementary.get_model_database_and_schema_from_test_node": {"unique_id": "macro.elementary.get_model_database_and_schema_from_test_node", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "original_file_path": "macros/utils/graph/get_model_database_and_schema_from_test_node.sql", "name": "get_model_database_and_schema_from_test_node", "macro_sql": "{% macro get_model_database_and_schema_from_test_node(test_node) %}\n    {% set test_database = test_node.get('database') %}\n    {% set test_schema = test_node.get('schema') %}\n    {% set config_dict = elementary.safe_get_with_default(test_node, 'config', {}) %}\n    {% set test_schema_sufix = config_dict.get('schema') %}\n    {% if test_schema and test_schema_sufix %}\n        {% set test_schema = test_schema | replace('_' ~ test_schema_sufix, '') %}\n    {% endif %}\n    {{ return([test_database, test_schema]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.safe_get_with_default"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.153804}, "macro.elementary.agate_to_json": {"unique_id": "macro.elementary.agate_to_json", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/agate_to_json.sql", "original_file_path": "macros/utils/run_queries/agate_to_json.sql", "name": "agate_to_json", "macro_sql": "{% macro agate_to_json(agate_table) %}\n    {% set serializable_rows = elementary.agate_to_dicts(agate_table) %}\n    {{ return(tojson(serializable_rows)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.agate_to_dicts"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.154133}, "macro.elementary.result_column_to_list": {"unique_id": "macro.elementary.result_column_to_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/result_column_to_list.sql", "original_file_path": "macros/utils/run_queries/result_column_to_list.sql", "name": "result_column_to_list", "macro_sql": "{% macro result_column_to_list(single_column_query) %}\n    {% set results_list = [] %}\n\n    {%- if 'select' in single_column_query %}\n        {% call statement('get_query_results', fetch_result=True,auto_begin=false) %}\n            {{ single_column_query }}\n        {% endcall %}\n\n        {% if execute %}\n            {% set results_rows = load_result('get_query_results').table.rows.values() %}\n            {%- if results_rows %}\n                {% for result_row in results_rows %}\n                    {{ results_list.append(results_rows[loop.index0].values()[0]) }}\n                {% endfor %}\n            {%- endif %}\n        {% endif %}\n    {%- endif %}\n\n    {{ return(results_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.155276}, "macro.elementary.result_value": {"unique_id": "macro.elementary.result_value", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/result_value.sql", "original_file_path": "macros/utils/run_queries/result_value.sql", "name": "result_value", "macro_sql": "{% macro result_value(single_column_query) %}\n\n    {% set results_list = [] %}\n    {% set query = single_column_query %}\n\n    {% if 'select' in query %}\n        {% set results = run_query(query) %}\n        {%- if results %}\n            {%- do results_list.append(results[0].values()[0]) %}\n        {% endif %}\n    {% endif %}\n\n    {%- if results_list|length > 0 %}\n        {%- set result_value = results_list[0] %}\n    {%- else %}\n        {%- set result_value = null %}\n    {%- endif %}\n\n    {{ return(result_value) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.156266}, "macro.elementary.agate_to_dicts": {"unique_id": "macro.elementary.agate_to_dicts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/agate_to_dicts.sql", "original_file_path": "macros/utils/run_queries/agate_to_dicts.sql", "name": "agate_to_dicts", "macro_sql": "{% macro agate_to_dicts(agate_table) %}\n    {% set column_types = agate_table.column_types %}\n    {% set serializable_rows = [] %}\n    {% for agate_row in agate_table.rows %}\n        {% set serializable_row = {} %}\n        {% for col_name, col_value in agate_row.items() %}\n            {% set serializable_col_value = column_types[loop.index0].jsonify(col_value) %}\n            {% do serializable_row.update({col_name: serializable_col_value}) %}\n        {% endfor %}\n        {% do serializable_rows.append(serializable_row) %}\n    {% endfor %}\n    {{ return(serializable_rows) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1573079}, "macro.elementary.run_query_macro_on_list": {"unique_id": "macro.elementary.run_query_macro_on_list", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/run_query_macro_on_list.sql", "original_file_path": "macros/utils/run_queries/run_query_macro_on_list.sql", "name": "run_query_macro_on_list", "macro_sql": "{% macro run_query_macro_on_list(param_list, query_macro) %}\n\n    {% for param in param_list %}\n        {{ query_macro(param) }}\n        {% if not loop.last %}\n            union all\n        {% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.15772}, "macro.elementary.result_row_to_dict": {"unique_id": "macro.elementary.result_row_to_dict", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/run_queries/result_row_to_dict.sql", "original_file_path": "macros/utils/run_queries/result_row_to_dict.sql", "name": "result_row_to_dict", "macro_sql": "{% macro result_row_to_dict(single_column_query) %}\n\n    {% set query = single_column_query %}\n\n    {% set results = run_query(query) %}\n    {%- if results %}\n        {%- for result in results %}\n            {%- set dict = result.dict() %}\n            {{ return(dict) }}\n        {%- endfor %}\n    {% endif %}\n\n    {{ return(null) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.158344}, "macro.elementary.delete_if_incremental": {"unique_id": "macro.elementary.delete_if_incremental", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/delete_if_incremental.sql", "original_file_path": "macros/utils/table_operations/delete_if_incremental.sql", "name": "delete_if_incremental", "macro_sql": "{% macro delete_if_incremental(where_clause) %}\n\n    {% set query%}\n        delete from {{ this }}\n        where {{ where_clause }}\n    {% endset %}\n\n    {% if is_incremental() %}\n        {% do run_query(query) %}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.is_incremental", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.158782}, "macro.elementary.remove_empty_rows": {"unique_id": "macro.elementary.remove_empty_rows", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/remove_empty_rows.sql", "original_file_path": "macros/utils/table_operations/remove_empty_rows.sql", "name": "remove_empty_rows", "macro_sql": "{% macro remove_empty_rows(table_name) %}\n\n    {%- set columns = adapter.get_columns_in_relation(table_name) -%}\n    {%- set delete_empty_rows_query %}\n        delete from {{ table_name }} where {% for column in columns -%} {{ column.name }} is NULL {{- \" and \" if not loop.last else \"\" -}} {%- endfor -%}\n    {%- endset %}\n    {%- do run_query(delete_empty_rows_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1593852}, "macro.elementary.remove_rows": {"unique_id": "macro.elementary.remove_rows", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/remove_rows.sql", "original_file_path": "macros/utils/table_operations/remove_rows.sql", "name": "remove_rows", "macro_sql": "{% macro remove_rows(table_name) %}\n\n    {% set remove_rows_query %}\n        delete from {{ table_name }}\n    {% endset %}\n    {% do run_query(remove_rows_query) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.159712}, "macro.elementary.get_columns_and_types": {"unique_id": "macro.elementary.get_columns_and_types", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_columns_and_types.sql", "original_file_path": "macros/utils/table_operations/get_columns_and_types.sql", "name": "get_columns_and_types", "macro_sql": "{% macro get_columns_and_types(table_name, schema_name = none, database_name = none) %}\n\n    {# dbt models can be found with identifier only #}\n    {# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set columns = [] %}\n\n    {%- set relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set columns_from_relation = adapter.get_columns_in_relation(relation) -%}\n\n    {% for column in columns_from_relation %}\n        {%- set column_item = {'column_name': column['column'], 'data_type': elementary.normalize_data_type(column['dtype'])} %}\n        {%- do columns.append(column_item) -%}\n    {% endfor %}\n\n    {{ return(columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.target_database", "macro.elementary.normalize_data_type"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1609979}, "macro.elementary.create_temp_table": {"unique_id": "macro.elementary.create_temp_table", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/create_temp_table.sql", "original_file_path": "macros/utils/table_operations/create_temp_table.sql", "name": "create_temp_table", "macro_sql": "{% macro create_temp_table(database_name, schema_name, table_name, sql_query) %}\n    {% set temp_table_exists, temp_table_relation = dbt.get_or_create_relation(database=database_name,\n                                                                               schema=schema_name,\n                                                                               identifier=table_name,\n                                                                               type='table') -%}\n    {% if temp_table_exists %}\n        {% do adapter.drop_relation(temp_table_relation) %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% else %}\n        {% do run_query(dbt.create_table_as(True, temp_table_relation, sql_query)) %}\n    {% endif %}\n    {{ return(temp_table_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.161972}, "macro.elementary.insert_dicts": {"unique_id": "macro.elementary.insert_dicts", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "insert_dicts", "macro_sql": "{% macro insert_dicts(table_relation, dicts, chunk_size=50) %}\n    {% if not table_relation %}\n        {{ elementary.edr_log('Recieved table relation is not valid (make sure elementary models were executed successfully first)') }}\n        {{ return(none) }}\n    {% endif %}\n    {% set columns = adapter.get_columns_in_relation(table_relation) -%}\n    {% if not columns %}\n        {% set table_name = elementary.relation_to_full_name(table_relation) %}\n        {{ elementary.edr_log('Could not extract columns for table - ' ~ table_name ~ ' (might be a permissions issue)') }}\n        {{ return(none) }}\n    {% endif %}\n    {% set dicts_chunks = elementary.split_list_to_chunks(dicts, chunk_size) %}\n    {% for dicts_chunk in dicts_chunks %}\n        {% set insert_dicts_query = elementary.get_insert_dicts_query(table_relation, columns, dicts_chunk) %}\n        {% do run_query(insert_dicts_query) %}\n    {% endfor %}\n    {% do adapter.commit() %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.edr_log", "macro.elementary.relation_to_full_name", "macro.elementary.split_list_to_chunks", "macro.elementary.get_insert_dicts_query", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.165026}, "macro.elementary.get_insert_dicts_query": {"unique_id": "macro.elementary.get_insert_dicts_query", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "get_insert_dicts_query", "macro_sql": "{% macro get_insert_dicts_query(table_relation, columns, dicts) -%}\n    {% set insert_dicts_query %}\n        insert into {{ table_relation }}\n            ({%- for column in columns -%}\n                {{- column.name -}} {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}) values\n            {% for dict in dicts -%}\n                ({%- for column in columns -%}\n                    {%- set column_value = elementary.insensitive_get_dict_value(dict, column.name, none) -%}\n                    {{ elementary.render_value(column_value) }}\n                    {{- \",\" if not loop.last else \"\" -}}\n                 {%- endfor -%}) {{- \",\" if not loop.last else \"\" -}}\n            {%- endfor -%}\n    {% endset %}\n    {{ return(insert_dicts_query) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.insensitive_get_dict_value", "macro.elementary.render_value"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.16582}, "macro.elementary.escape_special_chars": {"unique_id": "macro.elementary.escape_special_chars", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "escape_special_chars", "macro_sql": "\n\n{%- macro escape_special_chars(string_value) -%}\n    {{- return(string_value | replace(\"\\\\\", \"\\\\\\\\\") | replace(\"'\", \"\\\\'\") | replace(\"\\n\", \"\\\\n\")) -}}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.166087}, "macro.elementary.render_value": {"unique_id": "macro.elementary.render_value", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_dicts.sql", "original_file_path": "macros/utils/table_operations/insert_dicts.sql", "name": "render_value", "macro_sql": "{%- macro render_value(value) -%}\n    {%- if value is defined and value is not none -%}\n        {%- if value is number -%}\n            {{- value -}}\n        {%- elif value is string -%}\n            '{{- elementary.escape_special_chars(value) -}}'\n        {%- elif value is mapping or value is sequence -%}\n            '{{- elementary.escape_special_chars(tojson(value)) -}}'\n        {%- else -%}\n            NULL\n        {%- endif -%}\n    {%- else -%}\n        NULL\n    {%- endif -%}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.escape_special_chars"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.166615}, "macro.elementary.get_row_count": {"unique_id": "macro.elementary.get_row_count", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_row_count.sql", "original_file_path": "macros/utils/table_operations/get_row_count.sql", "name": "get_row_count", "macro_sql": "{% macro get_row_count(full_table_name) %}\n\n    {% set query_row_count %}\n        select count(*) from {{ full_table_name }}\n    {% endset %}\n    {% if execute %}\n        {% set result = run_query(query_row_count).columns[0].values()[0] %}\n    {% endif %}\n    {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.167189}, "macro.elementary.create_or_replace": {"unique_id": "macro.elementary.create_or_replace", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "create_or_replace", "macro_sql": "{% macro create_or_replace(temporary, relation, sql_query) %}\n    {{ return(adapter.dispatch('create_or_replace', 'elementary')(temporary, relation, sql_query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__create_or_replace"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1676412}, "macro.elementary.default__create_or_replace": {"unique_id": "macro.elementary.default__create_or_replace", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "default__create_or_replace", "macro_sql": "{% macro default__create_or_replace(temporary, relation, sql_query) %}\n    {%- do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1678588}, "macro.elementary.redshift__create_or_replace": {"unique_id": "macro.elementary.redshift__create_or_replace", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/create_or_replace.sql", "original_file_path": "macros/utils/table_operations/create_or_replace.sql", "name": "redshift__create_or_replace", "macro_sql": "{% macro redshift__create_or_replace(temporary, relation, sql_query) %}\n    {%- do dbt.drop_relation_if_exists(relation) -%}\n    {%- do run_query(dbt.create_table_as(temporary, relation, sql_query)) %}\n    {% do adapter.commit() %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.drop_relation_if_exists", "macro.dbt.run_query", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.168246}, "macro.elementary.table_exists_in_target": {"unique_id": "macro.elementary.table_exists_in_target", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/table_exists.sql", "original_file_path": "macros/utils/table_operations/table_exists.sql", "name": "table_exists_in_target", "macro_sql": "{% macro table_exists_in_target(table_name, schema_name, database_name) %}\n\n{# dbt models can be found with identifier only #}\n{# for non-dbt tables database_name and schema_name are required #}\n\n    {%- if not database_name is defined %}\n        {%- set database_name = elementary.target_database() %}\n    {%- endif %}\n    {%- if not schema_name is defined %}\n        {%- set schema_name = target.schema %}\n    {%- endif %}\n\n    {%- set source_relation = adapter.get_relation(\n          database=database_name,\n          schema=schema_name,\n          identifier=table_name) -%}\n\n    {%- set table_exists = source_relation is not none -%}\n    {{ return(table_exists) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.target_database"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1690931}, "macro.elementary.insert_as_select": {"unique_id": "macro.elementary.insert_as_select", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/insert_as_select.sql", "original_file_path": "macros/utils/table_operations/insert_as_select.sql", "name": "insert_as_select", "macro_sql": "{% macro insert_as_select(table_relation, select_query) %}\n    {# when calling this macro, you need to add depends on ref comment #}\n    {# ref_model and select_query need to have the same columns #}\n\n    {%- set insert_query %}\n        insert into {{ table_relation }}\n        with tmp_table as (\n            {{ select_query }}\n        )\n        select * from tmp_table\n    {%- endset %}\n\n    {{ return(insert_query) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1695302}, "macro.elementary.merge_sql": {"unique_id": "macro.elementary.merge_sql", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "merge_sql", "macro_sql": "{% macro merge_sql(target_relation, tmp_relation, unique_key, dest_columns) -%}\n    {{ return(adapter.dispatch('merge_sql', 'elementary')(target_relation, tmp_relation, unique_key, dest_columns)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1700082}, "macro.elementary.default__merge_sql": {"unique_id": "macro.elementary.default__merge_sql", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "default__merge_sql", "macro_sql": "{% macro default__merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {%- set merge_sql = dbt.get_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1702888}, "macro.elementary.redshift__merge_sql": {"unique_id": "macro.elementary.redshift__merge_sql", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/merge_sql.sql", "original_file_path": "macros/utils/table_operations/merge_sql.sql", "name": "redshift__merge_sql", "macro_sql": "{% macro redshift__merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {%- set merge_sql = dbt.get_delete_insert_merge_sql(target_relation, tmp_relation, unique_key, dest_columns) %}\n    {{ return(merge_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1705651}, "macro.elementary.get_relation_max_name_length": {"unique_id": "macro.elementary.get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "get_relation_max_name_length", "macro_sql": "{% macro get_relation_max_name_length() %}\n    {{ return(adapter.dispatch('get_relation_max_name_length', 'elementary')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.default__get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.170959}, "macro.elementary.default__get_relation_max_name_length": {"unique_id": "macro.elementary.default__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "default__get_relation_max_name_length", "macro_sql": "{% macro default__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(none) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.171368}, "macro.elementary.redshift__get_relation_max_name_length": {"unique_id": "macro.elementary.redshift__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "redshift__get_relation_max_name_length", "macro_sql": "{% macro redshift__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(127) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.17152}, "macro.elementary.postgres__get_relation_max_name_length": {"unique_id": "macro.elementary.postgres__get_relation_max_name_length", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/get_relation_max_length.sql", "original_file_path": "macros/utils/table_operations/get_relation_max_length.sql", "name": "postgres__get_relation_max_name_length", "macro_sql": "{% macro postgres__get_relation_max_name_length(temporary, relation, sql_query) %}\n    {{ return(63) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.171672}, "macro.elementary.relation_exists": {"unique_id": "macro.elementary.relation_exists", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/relation_exists.sql", "original_file_path": "macros/utils/table_operations/relation_exists.sql", "name": "relation_exists", "macro_sql": "{% macro relation_exists(relation) %}\n    {%- set loaded_relation = load_relation(relation) -%}\n    {% if loaded_relation is not none %}\n        {{ return(True) }}\n    {% endif %}\n    {{ return(False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_relation"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.172099}, "macro.elementary.table_name_with_suffix": {"unique_id": "macro.elementary.table_name_with_suffix", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/table_operations/table_name_with_suffix.sql", "original_file_path": "macros/utils/table_operations/table_name_with_suffix.sql", "name": "table_name_with_suffix", "macro_sql": "{% macro table_name_with_suffix(table_name, suffix) %}\n    {% set relation_max_name_length = elementary.get_relation_max_name_length()  %}\n    {% if relation_max_name_length %}\n        {% set suffix_length = suffix | length %}\n        {% set table_name_with_suffix = table_name[:relation_max_name_length - suffix_length] ~ suffix %}\n    {% else %}\n        {% set table_name_with_suffix = table_name ~ suffix %}\n    {% endif %}\n    {{ return(table_name_with_suffix) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.elementary.get_relation_max_name_length"]}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.172769}, "macro.elementary.union_lists": {"unique_id": "macro.elementary.union_lists", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/list_utils/union_lists.sql", "original_file_path": "macros/utils/list_utils/union_lists.sql", "name": "union_lists", "macro_sql": "{% macro union_lists(list1, list2) %}\n    {% set union_list = [] %}\n    {% do union_list.extend(list1) %}\n    {% do union_list.extend(list2) %}\n    {{ return(union_list | unique | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.173232}, "macro.elementary.strings_list_to_tuple": {"unique_id": "macro.elementary.strings_list_to_tuple", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/list_utils/strings_list_to_tuple.sql", "original_file_path": "macros/utils/list_utils/strings_list_to_tuple.sql", "name": "strings_list_to_tuple", "macro_sql": "{% macro strings_list_to_tuple(strings) %}\n    {%- if strings %}\n        ({% for string in strings %} '{{ string }}' {{ \",\" if not loop.last else \"\" }} {% endfor %})\n    {%- else %}\n        ('')\n    {%- endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.173692}, "macro.elementary.split_list_to_chunks": {"unique_id": "macro.elementary.split_list_to_chunks", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/list_utils/split_list_to_chunks.sql", "original_file_path": "macros/utils/list_utils/split_list_to_chunks.sql", "name": "split_list_to_chunks", "macro_sql": "{% macro split_list_to_chunks(item_list, chunk_size = 50) %}\n    {% set chunks = [] %}\n    {% set current_chunk = [] %}\n    {% for item in item_list %}\n        {% set reminder = loop.index0 % chunk_size %}\n        {% if reminder == 0 and current_chunk %}\n            {% do chunks.append(current_chunk.copy()) %}\n            {% do current_chunk.clear() %}\n        {% endif %}\n        {% do current_chunk.append(item) %}\n    {% endfor %}\n    {% if current_chunk %}\n        {% do chunks.append(current_chunk) %}\n    {% endif %}\n    {{ return(chunks) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.174747}, "macro.elementary.lists_intersection": {"unique_id": "macro.elementary.lists_intersection", "package_name": "elementary", "root_path": "/Users/skinner/Github/dbt/dbt_packages/elementary", "path": "macros/utils/list_utils/lists_intersection.sql", "original_file_path": "macros/utils/list_utils/lists_intersection.sql", "name": "lists_intersection", "macro_sql": "{% macro lists_intersection(list_a, list_b) %}\n\n    {%- set new_list = [] %}\n\n    {% for i in list_a %}\n        {% if i in list_b %}\n            {{ new_list.append(i) }}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(new_list) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true}, "patch_path": null, "arguments": [], "created_at": 1654743709.1753018}}, "docs": {"dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "/Users/skinner/Github/dbt/.venv/lib/python3.8/site-packages/dbt/include/global_project", "path": "overview.md", "original_file_path": "docs/overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"operation.elastic_dbt.elastic_dbt-on-run-end-0": [], "model.elementary.test_run_results": ["source.elementary.elementary_dbt_artifacts.dbt_models", "source.elementary.elementary_dbt_artifacts.dbt_run_results", "source.elementary.elementary_dbt_artifacts.dbt_sources", "source.elementary.elementary_dbt_artifacts.dbt_tests"], "model.elementary.model_run_results": ["source.elementary.elementary_dbt_artifacts.dbt_models", "source.elementary.elementary_dbt_artifacts.dbt_run_results"], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_schema_changes": [], "model.elementary.alerts_data_monitoring": ["model.elementary.metrics_anomaly_score"], "model.elementary.monitors_runs": ["model.elementary.data_monitoring_metrics"], "model.elementary.metrics_anomaly_score": ["model.elementary.data_monitoring_metrics"], "model.elementary.anomaly_threshold_sensitivity": ["model.elementary.metrics_anomaly_score"], "model.elementary.schema_columns_snapshot": ["model.elementary.filtered_information_schema_columns"], "model.elementary.table_changes": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"], "model.elementary.column_changes": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"], "model.elementary.schema_tables_snapshot": ["model.elementary.filtered_information_schema_tables"], "model.elementary.previous_schema_tables": ["model.elementary.schema_tables_snapshot"], "model.elementary.current_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.current_schema_tables": ["model.elementary.schema_tables_snapshot"], "model.elementary.previous_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.data_monitoring_metrics": [], "model.elementary.filtered_information_schema_columns": [], "model.elementary.filtered_information_schema_tables": [], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "source.elementary.elementary_dbt_artifacts.dbt_run_results": [], "source.elementary.elementary_dbt_artifacts.dbt_models": [], "source.elementary.elementary_dbt_artifacts.dbt_tests": [], "source.elementary.elementary_dbt_artifacts.dbt_sources": [], "source.elementary.elementary_dbt_artifacts.dbt_exposures": [], "source.elementary.elementary_dbt_artifacts.dbt_metrics": []}, "child_map": {"operation.elastic_dbt.elastic_dbt-on-run-end-0": [], "model.elementary.test_run_results": [], "model.elementary.model_run_results": [], "model.elementary.alerts_dbt_tests": [], "model.elementary.alerts_schema_changes": [], "model.elementary.alerts_data_monitoring": [], "model.elementary.monitors_runs": [], "model.elementary.metrics_anomaly_score": ["model.elementary.alerts_data_monitoring", "model.elementary.anomaly_threshold_sensitivity"], "model.elementary.anomaly_threshold_sensitivity": [], "model.elementary.schema_columns_snapshot": ["model.elementary.current_schema_columns", "model.elementary.previous_schema_columns"], "model.elementary.table_changes": [], "model.elementary.column_changes": [], "model.elementary.schema_tables_snapshot": ["model.elementary.current_schema_tables", "model.elementary.previous_schema_tables"], "model.elementary.previous_schema_tables": ["model.elementary.table_changes"], "model.elementary.current_schema_columns": ["model.elementary.column_changes"], "model.elementary.current_schema_tables": ["model.elementary.table_changes"], "model.elementary.previous_schema_columns": ["model.elementary.column_changes"], "model.elementary.data_monitoring_metrics": ["model.elementary.metrics_anomaly_score", "model.elementary.monitors_runs"], "model.elementary.filtered_information_schema_columns": ["model.elementary.schema_columns_snapshot"], "model.elementary.filtered_information_schema_tables": ["model.elementary.schema_tables_snapshot"], "operation.elementary.elementary-on-run-start-0": [], "operation.elementary.elementary-on-run-end-0": [], "source.elementary.elementary_dbt_artifacts.dbt_run_results": ["model.elementary.model_run_results", "model.elementary.test_run_results"], "source.elementary.elementary_dbt_artifacts.dbt_models": ["model.elementary.model_run_results", "model.elementary.test_run_results"], "source.elementary.elementary_dbt_artifacts.dbt_tests": ["model.elementary.test_run_results"], "source.elementary.elementary_dbt_artifacts.dbt_sources": ["model.elementary.test_run_results"], "source.elementary.elementary_dbt_artifacts.dbt_exposures": [], "source.elementary.elementary_dbt_artifacts.dbt_metrics": []}}